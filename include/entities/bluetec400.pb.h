// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bluetec400.proto

#ifndef PROTOBUF_bluetec400_2eproto__INCLUDED
#define PROTOBUF_bluetec400_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pacote_posicao.pb.h"
// @@protoc_insertion_point(includes)

namespace pacote_posicao {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_bluetec400_2eproto();
void protobuf_AssignDesc_bluetec400_2eproto();
void protobuf_ShutdownFile_bluetec400_2eproto();

class bluetec400;
class t_telemetria_bluetec400;

// ===================================================================

class bluetec400 : public ::google::protobuf::Message {
 public:
  bluetec400();
  virtual ~bluetec400();

  bluetec400(const bluetec400& from);

  inline bluetec400& operator=(const bluetec400& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bluetec400& default_instance();

  void Swap(bluetec400* other);

  // implements Message ----------------------------------------------

  inline bluetec400* New() const { return New(NULL); }

  bluetec400* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bluetec400& from);
  void MergeFrom(const bluetec400& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(bluetec400* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pacote_posicao.pacote_enriquecido pe = 1;
  bool has_pe() const;
  void clear_pe();
  static const int kPeFieldNumber = 1;
  const ::pacote_posicao::pacote_enriquecido& pe() const;
  ::pacote_posicao::pacote_enriquecido* mutable_pe();
  ::pacote_posicao::pacote_enriquecido* release_pe();
  void set_allocated_pe(::pacote_posicao::pacote_enriquecido* pe);

  // repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
  int tb_size() const;
  void clear_tb();
  static const int kTbFieldNumber = 2;
  const ::pacote_posicao::t_telemetria_bluetec400& tb(int index) const;
  ::pacote_posicao::t_telemetria_bluetec400* mutable_tb(int index);
  ::pacote_posicao::t_telemetria_bluetec400* add_tb();
  ::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 >*
      mutable_tb();
  const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 >&
      tb() const;

  // @@protoc_insertion_point(class_scope:pacote_posicao.bluetec400)
 private:
  inline void set_has_pe();
  inline void clear_has_pe();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pacote_posicao::pacote_enriquecido* pe_;
  ::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 > tb_;
  friend void  protobuf_AddDesc_bluetec400_2eproto();
  friend void protobuf_AssignDesc_bluetec400_2eproto();
  friend void protobuf_ShutdownFile_bluetec400_2eproto();

  void InitAsDefaultInstance();
  static bluetec400* default_instance_;
};
// -------------------------------------------------------------------

class t_telemetria_bluetec400 : public ::google::protobuf::Message {
 public:
  t_telemetria_bluetec400();
  virtual ~t_telemetria_bluetec400();

  t_telemetria_bluetec400(const t_telemetria_bluetec400& from);

  inline t_telemetria_bluetec400& operator=(const t_telemetria_bluetec400& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_telemetria_bluetec400& default_instance();

  void Swap(t_telemetria_bluetec400* other);

  // implements Message ----------------------------------------------

  inline t_telemetria_bluetec400* New() const { return New(NULL); }

  t_telemetria_bluetec400* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_telemetria_bluetec400& from);
  void MergeFrom(const t_telemetria_bluetec400& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(t_telemetria_bluetec400* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 trecho = 1;
  bool has_trecho() const;
  void clear_trecho();
  static const int kTrechoFieldNumber = 1;
  ::google::protobuf::int32 trecho() const;
  void set_trecho(::google::protobuf::int32 value);

  // optional int32 datahora = 2;
  bool has_datahora() const;
  void clear_datahora();
  static const int kDatahoraFieldNumber = 2;
  ::google::protobuf::int32 datahora() const;
  void set_datahora(::google::protobuf::int32 value);

  // optional double velocidade = 3;
  bool has_velocidade() const;
  void clear_velocidade();
  static const int kVelocidadeFieldNumber = 3;
  double velocidade() const;
  void set_velocidade(double value);

  // optional int32 rpm = 4;
  bool has_rpm() const;
  void clear_rpm();
  static const int kRpmFieldNumber = 4;
  ::google::protobuf::int32 rpm() const;
  void set_rpm(::google::protobuf::int32 value);

  // optional double odometro = 5;
  bool has_odometro() const;
  void clear_odometro();
  static const int kOdometroFieldNumber = 5;
  double odometro() const;
  void set_odometro(double value);

  // optional double horimetro = 6;
  bool has_horimetro() const;
  void clear_horimetro();
  static const int kHorimetroFieldNumber = 6;
  double horimetro() const;
  void set_horimetro(double value);

  // optional bool ed1 = 7;
  bool has_ed1() const;
  void clear_ed1();
  static const int kEd1FieldNumber = 7;
  bool ed1() const;
  void set_ed1(bool value);

  // optional bool ed2 = 8;
  bool has_ed2() const;
  void clear_ed2();
  static const int kEd2FieldNumber = 8;
  bool ed2() const;
  void set_ed2(bool value);

  // optional bool ed3 = 9;
  bool has_ed3() const;
  void clear_ed3();
  static const int kEd3FieldNumber = 9;
  bool ed3() const;
  void set_ed3(bool value);

  // optional bool ed4 = 10;
  bool has_ed4() const;
  void clear_ed4();
  static const int kEd4FieldNumber = 10;
  bool ed4() const;
  void set_ed4(bool value);

  // optional bool ed5 = 11;
  bool has_ed5() const;
  void clear_ed5();
  static const int kEd5FieldNumber = 11;
  bool ed5() const;
  void set_ed5(bool value);

  // optional bool ed6 = 12;
  bool has_ed6() const;
  void clear_ed6();
  static const int kEd6FieldNumber = 12;
  bool ed6() const;
  void set_ed6(bool value);

  // optional bool ed7 = 13;
  bool has_ed7() const;
  void clear_ed7();
  static const int kEd7FieldNumber = 13;
  bool ed7() const;
  void set_ed7(bool value);

  // optional bool ed8 = 14;
  bool has_ed8() const;
  void clear_ed8();
  static const int kEd8FieldNumber = 14;
  bool ed8() const;
  void set_ed8(bool value);

  // optional double acelx = 15;
  bool has_acelx() const;
  void clear_acelx();
  static const int kAcelxFieldNumber = 15;
  double acelx() const;
  void set_acelx(double value);

  // optional double acely = 16;
  bool has_acely() const;
  void clear_acely();
  static const int kAcelyFieldNumber = 16;
  double acely() const;
  void set_acely(double value);

  // optional int32 an1 = 17;
  bool has_an1() const;
  void clear_an1();
  static const int kAn1FieldNumber = 17;
  ::google::protobuf::int32 an1() const;
  void set_an1(::google::protobuf::int32 value);

  // optional int32 an2 = 18;
  bool has_an2() const;
  void clear_an2();
  static const int kAn2FieldNumber = 18;
  ::google::protobuf::int32 an2() const;
  void set_an2(::google::protobuf::int32 value);

  // optional int32 an3 = 19;
  bool has_an3() const;
  void clear_an3();
  static const int kAn3FieldNumber = 19;
  ::google::protobuf::int32 an3() const;
  void set_an3(::google::protobuf::int32 value);

  // optional int32 an4 = 20;
  bool has_an4() const;
  void clear_an4();
  static const int kAn4FieldNumber = 20;
  ::google::protobuf::int32 an4() const;
  void set_an4(::google::protobuf::int32 value);

  // optional bytes operacao = 21;
  bool has_operacao() const;
  void clear_operacao();
  static const int kOperacaoFieldNumber = 21;
  const ::std::string& operacao() const;
  void set_operacao(const ::std::string& value);
  void set_operacao(const char* value);
  void set_operacao(const void* value, size_t size);
  ::std::string* mutable_operacao();
  ::std::string* release_operacao();
  void set_allocated_operacao(::std::string* operacao);

  // @@protoc_insertion_point(class_scope:pacote_posicao.t_telemetria_bluetec400)
 private:
  inline void set_has_trecho();
  inline void clear_has_trecho();
  inline void set_has_datahora();
  inline void clear_has_datahora();
  inline void set_has_velocidade();
  inline void clear_has_velocidade();
  inline void set_has_rpm();
  inline void clear_has_rpm();
  inline void set_has_odometro();
  inline void clear_has_odometro();
  inline void set_has_horimetro();
  inline void clear_has_horimetro();
  inline void set_has_ed1();
  inline void clear_has_ed1();
  inline void set_has_ed2();
  inline void clear_has_ed2();
  inline void set_has_ed3();
  inline void clear_has_ed3();
  inline void set_has_ed4();
  inline void clear_has_ed4();
  inline void set_has_ed5();
  inline void clear_has_ed5();
  inline void set_has_ed6();
  inline void clear_has_ed6();
  inline void set_has_ed7();
  inline void clear_has_ed7();
  inline void set_has_ed8();
  inline void clear_has_ed8();
  inline void set_has_acelx();
  inline void clear_has_acelx();
  inline void set_has_acely();
  inline void clear_has_acely();
  inline void set_has_an1();
  inline void clear_has_an1();
  inline void set_has_an2();
  inline void clear_has_an2();
  inline void set_has_an3();
  inline void clear_has_an3();
  inline void set_has_an4();
  inline void clear_has_an4();
  inline void set_has_operacao();
  inline void clear_has_operacao();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 trecho_;
  ::google::protobuf::int32 datahora_;
  double velocidade_;
  double odometro_;
  double horimetro_;
  ::google::protobuf::int32 rpm_;
  bool ed1_;
  bool ed2_;
  bool ed3_;
  bool ed4_;
  bool ed5_;
  bool ed6_;
  bool ed7_;
  bool ed8_;
  ::google::protobuf::int32 an1_;
  double acelx_;
  double acely_;
  ::google::protobuf::int32 an2_;
  ::google::protobuf::int32 an3_;
  ::google::protobuf::internal::ArenaStringPtr operacao_;
  ::google::protobuf::int32 an4_;
  friend void  protobuf_AddDesc_bluetec400_2eproto();
  friend void protobuf_AssignDesc_bluetec400_2eproto();
  friend void protobuf_ShutdownFile_bluetec400_2eproto();

  void InitAsDefaultInstance();
  static t_telemetria_bluetec400* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// bluetec400

// required .pacote_posicao.pacote_enriquecido pe = 1;
inline bool bluetec400::has_pe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bluetec400::set_has_pe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bluetec400::clear_has_pe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bluetec400::clear_pe() {
  if (pe_ != NULL) pe_->::pacote_posicao::pacote_enriquecido::Clear();
  clear_has_pe();
}
inline const ::pacote_posicao::pacote_enriquecido& bluetec400::pe() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.bluetec400.pe)
  return pe_ != NULL ? *pe_ : *default_instance_->pe_;
}
inline ::pacote_posicao::pacote_enriquecido* bluetec400::mutable_pe() {
  set_has_pe();
  if (pe_ == NULL) {
    pe_ = new ::pacote_posicao::pacote_enriquecido;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.bluetec400.pe)
  return pe_;
}
inline ::pacote_posicao::pacote_enriquecido* bluetec400::release_pe() {
  clear_has_pe();
  ::pacote_posicao::pacote_enriquecido* temp = pe_;
  pe_ = NULL;
  return temp;
}
inline void bluetec400::set_allocated_pe(::pacote_posicao::pacote_enriquecido* pe) {
  delete pe_;
  pe_ = pe;
  if (pe) {
    set_has_pe();
  } else {
    clear_has_pe();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.bluetec400.pe)
}

// repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
inline int bluetec400::tb_size() const {
  return tb_.size();
}
inline void bluetec400::clear_tb() {
  tb_.Clear();
}
inline const ::pacote_posicao::t_telemetria_bluetec400& bluetec400::tb(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.bluetec400.tb)
  return tb_.Get(index);
}
inline ::pacote_posicao::t_telemetria_bluetec400* bluetec400::mutable_tb(int index) {
  // @@protoc_insertion_point(field_mutable:pacote_posicao.bluetec400.tb)
  return tb_.Mutable(index);
}
inline ::pacote_posicao::t_telemetria_bluetec400* bluetec400::add_tb() {
  // @@protoc_insertion_point(field_add:pacote_posicao.bluetec400.tb)
  return tb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 >*
bluetec400::mutable_tb() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.bluetec400.tb)
  return &tb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 >&
bluetec400::tb() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.bluetec400.tb)
  return tb_;
}

// -------------------------------------------------------------------

// t_telemetria_bluetec400

// optional int32 trecho = 1;
inline bool t_telemetria_bluetec400::has_trecho() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_telemetria_bluetec400::set_has_trecho() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_telemetria_bluetec400::clear_has_trecho() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_telemetria_bluetec400::clear_trecho() {
  trecho_ = 0;
  clear_has_trecho();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::trecho() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.trecho)
  return trecho_;
}
inline void t_telemetria_bluetec400::set_trecho(::google::protobuf::int32 value) {
  set_has_trecho();
  trecho_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.trecho)
}

// optional int32 datahora = 2;
inline bool t_telemetria_bluetec400::has_datahora() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_telemetria_bluetec400::set_has_datahora() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_telemetria_bluetec400::clear_has_datahora() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_telemetria_bluetec400::clear_datahora() {
  datahora_ = 0;
  clear_has_datahora();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::datahora() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.datahora)
  return datahora_;
}
inline void t_telemetria_bluetec400::set_datahora(::google::protobuf::int32 value) {
  set_has_datahora();
  datahora_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.datahora)
}

// optional double velocidade = 3;
inline bool t_telemetria_bluetec400::has_velocidade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_telemetria_bluetec400::set_has_velocidade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_telemetria_bluetec400::clear_has_velocidade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_telemetria_bluetec400::clear_velocidade() {
  velocidade_ = 0;
  clear_has_velocidade();
}
inline double t_telemetria_bluetec400::velocidade() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.velocidade)
  return velocidade_;
}
inline void t_telemetria_bluetec400::set_velocidade(double value) {
  set_has_velocidade();
  velocidade_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.velocidade)
}

// optional int32 rpm = 4;
inline bool t_telemetria_bluetec400::has_rpm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_telemetria_bluetec400::set_has_rpm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_telemetria_bluetec400::clear_has_rpm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_telemetria_bluetec400::clear_rpm() {
  rpm_ = 0;
  clear_has_rpm();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::rpm() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.rpm)
  return rpm_;
}
inline void t_telemetria_bluetec400::set_rpm(::google::protobuf::int32 value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.rpm)
}

// optional double odometro = 5;
inline bool t_telemetria_bluetec400::has_odometro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_telemetria_bluetec400::set_has_odometro() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_telemetria_bluetec400::clear_has_odometro() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_telemetria_bluetec400::clear_odometro() {
  odometro_ = 0;
  clear_has_odometro();
}
inline double t_telemetria_bluetec400::odometro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.odometro)
  return odometro_;
}
inline void t_telemetria_bluetec400::set_odometro(double value) {
  set_has_odometro();
  odometro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.odometro)
}

// optional double horimetro = 6;
inline bool t_telemetria_bluetec400::has_horimetro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void t_telemetria_bluetec400::set_has_horimetro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void t_telemetria_bluetec400::clear_has_horimetro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void t_telemetria_bluetec400::clear_horimetro() {
  horimetro_ = 0;
  clear_has_horimetro();
}
inline double t_telemetria_bluetec400::horimetro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.horimetro)
  return horimetro_;
}
inline void t_telemetria_bluetec400::set_horimetro(double value) {
  set_has_horimetro();
  horimetro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.horimetro)
}

// optional bool ed1 = 7;
inline bool t_telemetria_bluetec400::has_ed1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void t_telemetria_bluetec400::clear_has_ed1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void t_telemetria_bluetec400::clear_ed1() {
  ed1_ = false;
  clear_has_ed1();
}
inline bool t_telemetria_bluetec400::ed1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed1)
  return ed1_;
}
inline void t_telemetria_bluetec400::set_ed1(bool value) {
  set_has_ed1();
  ed1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed1)
}

// optional bool ed2 = 8;
inline bool t_telemetria_bluetec400::has_ed2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void t_telemetria_bluetec400::clear_has_ed2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void t_telemetria_bluetec400::clear_ed2() {
  ed2_ = false;
  clear_has_ed2();
}
inline bool t_telemetria_bluetec400::ed2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed2)
  return ed2_;
}
inline void t_telemetria_bluetec400::set_ed2(bool value) {
  set_has_ed2();
  ed2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed2)
}

// optional bool ed3 = 9;
inline bool t_telemetria_bluetec400::has_ed3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void t_telemetria_bluetec400::clear_has_ed3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void t_telemetria_bluetec400::clear_ed3() {
  ed3_ = false;
  clear_has_ed3();
}
inline bool t_telemetria_bluetec400::ed3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed3)
  return ed3_;
}
inline void t_telemetria_bluetec400::set_ed3(bool value) {
  set_has_ed3();
  ed3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed3)
}

// optional bool ed4 = 10;
inline bool t_telemetria_bluetec400::has_ed4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void t_telemetria_bluetec400::clear_has_ed4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void t_telemetria_bluetec400::clear_ed4() {
  ed4_ = false;
  clear_has_ed4();
}
inline bool t_telemetria_bluetec400::ed4() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed4)
  return ed4_;
}
inline void t_telemetria_bluetec400::set_ed4(bool value) {
  set_has_ed4();
  ed4_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed4)
}

// optional bool ed5 = 11;
inline bool t_telemetria_bluetec400::has_ed5() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed5() {
  _has_bits_[0] |= 0x00000400u;
}
inline void t_telemetria_bluetec400::clear_has_ed5() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void t_telemetria_bluetec400::clear_ed5() {
  ed5_ = false;
  clear_has_ed5();
}
inline bool t_telemetria_bluetec400::ed5() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed5)
  return ed5_;
}
inline void t_telemetria_bluetec400::set_ed5(bool value) {
  set_has_ed5();
  ed5_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed5)
}

// optional bool ed6 = 12;
inline bool t_telemetria_bluetec400::has_ed6() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed6() {
  _has_bits_[0] |= 0x00000800u;
}
inline void t_telemetria_bluetec400::clear_has_ed6() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void t_telemetria_bluetec400::clear_ed6() {
  ed6_ = false;
  clear_has_ed6();
}
inline bool t_telemetria_bluetec400::ed6() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed6)
  return ed6_;
}
inline void t_telemetria_bluetec400::set_ed6(bool value) {
  set_has_ed6();
  ed6_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed6)
}

// optional bool ed7 = 13;
inline bool t_telemetria_bluetec400::has_ed7() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed7() {
  _has_bits_[0] |= 0x00001000u;
}
inline void t_telemetria_bluetec400::clear_has_ed7() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void t_telemetria_bluetec400::clear_ed7() {
  ed7_ = false;
  clear_has_ed7();
}
inline bool t_telemetria_bluetec400::ed7() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed7)
  return ed7_;
}
inline void t_telemetria_bluetec400::set_ed7(bool value) {
  set_has_ed7();
  ed7_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed7)
}

// optional bool ed8 = 14;
inline bool t_telemetria_bluetec400::has_ed8() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_ed8() {
  _has_bits_[0] |= 0x00002000u;
}
inline void t_telemetria_bluetec400::clear_has_ed8() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void t_telemetria_bluetec400::clear_ed8() {
  ed8_ = false;
  clear_has_ed8();
}
inline bool t_telemetria_bluetec400::ed8() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed8)
  return ed8_;
}
inline void t_telemetria_bluetec400::set_ed8(bool value) {
  set_has_ed8();
  ed8_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed8)
}

// optional double acelx = 15;
inline bool t_telemetria_bluetec400::has_acelx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_acelx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void t_telemetria_bluetec400::clear_has_acelx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void t_telemetria_bluetec400::clear_acelx() {
  acelx_ = 0;
  clear_has_acelx();
}
inline double t_telemetria_bluetec400::acelx() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.acelx)
  return acelx_;
}
inline void t_telemetria_bluetec400::set_acelx(double value) {
  set_has_acelx();
  acelx_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.acelx)
}

// optional double acely = 16;
inline bool t_telemetria_bluetec400::has_acely() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_acely() {
  _has_bits_[0] |= 0x00008000u;
}
inline void t_telemetria_bluetec400::clear_has_acely() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void t_telemetria_bluetec400::clear_acely() {
  acely_ = 0;
  clear_has_acely();
}
inline double t_telemetria_bluetec400::acely() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.acely)
  return acely_;
}
inline void t_telemetria_bluetec400::set_acely(double value) {
  set_has_acely();
  acely_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.acely)
}

// optional int32 an1 = 17;
inline bool t_telemetria_bluetec400::has_an1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_an1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void t_telemetria_bluetec400::clear_has_an1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void t_telemetria_bluetec400::clear_an1() {
  an1_ = 0;
  clear_has_an1();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::an1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an1)
  return an1_;
}
inline void t_telemetria_bluetec400::set_an1(::google::protobuf::int32 value) {
  set_has_an1();
  an1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an1)
}

// optional int32 an2 = 18;
inline bool t_telemetria_bluetec400::has_an2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_an2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void t_telemetria_bluetec400::clear_has_an2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void t_telemetria_bluetec400::clear_an2() {
  an2_ = 0;
  clear_has_an2();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::an2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an2)
  return an2_;
}
inline void t_telemetria_bluetec400::set_an2(::google::protobuf::int32 value) {
  set_has_an2();
  an2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an2)
}

// optional int32 an3 = 19;
inline bool t_telemetria_bluetec400::has_an3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_an3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void t_telemetria_bluetec400::clear_has_an3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void t_telemetria_bluetec400::clear_an3() {
  an3_ = 0;
  clear_has_an3();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::an3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an3)
  return an3_;
}
inline void t_telemetria_bluetec400::set_an3(::google::protobuf::int32 value) {
  set_has_an3();
  an3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an3)
}

// optional int32 an4 = 20;
inline bool t_telemetria_bluetec400::has_an4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_an4() {
  _has_bits_[0] |= 0x00080000u;
}
inline void t_telemetria_bluetec400::clear_has_an4() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void t_telemetria_bluetec400::clear_an4() {
  an4_ = 0;
  clear_has_an4();
}
inline ::google::protobuf::int32 t_telemetria_bluetec400::an4() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an4)
  return an4_;
}
inline void t_telemetria_bluetec400::set_an4(::google::protobuf::int32 value) {
  set_has_an4();
  an4_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an4)
}

// optional bytes operacao = 21;
inline bool t_telemetria_bluetec400::has_operacao() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void t_telemetria_bluetec400::set_has_operacao() {
  _has_bits_[0] |= 0x00100000u;
}
inline void t_telemetria_bluetec400::clear_has_operacao() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void t_telemetria_bluetec400::clear_operacao() {
  operacao_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operacao();
}
inline const ::std::string& t_telemetria_bluetec400::operacao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.operacao)
  return operacao_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void t_telemetria_bluetec400::set_operacao(const ::std::string& value) {
  set_has_operacao();
  operacao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.operacao)
}
inline void t_telemetria_bluetec400::set_operacao(const char* value) {
  set_has_operacao();
  operacao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacote_posicao.t_telemetria_bluetec400.operacao)
}
inline void t_telemetria_bluetec400::set_operacao(const void* value, size_t size) {
  set_has_operacao();
  operacao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacote_posicao.t_telemetria_bluetec400.operacao)
}
inline ::std::string* t_telemetria_bluetec400::mutable_operacao() {
  set_has_operacao();
  // @@protoc_insertion_point(field_mutable:pacote_posicao.t_telemetria_bluetec400.operacao)
  return operacao_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* t_telemetria_bluetec400::release_operacao() {
  clear_has_operacao();
  return operacao_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void t_telemetria_bluetec400::set_allocated_operacao(::std::string* operacao) {
  if (operacao != NULL) {
    set_has_operacao();
  } else {
    clear_has_operacao();
  }
  operacao_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operacao);
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.t_telemetria_bluetec400.operacao)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pacote_posicao

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bluetec400_2eproto__INCLUDED
