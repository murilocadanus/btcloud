// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pacote_posicao.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entities/pacote_posicao.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pacote_posicao {

namespace {

const ::google::protobuf::Descriptor* pacote_enriquecido_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pacote_enriquecido_reflection_ = NULL;
const ::google::protobuf::Descriptor* campo_macro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  campo_macro_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_teclado_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_teclado_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_evento_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_evento_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_evento_carga_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_evento_carga_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_delta_telemetria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_delta_telemetria_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_evento_telemetria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_evento_telemetria_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_flags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_flags_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_contrato_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_contrato_reflection_ = NULL;
const ::google::protobuf::Descriptor* equip_posicao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equip_posicao_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_flags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_flags_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_csq_rot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_csq_rot_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_sai_cfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_sai_cfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_odo_vel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_odo_vel_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_ent_gpsi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_ent_gpsi_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_inf_mot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_inf_mot_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_horimetro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_horimetro_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_telemetria_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_telemetria_reflection_ = NULL;
const ::google::protobuf::Descriptor* t32_flg_tm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t32_flg_tm_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* dispositivo_id_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* evento_id_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* teclado_id_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pacote_5fposicao_2eproto() {
  protobuf_AddDesc_pacote_5fposicao_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pacote_posicao.proto");
  GOOGLE_CHECK(file != NULL);
  pacote_enriquecido_descriptor_ = file->message_type(0);
  static const int pacote_enriquecido_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, ec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, ep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, texto_livre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, teclado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, evento_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, evento_carga_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, delta_telemetria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, evento_telemetria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, dump_debug_),
  };
  pacote_enriquecido_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      pacote_enriquecido_descriptor_,
      pacote_enriquecido::default_instance_,
      pacote_enriquecido_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, _has_bits_[0]),
      -1,
      -1,
      sizeof(pacote_enriquecido),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pacote_enriquecido, _internal_metadata_),
      -1);
  campo_macro_descriptor_ = file->message_type(1);
  static const int campo_macro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campo_macro, numero_campo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campo_macro, valor_),
  };
  campo_macro_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      campo_macro_descriptor_,
      campo_macro::default_instance_,
      campo_macro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campo_macro, _has_bits_[0]),
      -1,
      -1,
      sizeof(campo_macro),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(campo_macro, _internal_metadata_),
      -1);
  equip_teclado_descriptor_ = file->message_type(2);
  static const int equip_teclado_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, tipo_teclado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, id_conf_leitura_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, id_macro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, nome_macro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, id_tecla_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, id_msg_ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, campo_),
  };
  equip_teclado_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_teclado_descriptor_,
      equip_teclado::default_instance_,
      equip_teclado_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_teclado),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_teclado, _internal_metadata_),
      -1);
  equip_evento_descriptor_ = file->message_type(3);
  static const int equip_evento_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento, dispositivo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento, evento_),
  };
  equip_evento_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_evento_descriptor_,
      equip_evento::default_instance_,
      equip_evento_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_evento),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento, _internal_metadata_),
      -1);
  equip_evento_carga_descriptor_ = file->message_type(4);
  static const int equip_evento_carga_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_carga, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_carga, entradas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_carga, saidas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_carga, tempo_),
  };
  equip_evento_carga_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_evento_carga_descriptor_,
      equip_evento_carga::default_instance_,
      equip_evento_carga_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_carga, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_evento_carga),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_carga, _internal_metadata_),
      -1);
  equip_delta_telemetria_descriptor_ = file->message_type(5);
  static const int equip_delta_telemetria_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, versao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_fx_azul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, tipo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_fx_vermelho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, vel_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_fx_amarelo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, vel_media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_odometro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_intervalo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_motor_giro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_fx_verde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_movimento_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, dt_parado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, rpm_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, rpm_med_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, tmp_freio_motor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, uso_embreagem_km_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, uso_freio_km_),
  };
  equip_delta_telemetria_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_delta_telemetria_descriptor_,
      equip_delta_telemetria::default_instance_,
      equip_delta_telemetria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_delta_telemetria),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_delta_telemetria, _internal_metadata_),
      -1);
  equip_evento_telemetria_descriptor_ = file->message_type(6);
  static const int equip_evento_telemetria_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, identificador_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_fx_azul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_fx_amarela_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_fx_verde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_fx_vermelha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_motor_ligado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_vei_parado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_vei_movimento_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_vel_kmhr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, hori_distancia_100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_psi_oleo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_embreagem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_freio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_limpador_parabrisa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_cx_marcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_freio_motor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_saida_fet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_a1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_a2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_a3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_id_evento_percurso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, es_pct_evento_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_max_alcancada_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_rot_maxima_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_embre_kmrodado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_freio_kmrodado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_tempo_freiomotor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_lib_embre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_rot_embre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_tempo_duracao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_referencia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_inicial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_final_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_vel_max_evento_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_temp_max_01v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_tensao_01v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, ev_rot_permitido_),
  };
  equip_evento_telemetria_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_evento_telemetria_descriptor_,
      equip_evento_telemetria::default_instance_,
      equip_evento_telemetria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_evento_telemetria),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_evento_telemetria, _internal_metadata_),
      -1);
  equip_flags_descriptor_ = file->message_type(7);
  static const int equip_flags_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, bloqueio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, alerta_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, somente_posicao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, entrada_ponto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, saida_ponto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, alerta_bat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, pad1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, periferico_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, cod_periferico_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, pad2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, viagem_aberta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, viagem_fechada_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, fuga_cerca_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, ponto_de_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, ignicao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, tem_mensagem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, anti_theft_),
  };
  equip_flags_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_flags_descriptor_,
      equip_flags::default_instance_,
      equip_flags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_flags),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_flags, _internal_metadata_),
      -1);
  equip_contrato_descriptor_ = file->message_type(8);
  static const int equip_contrato_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, esn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, clioid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, gerenciadora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, connumero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, veioid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, tipo_contrato_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, classe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, protocolo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, porta_panico_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, porta_bloqueio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, is_sasgc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, tipo_veiculo_),
  };
  equip_contrato_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_contrato_descriptor_,
      equip_contrato::default_instance_,
      equip_contrato_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_contrato),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_contrato, _internal_metadata_),
      -1);
  equip_posicao_descriptor_ = file->message_type(9);
  static const int equip_posicao_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, datahora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, datachegada_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, entrada_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, saida_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, lat2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, long2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, odo_vel_gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, id_ponto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, csq_id_rota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, saida_cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, entrada_gps_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, indice_posicao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, gps_altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, inf_motorista_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, info_horimetro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, tmp_ult_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, ad1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, ad2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, ad3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, ad4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, estado_seguranca_saidas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, estado_seguranca_entradas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, vcc_alim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, id_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, info_telemetria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, tipo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, origem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, ponto_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, dist_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, ang_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, rota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, operacao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, eventoflag_),
  };
  equip_posicao_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      equip_posicao_descriptor_,
      equip_posicao::default_instance_,
      equip_posicao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, _has_bits_[0]),
      -1,
      -1,
      sizeof(equip_posicao),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equip_posicao, _internal_metadata_),
      -1);
  t32_flags_descriptor_ = file->message_type(10);
  static const int t32_flags_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, alt_setup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, pos_memoria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, gps_valido_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, gps_falha_ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, gps_dr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, vel_excedida_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, exc_tmp_parado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, baixo_consumo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, cfc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, tipo_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, chamada_voz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, satelital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, operacao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, forcar_gprs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, sleep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, urb_rodov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, acoes_emb_cliente_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, analise_ponto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, analise_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, analise_cerca_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, alarme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, acao_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, ancora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, ad2_filter_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, ad3_filter_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, ad4_filter_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, firmware_stored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, jamming_),
  };
  t32_flags_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_flags_descriptor_,
      t32_flags::default_instance_,
      t32_flags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_flags),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flags, _internal_metadata_),
      -1);
  t32_csq_rot_descriptor_ = file->message_type(11);
  static const int t32_csq_rot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_csq_rot, csq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_csq_rot, id_rota_),
  };
  t32_csq_rot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_csq_rot_descriptor_,
      t32_csq_rot::default_instance_,
      t32_csq_rot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_csq_rot, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_csq_rot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_csq_rot, _internal_metadata_),
      -1);
  t32_sai_cfg_descriptor_ = file->message_type(12);
  static const int t32_sai_cfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_sai_cfg, saidas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_sai_cfg, cargas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_sai_cfg, curtos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_sai_cfg, tempos_),
  };
  t32_sai_cfg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_sai_cfg_descriptor_,
      t32_sai_cfg::default_instance_,
      t32_sai_cfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_sai_cfg, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_sai_cfg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_sai_cfg, _internal_metadata_),
      -1);
  t32_odo_vel_descriptor_ = file->message_type(13);
  static const int t32_odo_vel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_odo_vel, odometro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_odo_vel, velocidade_),
  };
  t32_odo_vel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_odo_vel_descriptor_,
      t32_odo_vel::default_instance_,
      t32_odo_vel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_odo_vel, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_odo_vel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_odo_vel, _internal_metadata_),
      -1);
  t32_ent_gpsi_descriptor_ = file->message_type(14);
  static const int t32_ent_gpsi_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent01ad1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent02ad2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent03ad3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent04ad4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent05gnd1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent06gnd2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent07gnd3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent08vcc1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, ent09pan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv04_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv05_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv06_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, gps_reserv07_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, svn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, hdop_),
  };
  t32_ent_gpsi_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_ent_gpsi_descriptor_,
      t32_ent_gpsi::default_instance_,
      t32_ent_gpsi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_ent_gpsi),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_ent_gpsi, _internal_metadata_),
      -1);
  t32_inf_mot_descriptor_ = file->message_type(15);
  static const int t32_inf_mot_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, id_motorista_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, est_bat_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, est_bat_ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, est_alim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, ad1range_),
  };
  t32_inf_mot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_inf_mot_descriptor_,
      t32_inf_mot::default_instance_,
      t32_inf_mot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_inf_mot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_inf_mot, _internal_metadata_),
      -1);
  t32_horimetro_descriptor_ = file->message_type(16);
  static const int t32_horimetro_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, horimetro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, pre_td_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, pre_img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, pre_ev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, pre_telem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, pre_delta_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, pre_ev_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, hor_reserv03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, hor_reserv04_),
  };
  t32_horimetro_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_horimetro_descriptor_,
      t32_horimetro::default_instance_,
      t32_horimetro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_horimetro),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_horimetro, _internal_metadata_),
      -1);
  t_telemetria_descriptor_ = file->message_type(17);
  static const int t_telemetria_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, versao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, temp_motor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, nivel_combustivel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, num_sensores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_motor_giro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_fx_azul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_fx_amare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_fx_verde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_fx_verme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_movimento_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, ts_parado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, odometro_velocidade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, flags_telemetria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, tensao_alternador_pos_chave_),
  };
  t_telemetria_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t_telemetria_descriptor_,
      t_telemetria::default_instance_,
      t_telemetria_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, _has_bits_[0]),
      -1,
      -1,
      sizeof(t_telemetria),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria, _internal_metadata_),
      -1);
  t32_flg_tm_descriptor_ = file->message_type(18);
  static const int t32_flg_tm_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, falha_pressao_oleo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, exc_pe_embreagem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, limpador_ligado_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_caixa_marcha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_freio_motor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_saida_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, flag_banguela_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, ign_sem_giro_motor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, exc_marcha_lenta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, exc_velocidade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, exc_rotacao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, falha_tmp_liq_arref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, tensao_alternador_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, motor_funcionando_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_freio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_embreagem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_pressao_oleo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, est_limpador_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, id_delta_cfg_),
  };
  t32_flg_tm_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t32_flg_tm_descriptor_,
      t32_flg_tm::default_instance_,
      t32_flg_tm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, _has_bits_[0]),
      -1,
      -1,
      sizeof(t32_flg_tm),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t32_flg_tm, _internal_metadata_),
      -1);
  dispositivo_id_descriptor_ = file->enum_type(0);
  evento_id_descriptor_ = file->enum_type(1);
  teclado_id_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pacote_5fposicao_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      pacote_enriquecido_descriptor_, &pacote_enriquecido::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      campo_macro_descriptor_, &campo_macro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_teclado_descriptor_, &equip_teclado::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_evento_descriptor_, &equip_evento::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_evento_carga_descriptor_, &equip_evento_carga::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_delta_telemetria_descriptor_, &equip_delta_telemetria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_evento_telemetria_descriptor_, &equip_evento_telemetria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_flags_descriptor_, &equip_flags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_contrato_descriptor_, &equip_contrato::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      equip_posicao_descriptor_, &equip_posicao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_flags_descriptor_, &t32_flags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_csq_rot_descriptor_, &t32_csq_rot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_sai_cfg_descriptor_, &t32_sai_cfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_odo_vel_descriptor_, &t32_odo_vel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_ent_gpsi_descriptor_, &t32_ent_gpsi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_inf_mot_descriptor_, &t32_inf_mot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_horimetro_descriptor_, &t32_horimetro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t_telemetria_descriptor_, &t_telemetria::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t32_flg_tm_descriptor_, &t32_flg_tm::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pacote_5fposicao_2eproto() {
  delete pacote_enriquecido::default_instance_;
  delete pacote_enriquecido_reflection_;
  delete campo_macro::default_instance_;
  delete campo_macro_reflection_;
  delete equip_teclado::default_instance_;
  delete equip_teclado_reflection_;
  delete equip_evento::default_instance_;
  delete equip_evento_reflection_;
  delete equip_evento_carga::default_instance_;
  delete equip_evento_carga_reflection_;
  delete equip_delta_telemetria::default_instance_;
  delete equip_delta_telemetria_reflection_;
  delete equip_evento_telemetria::default_instance_;
  delete equip_evento_telemetria_reflection_;
  delete equip_flags::default_instance_;
  delete equip_flags_reflection_;
  delete equip_contrato::default_instance_;
  delete equip_contrato_reflection_;
  delete equip_posicao::default_instance_;
  delete equip_posicao_reflection_;
  delete t32_flags::default_instance_;
  delete t32_flags_reflection_;
  delete t32_csq_rot::default_instance_;
  delete t32_csq_rot_reflection_;
  delete t32_sai_cfg::default_instance_;
  delete t32_sai_cfg_reflection_;
  delete t32_odo_vel::default_instance_;
  delete t32_odo_vel_reflection_;
  delete t32_ent_gpsi::default_instance_;
  delete t32_ent_gpsi_reflection_;
  delete t32_inf_mot::default_instance_;
  delete t32_inf_mot_reflection_;
  delete t32_horimetro::default_instance_;
  delete t32_horimetro_reflection_;
  delete t_telemetria::default_instance_;
  delete t_telemetria_reflection_;
  delete t32_flg_tm::default_instance_;
  delete t32_flg_tm_reflection_;
}

void protobuf_AddDesc_pacote_5fposicao_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024pacote_posicao.proto\022\016pacote_posicao\"\262"
    "\003\n\022pacote_enriquecido\022*\n\002ec\030\001 \001(\0132\036.paco"
    "te_posicao.equip_contrato\022)\n\002ep\030\002 \001(\0132\035."
    "pacote_posicao.equip_posicao\022\023\n\013texto_li"
    "vre\030\003 \001(\t\022.\n\007teclado\030\004 \001(\0132\035.pacote_posi"
    "cao.equip_teclado\022,\n\006evento\030\005 \003(\0132\034.paco"
    "te_posicao.equip_evento\0228\n\014evento_carga\030"
    "\006 \003(\0132\".pacote_posicao.equip_evento_carg"
    "a\022@\n\020delta_telemetria\030\007 \001(\0132&.pacote_pos"
    "icao.equip_delta_telemetria\022B\n\021evento_te"
    "lemetria\030\010 \003(\0132\'.pacote_posicao.equip_ev"
    "ento_telemetria\022\022\n\ndump_debug\030\t \001(\t\"2\n\013c"
    "ampo_macro\022\024\n\014numero_campo\030\001 \002(\005\022\r\n\005valo"
    "r\030\002 \001(\014\"\266\001\n\requip_teclado\022\024\n\014tipo_teclad"
    "o\030\001 \002(\005\022\027\n\017id_conf_leitura\030\002 \001(\005\022\020\n\010id_m"
    "acro\030\003 \001(\005\022\022\n\nnome_macro\030\004 \001(\t\022\020\n\010id_tec"
    "la\030\005 \001(\005\022\022\n\nid_msg_ret\030\006 \001(\005\022*\n\005campo\030\007 "
    "\003(\0132\033.pacote_posicao.campo_macro\"3\n\014equi"
    "p_evento\022\023\n\013dispositivo\030\001 \002(\005\022\016\n\006evento\030"
    "\002 \002(\005\"Q\n\022equip_evento_carga\022\n\n\002id\030\001 \002(\005\022"
    "\020\n\010entradas\030\002 \001(\005\022\016\n\006saidas\030\003 \001(\005\022\r\n\005tem"
    "po\030\004 \002(\005\"\210\003\n\026equip_delta_telemetria\022\016\n\006v"
    "ersao\030\001 \002(\005\022\022\n\ndt_fx_azul\030\002 \002(\005\022\014\n\004tipo\030"
    "\003 \002(\005\022\026\n\016dt_fx_vermelho\030\004 \002(\005\022\017\n\007vel_max"
    "\030\005 \002(\005\022\025\n\rdt_fx_amarelo\030\006 \002(\005\022\021\n\tvel_med"
    "ia\030\007 \002(\005\022\023\n\013dt_odometro\030\010 \002(\005\022\024\n\014dt_inte"
    "rvalo\030\t \002(\005\022\025\n\rdt_motor_giro\030\n \001(\005\022\023\n\013dt"
    "_fx_verde\030\013 \002(\005\022\024\n\014dt_movimento\030\014 \002(\005\022\021\n"
    "\tdt_parado\030\r \002(\005\022\017\n\007rpm_max\030\016 \002(\005\022\017\n\007rpm"
    "_med\030\017 \002(\005\022\027\n\017tmp_freio_motor\030\020 \002(\005\022\030\n\020u"
    "so_embreagem_km\030\021 \002(\005\022\024\n\014uso_freio_km\030\022 "
    "\002(\005\"\254\007\n\027equip_evento_telemetria\022\025\n\rident"
    "ificador\030\001 \002(\005\022\024\n\014hori_fx_azul\030\002 \001(\005\022\027\n\017"
    "hori_fx_amarela\030\003 \001(\005\022\025\n\rhori_fx_verde\030\004"
    " \001(\005\022\030\n\020hori_fx_vermelha\030\005 \001(\005\022\031\n\021hori_m"
    "otor_ligado\030\006 \001(\005\022\027\n\017hori_vei_parado\030\007 \001"
    "(\005\022\032\n\022hori_vei_movimento\030\010 \001(\005\022\025\n\rhori_v"
    "el_kmhr\030\t \001(\005\022\032\n\022hori_distancia_100\030\n \001("
    "\005\022\023\n\013es_psi_oleo\030\013 \001(\005\022\024\n\014es_embreagem\030\014"
    " \001(\005\022\020\n\010es_freio\030\r \001(\005\022\035\n\025es_limpador_pa"
    "rabrisa\030\016 \001(\005\022\024\n\014es_cx_marcha\030\017 \001(\005\022\026\n\016e"
    "s_freio_motor\030\020 \001(\005\022\024\n\014es_saida_fet\030\021 \001("
    "\005\022\r\n\005es_a1\030\022 \001(\005\022\r\n\005es_a2\030\023 \001(\005\022\r\n\005es_a3"
    "\030\024 \001(\005\022\035\n\025es_id_evento_percurso\030\025 \001(\005\022\025\n"
    "\res_pct_evento\030\026 \001(\005\022\034\n\024ev_vel_max_alcan"
    "cada\030\027 \001(\005\022\024\n\014ev_vel_media\030\030 \001(\005\022\025\n\rev_r"
    "ot_maxima\030\031 \001(\005\022\031\n\021ev_embre_kmrodado\030\032 \001"
    "(\005\022\031\n\021ev_freio_kmrodado\030\033 \001(\005\022\033\n\023ev_temp"
    "o_freiomotor\030\034 \001(\005\022\030\n\020ev_vel_lib_embre\030\035"
    " \001(\005\022\024\n\014ev_rot_embre\030\036 \001(\005\022\030\n\020ev_tempo_d"
    "uracao\030\037 \001(\005\022\031\n\021ev_vel_referencia\030  \001(\005\022"
    "\026\n\016ev_vel_inicial\030! \001(\005\022\024\n\014ev_vel_final\030"
    "\" \001(\005\022\031\n\021ev_vel_max_evento\030# \001(\005\022\027\n\017ev_t"
    "emp_max_01v\030$ \001(\005\022\025\n\rev_tensao_01v\030% \001(\005"
    "\022\030\n\020ev_rot_permitido\030& \001(\005\"\350\002\n\013equip_fla"
    "gs\022\020\n\010bloqueio\030\001 \001(\005\022\022\n\nalerta_int\030\002 \001(\005"
    "\022\027\n\017somente_posicao\030\003 \001(\005\022\025\n\rentrada_pon"
    "to\030\004 \001(\005\022\023\n\013saida_ponto\030\005 \001(\005\022\022\n\nalerta_"
    "bat\030\006 \001(\005\022\014\n\004pad1\030\007 \001(\005\022\022\n\nperiferico\030\010 "
    "\001(\005\022\026\n\016cod_periferico\030\t \001(\005\022\014\n\004pad2\030\n \001("
    "\005\022\025\n\rviagem_aberta\030\013 \001(\005\022\026\n\016viagem_fecha"
    "da\030\014 \001(\005\022\022\n\nfuga_cerca\030\r \001(\005\022\024\n\014ponto_de"
    "_ref\030\016 \001(\005\022\017\n\007ignicao\030\017 \001(\005\022\024\n\014tem_mensa"
    "gem\030\020 \001(\005\022\022\n\nanti_theft\030\021 \001(\005\"\222\002\n\016equip_"
    "contrato\022\013\n\003esn\030\001 \001(\003\022\016\n\006clioid\030\002 \001(\005\022\024\n"
    "\014gerenciadora\030\003 \003(\005\022\021\n\tconnumero\030\004 \001(\005\022\016"
    "\n\006veioid\030\005 \001(\005\022\025\n\rtipo_contrato\030\006 \001(\005\022\016\n"
    "\006classe\030\007 \001(\005\022\021\n\tprotocolo\030\010 \001(\005\022\016\n\006seri"
    "al\030\t \001(\005\022\024\n\014porta_panico\030\n \001(\005\022\026\n\016porta_"
    "bloqueio\030\013 \001(\005\022\n\n\002id\030\014 \001(\005\022\020\n\010is_sasgc\030\r"
    " \001(\005\022\024\n\014tipo_veiculo\030\016 \001(\005\"\240\007\n\requip_pos"
    "icao\022\020\n\010datahora\030\001 \001(\005\022\023\n\013datachegada\030\002 "
    "\001(\005\022\017\n\007entrada\030\003 \003(\005\022\r\n\005saida\030\004 \003(\005\022\014\n\004l"
    "at2\030\005 \001(\001\022\r\n\005long2\030\006 \001(\001\0220\n\013odo_vel_gps\030"
    "\007 \001(\0132\033.pacote_posicao.t32_odo_vel\022\020\n\010id"
    "_ponto\030\010 \001(\005\022(\n\005flags\030\t \001(\0132\031.pacote_pos"
    "icao.t32_flags\0220\n\013csq_id_rota\030\n \001(\0132\033.pa"
    "cote_posicao.t32_csq_rot\022.\n\tsaida_cfg\030\013 "
    "\001(\0132\033.pacote_posicao.t32_sai_cfg\0226\n\020entr"
    "ada_gps_info\030\014 \001(\0132\034.pacote_posicao.t32_"
    "ent_gpsi\022\026\n\016indice_posicao\030\r \001(\005\022\024\n\014gps_"
    "altitude\030\016 \001(\005\0222\n\rinf_motorista\030\017 \001(\0132\033."
    "pacote_posicao.t32_inf_mot\0225\n\016info_horim"
    "etro\030\020 \001(\0132\035.pacote_posicao.t32_horimetr"
    "o\022\023\n\013tmp_ult_val\030\021 \001(\005\022\013\n\003ad1\030\022 \001(\005\022\013\n\003a"
    "d2\030\023 \001(\005\022\013\n\003ad3\030\024 \001(\005\022\013\n\003ad4\030\025 \001(\005\022\037\n\027es"
    "tado_seguranca_saidas\030\026 \001(\005\022!\n\031estado_se"
    "guranca_entradas\030\027 \001(\005\022\020\n\010vcc_alim\030\030 \001(\005"
    "\022\017\n\007id_area\030\031 \001(\005\0225\n\017info_telemetria\030\032 \001"
    "(\0132\034.pacote_posicao.t_telemetria\022\014\n\004tipo"
    "\030\033 \001(\005\022\016\n\006origem\030\034 \001(\005\022\021\n\tponto_ref\030\035 \003("
    "\005\022\020\n\010dist_ref\030\036 \003(\005\022\017\n\007ang_ref\030\037 \003(\005\022\014\n\004"
    "rota\030  \003(\005\022\020\n\010operacao\030! \003(\005\022/\n\neventofl"
    "ag\030\" \001(\0132\033.pacote_posicao.equip_flags\"\323\004"
    "\n\tt32_flags\022\021\n\talt_setup\030\001 \001(\005\022\023\n\013pos_me"
    "moria\030\002 \001(\005\022\022\n\ngps_valido\030\003 \001(\005\022\025\n\rgps_f"
    "alha_ant\030\004 \001(\005\022\016\n\006gps_dr\030\005 \001(\005\022\024\n\014vel_ex"
    "cedida\030\006 \001(\005\022\026\n\016exc_tmp_parado\030\007 \001(\005\022\025\n\r"
    "baixo_consumo\030\010 \001(\005\022\013\n\003cfc\030\t \001(\005\022\022\n\ntipo"
    "_login\030\n \001(\005\022\023\n\013chamada_voz\030\013 \001(\005\022\021\n\tsat"
    "elital\030\014 \001(\005\022\020\n\010operacao\030\r \001(\005\022\023\n\013forcar"
    "_gprs\030\016 \001(\005\022\r\n\005sleep\030\017 \001(\005\022\021\n\turb_rodov\030"
    "\020 \001(\005\022\031\n\021acoes_emb_cliente\030\021 \001(\005\022\025\n\ranal"
    "ise_ponto\030\022 \001(\005\022\024\n\014analise_area\030\023 \001(\005\022\025\n"
    "\ranalise_cerca\030\024 \001(\005\022\016\n\006alarme\030\025 \001(\005\022\022\n\n"
    "acao_login\030\026 \001(\005\022\016\n\006ancora\030\027 \001(\005\022\031\n\021ad2_"
    "filter_enable\030\030 \001(\005\022\031\n\021ad3_filter_enable"
    "\030\031 \001(\005\022\031\n\021ad4_filter_enable\030\032 \001(\005\022\027\n\017fir"
    "mware_stored\030\033 \001(\005\022\017\n\007jamming\030\034 \001(\005\"+\n\013t"
    "32_csq_rot\022\013\n\003csq\030\001 \001(\005\022\017\n\007id_rota\030\002 \001(\005"
    "\"M\n\013t32_sai_cfg\022\016\n\006saidas\030\001 \001(\005\022\016\n\006carga"
    "s\030\002 \001(\005\022\016\n\006curtos\030\003 \001(\005\022\016\n\006tempos\030\004 \001(\005\""
    "3\n\013t32_odo_vel\022\020\n\010odometro\030\001 \001(\005\022\022\n\nvelo"
    "cidade\030\002 \001(\005\"\366\002\n\014t32_ent_gpsi\022\020\n\010ent01ad"
    "1\030\001 \001(\005\022\020\n\010ent02ad2\030\002 \001(\005\022\020\n\010ent03ad3\030\003 "
    "\001(\005\022\020\n\010ent04ad4\030\004 \001(\005\022\021\n\tent05gnd1\030\005 \001(\005"
    "\022\021\n\tent06gnd2\030\006 \001(\005\022\021\n\tent07gnd3\030\007 \001(\005\022\021"
    "\n\tent08vcc1\030\010 \001(\005\022\020\n\010ent09pan\030\t \001(\005\022\024\n\014g"
    "ps_reserv01\030\n \001(\005\022\024\n\014gps_reserv02\030\013 \001(\005\022"
    "\024\n\014gps_reserv03\030\014 \001(\005\022\024\n\014gps_reserv04\030\r "
    "\001(\005\022\024\n\014gps_reserv05\030\016 \001(\005\022\024\n\014gps_reserv0"
    "6\030\017 \001(\005\022\024\n\014gps_reserv07\030\020 \001(\005\022\013\n\003dir\030\021 \001"
    "(\005\022\013\n\003svn\030\022 \001(\005\022\014\n\004hdop\030\023 \001(\005\"q\n\013t32_inf"
    "_mot\022\024\n\014id_motorista\030\001 \001(\005\022\023\n\013est_bat_in"
    "t\030\002 \001(\005\022\023\n\013est_bat_ext\030\003 \001(\005\022\020\n\010est_alim"
    "\030\004 \001(\005\022\020\n\010ad1range\030\005 \001(\005\"\273\001\n\rt32_horimet"
    "ro\022\021\n\thorimetro\030\001 \001(\005\022\016\n\006pre_td\030\002 \001(\005\022\017\n"
    "\007pre_img\030\003 \001(\005\022\016\n\006pre_ev\030\004 \001(\005\022\021\n\tpre_te"
    "lem\030\005 \001(\005\022\024\n\014pre_delta_tm\030\006 \001(\005\022\021\n\tpre_e"
    "v_tm\030\007 \001(\005\022\024\n\014hor_reserv03\030\010 \001(\005\022\024\n\014hor_"
    "reserv04\030\t \001(\005\"\230\003\n\014t_telemetria\022\016\n\006versa"
    "o\030\001 \001(\005\022\022\n\ntemp_motor\030\002 \001(\005\022\031\n\021nivel_com"
    "bustivel\030\003 \001(\005\022\024\n\014num_sensores\030\004 \001(\005\022\025\n\r"
    "ts_motor_giro\030\005 \001(\005\022\022\n\nts_fx_azul\030\006 \001(\005\022"
    "\023\n\013ts_fx_amare\030\007 \001(\005\022\023\n\013ts_fx_verde\030\010 \001("
    "\005\022\023\n\013ts_fx_verme\030\t \001(\005\022\024\n\014ts_movimento\030\n"
    " \001(\005\022\021\n\tts_parado\030\013 \001(\005\0228\n\023odometro_velo"
    "cidade\030\014 \001(\0132\033.pacote_posicao.t32_odo_ve"
    "l\0224\n\020flags_telemetria\030\r \001(\0132\032.pacote_pos"
    "icao.t32_flg_tm\022\013\n\003rpm\030\016 \001(\005\022#\n\033tensao_a"
    "lternador_pos_chave\030\017 \001(\005\"\357\003\n\nt32_flg_tm"
    "\022\032\n\022falha_pressao_oleo\030\001 \001(\005\022\030\n\020exc_pe_e"
    "mbreagem\030\002 \001(\005\022\027\n\017limpador_ligado\030\003 \001(\005\022"
    "\030\n\020est_caixa_marcha\030\004 \001(\005\022\027\n\017est_freio_m"
    "otor\030\005 \001(\005\022\021\n\test_saida\030\006 \001(\005\022\025\n\rflag_ba"
    "nguela\030\007 \001(\005\022\032\n\022ign_sem_giro_motor\030\010 \001(\005"
    "\022\030\n\020exc_marcha_lenta\030\t \001(\005\022\026\n\016exc_veloci"
    "dade\030\n \001(\005\022\023\n\013exc_rotacao\030\013 \001(\005\022\033\n\023falha"
    "_tmp_liq_arref\030\014 \001(\005\022\031\n\021tensao_alternado"
    "r\030\r \001(\005\022\031\n\021motor_funcionando\030\016 \001(\005\022\021\n\tes"
    "t_freio\030\017 \001(\005\022\025\n\rest_embreagem\030\020 \001(\005\022\030\n\020"
    "est_pressao_oleo\030\021 \001(\005\022\024\n\014est_limpador\030\022"
    " \001(\005\022\017\n\007padding\030\023 \001(\005\022\024\n\014id_delta_cfg\030\024 "
    "\001(\005*\263\003\n\016dispositivo_id\022\023\n\017DISP_SEM_EVENT"
    "O\020\000\022\017\n\013DISP_ALERTA\020\001\022\027\n\023DISP_ALERTA_BATE"
    "RIA\020\002\022\023\n\017DISP_ANTI_ROUBO\020\003\022\020\n\014DISP_BATER"
    "IA\020\004\022\024\n\020DISP_BATERIA_BKP\020\005\022\021\n\rDISP_BLOQU"
    "EIO\020\006\022\016\n\nDISP_CURSO\020\007\022\014\n\010DISP_GPS\020\010\022\014\n\010D"
    "ISP_GSM\020\t\022\020\n\014DISP_IGNICAO\020\n\022\023\n\017DISP_VEL_"
    "MAXIMA\020\013\022\017\n\013DISP_PANICO\020\014\022\021\n\rDISP_REBOCA"
    "DO\020\r\022\020\n\014DISP_REBOQUE\020\016\022\024\n\020DISP_REQ_POSIC"
    "AO\020\017\022\017\n\013DISP_SAIDAS\020\020\022\024\n\020DISP_MODO_ECONO"
    "M\020\021\022\020\n\014DISP_SISTEMA\020\022\022\021\n\rDISP_TEMPERAT\020\023"
    "\022\025\n\021DISP_RASTREAMENTO\020\024\022\020\n\014DISP_JAMMING\020"
    "\025*\344\002\n\tevento_id\022\025\n\021EVENTO_SEM_EVENTO\020\000\022\023"
    "\n\017EVENTO_ALTERADO\020\001\022\020\n\014EVENTO_CURTO\020\002\022\022\n"
    "\016EVENTO_DESBLOQ\020\003\022\020\n\014EVENTO_EMPTY\020\004\022\017\n\013E"
    "VENTO_GPRS\020\005\022\017\n\013EVENTO_HIGH\020\006\022\r\n\tEVENTO_"
    "IN\020\007\022\016\n\nEVENTO_LOW\020\010\022\021\n\rEVENTO_NORMAL\020\t\022"
    "\016\n\nEVENTO_OFF\020\n\022\r\n\tEVENTO_ON\020\013\022\016\n\nEVENTO"
    "_OUT\020\014\022\024\n\020EVENTO_SATELITAL\020\r\022\020\n\014EVENTO_S"
    "LEEP\020\016\022\023\n\017EVENTO_TEMPERAT\020\017\022\016\n\nEVENTO_US"
    "O\020\020\022\022\n\016EVENTO_VIOLADO\020\021\022\017\n\013EVENTO_ZERO\020\022"
    "*\271\001\n\nteclado_id\022\027\n\023TECLADO_TETROS_MAXI\020\000"
    "\022\020\n\014TECLADO_TD50\020\001\022\017\n\013TECLADO_AVL\020\002\022\020\n\014T"
    "ECLADO_TD40\020\003\022\030\n\024TECLADO_ALFANUMERICO\020\004\022"
    "\020\n\014TECLADO_TMCD\020\005\022\013\n\007TECLADO\020\006\022\020\n\014TECLAD"
    "O_TMS3\020\007\022\022\n\016TECLADO_SASMDT\020\010", 7108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pacote_posicao.proto", &protobuf_RegisterTypes);
  pacote_enriquecido::default_instance_ = new pacote_enriquecido();
  campo_macro::default_instance_ = new campo_macro();
  equip_teclado::default_instance_ = new equip_teclado();
  equip_evento::default_instance_ = new equip_evento();
  equip_evento_carga::default_instance_ = new equip_evento_carga();
  equip_delta_telemetria::default_instance_ = new equip_delta_telemetria();
  equip_evento_telemetria::default_instance_ = new equip_evento_telemetria();
  equip_flags::default_instance_ = new equip_flags();
  equip_contrato::default_instance_ = new equip_contrato();
  equip_posicao::default_instance_ = new equip_posicao();
  t32_flags::default_instance_ = new t32_flags();
  t32_csq_rot::default_instance_ = new t32_csq_rot();
  t32_sai_cfg::default_instance_ = new t32_sai_cfg();
  t32_odo_vel::default_instance_ = new t32_odo_vel();
  t32_ent_gpsi::default_instance_ = new t32_ent_gpsi();
  t32_inf_mot::default_instance_ = new t32_inf_mot();
  t32_horimetro::default_instance_ = new t32_horimetro();
  t_telemetria::default_instance_ = new t_telemetria();
  t32_flg_tm::default_instance_ = new t32_flg_tm();
  pacote_enriquecido::default_instance_->InitAsDefaultInstance();
  campo_macro::default_instance_->InitAsDefaultInstance();
  equip_teclado::default_instance_->InitAsDefaultInstance();
  equip_evento::default_instance_->InitAsDefaultInstance();
  equip_evento_carga::default_instance_->InitAsDefaultInstance();
  equip_delta_telemetria::default_instance_->InitAsDefaultInstance();
  equip_evento_telemetria::default_instance_->InitAsDefaultInstance();
  equip_flags::default_instance_->InitAsDefaultInstance();
  equip_contrato::default_instance_->InitAsDefaultInstance();
  equip_posicao::default_instance_->InitAsDefaultInstance();
  t32_flags::default_instance_->InitAsDefaultInstance();
  t32_csq_rot::default_instance_->InitAsDefaultInstance();
  t32_sai_cfg::default_instance_->InitAsDefaultInstance();
  t32_odo_vel::default_instance_->InitAsDefaultInstance();
  t32_ent_gpsi::default_instance_->InitAsDefaultInstance();
  t32_inf_mot::default_instance_->InitAsDefaultInstance();
  t32_horimetro::default_instance_->InitAsDefaultInstance();
  t_telemetria::default_instance_->InitAsDefaultInstance();
  t32_flg_tm::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pacote_5fposicao_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pacote_5fposicao_2eproto {
  StaticDescriptorInitializer_pacote_5fposicao_2eproto() {
    protobuf_AddDesc_pacote_5fposicao_2eproto();
  }
} static_descriptor_initializer_pacote_5fposicao_2eproto_;
const ::google::protobuf::EnumDescriptor* dispositivo_id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dispositivo_id_descriptor_;
}
bool dispositivo_id_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* evento_id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return evento_id_descriptor_;
}
bool evento_id_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* teclado_id_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return teclado_id_descriptor_;
}
bool teclado_id_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pacote_enriquecido::kEcFieldNumber;
const int pacote_enriquecido::kEpFieldNumber;
const int pacote_enriquecido::kTextoLivreFieldNumber;
const int pacote_enriquecido::kTecladoFieldNumber;
const int pacote_enriquecido::kEventoFieldNumber;
const int pacote_enriquecido::kEventoCargaFieldNumber;
const int pacote_enriquecido::kDeltaTelemetriaFieldNumber;
const int pacote_enriquecido::kEventoTelemetriaFieldNumber;
const int pacote_enriquecido::kDumpDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pacote_enriquecido::pacote_enriquecido()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.pacote_enriquecido)
}

void pacote_enriquecido::InitAsDefaultInstance() {
  ec_ = const_cast< ::pacote_posicao::equip_contrato*>(&::pacote_posicao::equip_contrato::default_instance());
  ep_ = const_cast< ::pacote_posicao::equip_posicao*>(&::pacote_posicao::equip_posicao::default_instance());
  teclado_ = const_cast< ::pacote_posicao::equip_teclado*>(&::pacote_posicao::equip_teclado::default_instance());
  delta_telemetria_ = const_cast< ::pacote_posicao::equip_delta_telemetria*>(&::pacote_posicao::equip_delta_telemetria::default_instance());
}

pacote_enriquecido::pacote_enriquecido(const pacote_enriquecido& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.pacote_enriquecido)
}

void pacote_enriquecido::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ec_ = NULL;
  ep_ = NULL;
  texto_livre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teclado_ = NULL;
  delta_telemetria_ = NULL;
  dump_debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pacote_enriquecido::~pacote_enriquecido() {
  // @@protoc_insertion_point(destructor:pacote_posicao.pacote_enriquecido)
  SharedDtor();
}

void pacote_enriquecido::SharedDtor() {
  texto_livre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete ec_;
    delete ep_;
    delete teclado_;
    delete delta_telemetria_;
  }
}

void pacote_enriquecido::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pacote_enriquecido::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pacote_enriquecido_descriptor_;
}

const pacote_enriquecido& pacote_enriquecido::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

pacote_enriquecido* pacote_enriquecido::default_instance_ = NULL;

pacote_enriquecido* pacote_enriquecido::New(::google::protobuf::Arena* arena) const {
  pacote_enriquecido* n = new pacote_enriquecido;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void pacote_enriquecido::Clear() {
  if (_has_bits_[0 / 32] & 79u) {
    if (has_ec()) {
      if (ec_ != NULL) ec_->::pacote_posicao::equip_contrato::Clear();
    }
    if (has_ep()) {
      if (ep_ != NULL) ep_->::pacote_posicao::equip_posicao::Clear();
    }
    if (has_texto_livre()) {
      texto_livre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_teclado()) {
      if (teclado_ != NULL) teclado_->::pacote_posicao::equip_teclado::Clear();
    }
    if (has_delta_telemetria()) {
      if (delta_telemetria_ != NULL) delta_telemetria_->::pacote_posicao::equip_delta_telemetria::Clear();
    }
  }
  if (has_dump_debug()) {
    dump_debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  evento_.Clear();
  evento_carga_.Clear();
  evento_telemetria_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool pacote_enriquecido::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.pacote_enriquecido)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pacote_posicao.equip_contrato ec = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ep;
        break;
      }

      // optional .pacote_posicao.equip_posicao ep = 2;
      case 2: {
        if (tag == 18) {
         parse_ep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_texto_livre;
        break;
      }

      // optional string texto_livre = 3;
      case 3: {
        if (tag == 26) {
         parse_texto_livre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texto_livre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texto_livre().data(), this->texto_livre().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pacote_posicao.pacote_enriquecido.texto_livre");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_teclado;
        break;
      }

      // optional .pacote_posicao.equip_teclado teclado = 4;
      case 4: {
        if (tag == 34) {
         parse_teclado:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teclado()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_evento;
        break;
      }

      // repeated .pacote_posicao.equip_evento evento = 5;
      case 5: {
        if (tag == 42) {
         parse_evento:
          DO_(input->IncrementRecursionDepth());
         parse_loop_evento:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_evento()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_evento;
        if (input->ExpectTag(50)) goto parse_loop_evento_carga;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pacote_posicao.equip_evento_carga evento_carga = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_evento_carga:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_evento_carga()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_evento_carga;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_delta_telemetria;
        break;
      }

      // optional .pacote_posicao.equip_delta_telemetria delta_telemetria = 7;
      case 7: {
        if (tag == 58) {
         parse_delta_telemetria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delta_telemetria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_evento_telemetria;
        break;
      }

      // repeated .pacote_posicao.equip_evento_telemetria evento_telemetria = 8;
      case 8: {
        if (tag == 66) {
         parse_evento_telemetria:
          DO_(input->IncrementRecursionDepth());
         parse_loop_evento_telemetria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_evento_telemetria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_evento_telemetria;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_dump_debug;
        break;
      }

      // optional string dump_debug = 9;
      case 9: {
        if (tag == 74) {
         parse_dump_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dump_debug().data(), this->dump_debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pacote_posicao.pacote_enriquecido.dump_debug");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.pacote_enriquecido)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.pacote_enriquecido)
  return false;
#undef DO_
}

void pacote_enriquecido::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.pacote_enriquecido)
  // optional .pacote_posicao.equip_contrato ec = 1;
  if (has_ec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ec_, output);
  }

  // optional .pacote_posicao.equip_posicao ep = 2;
  if (has_ep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ep_, output);
  }

  // optional string texto_livre = 3;
  if (has_texto_livre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texto_livre().data(), this->texto_livre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pacote_posicao.pacote_enriquecido.texto_livre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->texto_livre(), output);
  }

  // optional .pacote_posicao.equip_teclado teclado = 4;
  if (has_teclado()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->teclado_, output);
  }

  // repeated .pacote_posicao.equip_evento evento = 5;
  for (unsigned int i = 0, n = this->evento_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->evento(i), output);
  }

  // repeated .pacote_posicao.equip_evento_carga evento_carga = 6;
  for (unsigned int i = 0, n = this->evento_carga_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->evento_carga(i), output);
  }

  // optional .pacote_posicao.equip_delta_telemetria delta_telemetria = 7;
  if (has_delta_telemetria()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->delta_telemetria_, output);
  }

  // repeated .pacote_posicao.equip_evento_telemetria evento_telemetria = 8;
  for (unsigned int i = 0, n = this->evento_telemetria_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->evento_telemetria(i), output);
  }

  // optional string dump_debug = 9;
  if (has_dump_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_debug().data(), this->dump_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pacote_posicao.pacote_enriquecido.dump_debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dump_debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.pacote_enriquecido)
}

::google::protobuf::uint8* pacote_enriquecido::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.pacote_enriquecido)
  // optional .pacote_posicao.equip_contrato ec = 1;
  if (has_ec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->ec_, target);
  }

  // optional .pacote_posicao.equip_posicao ep = 2;
  if (has_ep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->ep_, target);
  }

  // optional string texto_livre = 3;
  if (has_texto_livre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texto_livre().data(), this->texto_livre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pacote_posicao.pacote_enriquecido.texto_livre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->texto_livre(), target);
  }

  // optional .pacote_posicao.equip_teclado teclado = 4;
  if (has_teclado()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->teclado_, target);
  }

  // repeated .pacote_posicao.equip_evento evento = 5;
  for (unsigned int i = 0, n = this->evento_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->evento(i), target);
  }

  // repeated .pacote_posicao.equip_evento_carga evento_carga = 6;
  for (unsigned int i = 0, n = this->evento_carga_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->evento_carga(i), target);
  }

  // optional .pacote_posicao.equip_delta_telemetria delta_telemetria = 7;
  if (has_delta_telemetria()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->delta_telemetria_, target);
  }

  // repeated .pacote_posicao.equip_evento_telemetria evento_telemetria = 8;
  for (unsigned int i = 0, n = this->evento_telemetria_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->evento_telemetria(i), target);
  }

  // optional string dump_debug = 9;
  if (has_dump_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_debug().data(), this->dump_debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pacote_posicao.pacote_enriquecido.dump_debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dump_debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.pacote_enriquecido)
  return target;
}

int pacote_enriquecido::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 79u) {
    // optional .pacote_posicao.equip_contrato ec = 1;
    if (has_ec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ec_);
    }

    // optional .pacote_posicao.equip_posicao ep = 2;
    if (has_ep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ep_);
    }

    // optional string texto_livre = 3;
    if (has_texto_livre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texto_livre());
    }

    // optional .pacote_posicao.equip_teclado teclado = 4;
    if (has_teclado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->teclado_);
    }

    // optional .pacote_posicao.equip_delta_telemetria delta_telemetria = 7;
    if (has_delta_telemetria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delta_telemetria_);
    }

  }
  // optional string dump_debug = 9;
  if (has_dump_debug()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dump_debug());
  }

  // repeated .pacote_posicao.equip_evento evento = 5;
  total_size += 1 * this->evento_size();
  for (int i = 0; i < this->evento_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evento(i));
  }

  // repeated .pacote_posicao.equip_evento_carga evento_carga = 6;
  total_size += 1 * this->evento_carga_size();
  for (int i = 0; i < this->evento_carga_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evento_carga(i));
  }

  // repeated .pacote_posicao.equip_evento_telemetria evento_telemetria = 8;
  total_size += 1 * this->evento_telemetria_size();
  for (int i = 0; i < this->evento_telemetria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evento_telemetria(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pacote_enriquecido::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const pacote_enriquecido* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const pacote_enriquecido>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pacote_enriquecido::MergeFrom(const pacote_enriquecido& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  evento_.MergeFrom(from.evento_);
  evento_carga_.MergeFrom(from.evento_carga_);
  evento_telemetria_.MergeFrom(from.evento_telemetria_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ec()) {
      mutable_ec()->::pacote_posicao::equip_contrato::MergeFrom(from.ec());
    }
    if (from.has_ep()) {
      mutable_ep()->::pacote_posicao::equip_posicao::MergeFrom(from.ep());
    }
    if (from.has_texto_livre()) {
      set_has_texto_livre();
      texto_livre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texto_livre_);
    }
    if (from.has_teclado()) {
      mutable_teclado()->::pacote_posicao::equip_teclado::MergeFrom(from.teclado());
    }
    if (from.has_delta_telemetria()) {
      mutable_delta_telemetria()->::pacote_posicao::equip_delta_telemetria::MergeFrom(from.delta_telemetria());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dump_debug()) {
      set_has_dump_debug();
      dump_debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_debug_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void pacote_enriquecido::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pacote_enriquecido::CopyFrom(const pacote_enriquecido& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pacote_enriquecido::IsInitialized() const {

  if (has_teclado()) {
    if (!this->teclado_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->evento())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->evento_carga())) return false;
  if (has_delta_telemetria()) {
    if (!this->delta_telemetria_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->evento_telemetria())) return false;
  return true;
}

void pacote_enriquecido::Swap(pacote_enriquecido* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pacote_enriquecido::InternalSwap(pacote_enriquecido* other) {
  std::swap(ec_, other->ec_);
  std::swap(ep_, other->ep_);
  texto_livre_.Swap(&other->texto_livre_);
  std::swap(teclado_, other->teclado_);
  evento_.UnsafeArenaSwap(&other->evento_);
  evento_carga_.UnsafeArenaSwap(&other->evento_carga_);
  std::swap(delta_telemetria_, other->delta_telemetria_);
  evento_telemetria_.UnsafeArenaSwap(&other->evento_telemetria_);
  dump_debug_.Swap(&other->dump_debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata pacote_enriquecido::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pacote_enriquecido_descriptor_;
  metadata.reflection = pacote_enriquecido_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// pacote_enriquecido

// optional .pacote_posicao.equip_contrato ec = 1;
bool pacote_enriquecido::has_ec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void pacote_enriquecido::set_has_ec() {
  _has_bits_[0] |= 0x00000001u;
}
void pacote_enriquecido::clear_has_ec() {
  _has_bits_[0] &= ~0x00000001u;
}
void pacote_enriquecido::clear_ec() {
  if (ec_ != NULL) ec_->::pacote_posicao::equip_contrato::Clear();
  clear_has_ec();
}
const ::pacote_posicao::equip_contrato& pacote_enriquecido::ec() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.ec)
  return ec_ != NULL ? *ec_ : *default_instance_->ec_;
}
::pacote_posicao::equip_contrato* pacote_enriquecido::mutable_ec() {
  set_has_ec();
  if (ec_ == NULL) {
    ec_ = new ::pacote_posicao::equip_contrato;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.ec)
  return ec_;
}
::pacote_posicao::equip_contrato* pacote_enriquecido::release_ec() {
  clear_has_ec();
  ::pacote_posicao::equip_contrato* temp = ec_;
  ec_ = NULL;
  return temp;
}
void pacote_enriquecido::set_allocated_ec(::pacote_posicao::equip_contrato* ec) {
  delete ec_;
  ec_ = ec;
  if (ec) {
    set_has_ec();
  } else {
    clear_has_ec();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.pacote_enriquecido.ec)
}

// optional .pacote_posicao.equip_posicao ep = 2;
bool pacote_enriquecido::has_ep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void pacote_enriquecido::set_has_ep() {
  _has_bits_[0] |= 0x00000002u;
}
void pacote_enriquecido::clear_has_ep() {
  _has_bits_[0] &= ~0x00000002u;
}
void pacote_enriquecido::clear_ep() {
  if (ep_ != NULL) ep_->::pacote_posicao::equip_posicao::Clear();
  clear_has_ep();
}
const ::pacote_posicao::equip_posicao& pacote_enriquecido::ep() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.ep)
  return ep_ != NULL ? *ep_ : *default_instance_->ep_;
}
::pacote_posicao::equip_posicao* pacote_enriquecido::mutable_ep() {
  set_has_ep();
  if (ep_ == NULL) {
    ep_ = new ::pacote_posicao::equip_posicao;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.ep)
  return ep_;
}
::pacote_posicao::equip_posicao* pacote_enriquecido::release_ep() {
  clear_has_ep();
  ::pacote_posicao::equip_posicao* temp = ep_;
  ep_ = NULL;
  return temp;
}
void pacote_enriquecido::set_allocated_ep(::pacote_posicao::equip_posicao* ep) {
  delete ep_;
  ep_ = ep;
  if (ep) {
    set_has_ep();
  } else {
    clear_has_ep();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.pacote_enriquecido.ep)
}

// optional string texto_livre = 3;
bool pacote_enriquecido::has_texto_livre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void pacote_enriquecido::set_has_texto_livre() {
  _has_bits_[0] |= 0x00000004u;
}
void pacote_enriquecido::clear_has_texto_livre() {
  _has_bits_[0] &= ~0x00000004u;
}
void pacote_enriquecido::clear_texto_livre() {
  texto_livre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_texto_livre();
}
 const ::std::string& pacote_enriquecido::texto_livre() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.texto_livre)
  return texto_livre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pacote_enriquecido::set_texto_livre(const ::std::string& value) {
  set_has_texto_livre();
  texto_livre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacote_posicao.pacote_enriquecido.texto_livre)
}
 void pacote_enriquecido::set_texto_livre(const char* value) {
  set_has_texto_livre();
  texto_livre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacote_posicao.pacote_enriquecido.texto_livre)
}
 void pacote_enriquecido::set_texto_livre(const char* value, size_t size) {
  set_has_texto_livre();
  texto_livre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacote_posicao.pacote_enriquecido.texto_livre)
}
 ::std::string* pacote_enriquecido::mutable_texto_livre() {
  set_has_texto_livre();
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.texto_livre)
  return texto_livre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pacote_enriquecido::release_texto_livre() {
  clear_has_texto_livre();
  return texto_livre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pacote_enriquecido::set_allocated_texto_livre(::std::string* texto_livre) {
  if (texto_livre != NULL) {
    set_has_texto_livre();
  } else {
    clear_has_texto_livre();
  }
  texto_livre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texto_livre);
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.pacote_enriquecido.texto_livre)
}

// optional .pacote_posicao.equip_teclado teclado = 4;
bool pacote_enriquecido::has_teclado() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void pacote_enriquecido::set_has_teclado() {
  _has_bits_[0] |= 0x00000008u;
}
void pacote_enriquecido::clear_has_teclado() {
  _has_bits_[0] &= ~0x00000008u;
}
void pacote_enriquecido::clear_teclado() {
  if (teclado_ != NULL) teclado_->::pacote_posicao::equip_teclado::Clear();
  clear_has_teclado();
}
const ::pacote_posicao::equip_teclado& pacote_enriquecido::teclado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.teclado)
  return teclado_ != NULL ? *teclado_ : *default_instance_->teclado_;
}
::pacote_posicao::equip_teclado* pacote_enriquecido::mutable_teclado() {
  set_has_teclado();
  if (teclado_ == NULL) {
    teclado_ = new ::pacote_posicao::equip_teclado;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.teclado)
  return teclado_;
}
::pacote_posicao::equip_teclado* pacote_enriquecido::release_teclado() {
  clear_has_teclado();
  ::pacote_posicao::equip_teclado* temp = teclado_;
  teclado_ = NULL;
  return temp;
}
void pacote_enriquecido::set_allocated_teclado(::pacote_posicao::equip_teclado* teclado) {
  delete teclado_;
  teclado_ = teclado;
  if (teclado) {
    set_has_teclado();
  } else {
    clear_has_teclado();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.pacote_enriquecido.teclado)
}

// repeated .pacote_posicao.equip_evento evento = 5;
int pacote_enriquecido::evento_size() const {
  return evento_.size();
}
void pacote_enriquecido::clear_evento() {
  evento_.Clear();
}
const ::pacote_posicao::equip_evento& pacote_enriquecido::evento(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.evento)
  return evento_.Get(index);
}
::pacote_posicao::equip_evento* pacote_enriquecido::mutable_evento(int index) {
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.evento)
  return evento_.Mutable(index);
}
::pacote_posicao::equip_evento* pacote_enriquecido::add_evento() {
  // @@protoc_insertion_point(field_add:pacote_posicao.pacote_enriquecido.evento)
  return evento_.Add();
}
::google::protobuf::RepeatedPtrField< ::pacote_posicao::equip_evento >*
pacote_enriquecido::mutable_evento() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.pacote_enriquecido.evento)
  return &evento_;
}
const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::equip_evento >&
pacote_enriquecido::evento() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.pacote_enriquecido.evento)
  return evento_;
}

// repeated .pacote_posicao.equip_evento_carga evento_carga = 6;
int pacote_enriquecido::evento_carga_size() const {
  return evento_carga_.size();
}
void pacote_enriquecido::clear_evento_carga() {
  evento_carga_.Clear();
}
const ::pacote_posicao::equip_evento_carga& pacote_enriquecido::evento_carga(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.evento_carga)
  return evento_carga_.Get(index);
}
::pacote_posicao::equip_evento_carga* pacote_enriquecido::mutable_evento_carga(int index) {
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.evento_carga)
  return evento_carga_.Mutable(index);
}
::pacote_posicao::equip_evento_carga* pacote_enriquecido::add_evento_carga() {
  // @@protoc_insertion_point(field_add:pacote_posicao.pacote_enriquecido.evento_carga)
  return evento_carga_.Add();
}
::google::protobuf::RepeatedPtrField< ::pacote_posicao::equip_evento_carga >*
pacote_enriquecido::mutable_evento_carga() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.pacote_enriquecido.evento_carga)
  return &evento_carga_;
}
const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::equip_evento_carga >&
pacote_enriquecido::evento_carga() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.pacote_enriquecido.evento_carga)
  return evento_carga_;
}

// optional .pacote_posicao.equip_delta_telemetria delta_telemetria = 7;
bool pacote_enriquecido::has_delta_telemetria() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void pacote_enriquecido::set_has_delta_telemetria() {
  _has_bits_[0] |= 0x00000040u;
}
void pacote_enriquecido::clear_has_delta_telemetria() {
  _has_bits_[0] &= ~0x00000040u;
}
void pacote_enriquecido::clear_delta_telemetria() {
  if (delta_telemetria_ != NULL) delta_telemetria_->::pacote_posicao::equip_delta_telemetria::Clear();
  clear_has_delta_telemetria();
}
const ::pacote_posicao::equip_delta_telemetria& pacote_enriquecido::delta_telemetria() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.delta_telemetria)
  return delta_telemetria_ != NULL ? *delta_telemetria_ : *default_instance_->delta_telemetria_;
}
::pacote_posicao::equip_delta_telemetria* pacote_enriquecido::mutable_delta_telemetria() {
  set_has_delta_telemetria();
  if (delta_telemetria_ == NULL) {
    delta_telemetria_ = new ::pacote_posicao::equip_delta_telemetria;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.delta_telemetria)
  return delta_telemetria_;
}
::pacote_posicao::equip_delta_telemetria* pacote_enriquecido::release_delta_telemetria() {
  clear_has_delta_telemetria();
  ::pacote_posicao::equip_delta_telemetria* temp = delta_telemetria_;
  delta_telemetria_ = NULL;
  return temp;
}
void pacote_enriquecido::set_allocated_delta_telemetria(::pacote_posicao::equip_delta_telemetria* delta_telemetria) {
  delete delta_telemetria_;
  delta_telemetria_ = delta_telemetria;
  if (delta_telemetria) {
    set_has_delta_telemetria();
  } else {
    clear_has_delta_telemetria();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.pacote_enriquecido.delta_telemetria)
}

// repeated .pacote_posicao.equip_evento_telemetria evento_telemetria = 8;
int pacote_enriquecido::evento_telemetria_size() const {
  return evento_telemetria_.size();
}
void pacote_enriquecido::clear_evento_telemetria() {
  evento_telemetria_.Clear();
}
const ::pacote_posicao::equip_evento_telemetria& pacote_enriquecido::evento_telemetria(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.evento_telemetria)
  return evento_telemetria_.Get(index);
}
::pacote_posicao::equip_evento_telemetria* pacote_enriquecido::mutable_evento_telemetria(int index) {
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.evento_telemetria)
  return evento_telemetria_.Mutable(index);
}
::pacote_posicao::equip_evento_telemetria* pacote_enriquecido::add_evento_telemetria() {
  // @@protoc_insertion_point(field_add:pacote_posicao.pacote_enriquecido.evento_telemetria)
  return evento_telemetria_.Add();
}
::google::protobuf::RepeatedPtrField< ::pacote_posicao::equip_evento_telemetria >*
pacote_enriquecido::mutable_evento_telemetria() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.pacote_enriquecido.evento_telemetria)
  return &evento_telemetria_;
}
const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::equip_evento_telemetria >&
pacote_enriquecido::evento_telemetria() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.pacote_enriquecido.evento_telemetria)
  return evento_telemetria_;
}

// optional string dump_debug = 9;
bool pacote_enriquecido::has_dump_debug() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void pacote_enriquecido::set_has_dump_debug() {
  _has_bits_[0] |= 0x00000100u;
}
void pacote_enriquecido::clear_has_dump_debug() {
  _has_bits_[0] &= ~0x00000100u;
}
void pacote_enriquecido::clear_dump_debug() {
  dump_debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_debug();
}
 const ::std::string& pacote_enriquecido::dump_debug() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.pacote_enriquecido.dump_debug)
  return dump_debug_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pacote_enriquecido::set_dump_debug(const ::std::string& value) {
  set_has_dump_debug();
  dump_debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacote_posicao.pacote_enriquecido.dump_debug)
}
 void pacote_enriquecido::set_dump_debug(const char* value) {
  set_has_dump_debug();
  dump_debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacote_posicao.pacote_enriquecido.dump_debug)
}
 void pacote_enriquecido::set_dump_debug(const char* value, size_t size) {
  set_has_dump_debug();
  dump_debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacote_posicao.pacote_enriquecido.dump_debug)
}
 ::std::string* pacote_enriquecido::mutable_dump_debug() {
  set_has_dump_debug();
  // @@protoc_insertion_point(field_mutable:pacote_posicao.pacote_enriquecido.dump_debug)
  return dump_debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* pacote_enriquecido::release_dump_debug() {
  clear_has_dump_debug();
  return dump_debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void pacote_enriquecido::set_allocated_dump_debug(::std::string* dump_debug) {
  if (dump_debug != NULL) {
    set_has_dump_debug();
  } else {
    clear_has_dump_debug();
  }
  dump_debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_debug);
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.pacote_enriquecido.dump_debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int campo_macro::kNumeroCampoFieldNumber;
const int campo_macro::kValorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

campo_macro::campo_macro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.campo_macro)
}

void campo_macro::InitAsDefaultInstance() {
}

campo_macro::campo_macro(const campo_macro& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.campo_macro)
}

void campo_macro::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  numero_campo_ = 0;
  valor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

campo_macro::~campo_macro() {
  // @@protoc_insertion_point(destructor:pacote_posicao.campo_macro)
  SharedDtor();
}

void campo_macro::SharedDtor() {
  valor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void campo_macro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* campo_macro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return campo_macro_descriptor_;
}

const campo_macro& campo_macro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

campo_macro* campo_macro::default_instance_ = NULL;

campo_macro* campo_macro::New(::google::protobuf::Arena* arena) const {
  campo_macro* n = new campo_macro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void campo_macro::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    numero_campo_ = 0;
    if (has_valor()) {
      valor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool campo_macro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.campo_macro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 numero_campo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numero_campo_)));
          set_has_numero_campo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_valor;
        break;
      }

      // optional bytes valor = 2;
      case 2: {
        if (tag == 18) {
         parse_valor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_valor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.campo_macro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.campo_macro)
  return false;
#undef DO_
}

void campo_macro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.campo_macro)
  // required int32 numero_campo = 1;
  if (has_numero_campo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numero_campo(), output);
  }

  // optional bytes valor = 2;
  if (has_valor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->valor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.campo_macro)
}

::google::protobuf::uint8* campo_macro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.campo_macro)
  // required int32 numero_campo = 1;
  if (has_numero_campo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numero_campo(), target);
  }

  // optional bytes valor = 2;
  if (has_valor()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->valor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.campo_macro)
  return target;
}

int campo_macro::ByteSize() const {
  int total_size = 0;

  // required int32 numero_campo = 1;
  if (has_numero_campo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numero_campo());
  }
  // optional bytes valor = 2;
  if (has_valor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->valor());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void campo_macro::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const campo_macro* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const campo_macro>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void campo_macro::MergeFrom(const campo_macro& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numero_campo()) {
      set_numero_campo(from.numero_campo());
    }
    if (from.has_valor()) {
      set_has_valor();
      valor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valor_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void campo_macro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void campo_macro::CopyFrom(const campo_macro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool campo_macro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void campo_macro::Swap(campo_macro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void campo_macro::InternalSwap(campo_macro* other) {
  std::swap(numero_campo_, other->numero_campo_);
  valor_.Swap(&other->valor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata campo_macro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = campo_macro_descriptor_;
  metadata.reflection = campo_macro_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// campo_macro

// required int32 numero_campo = 1;
bool campo_macro::has_numero_campo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void campo_macro::set_has_numero_campo() {
  _has_bits_[0] |= 0x00000001u;
}
void campo_macro::clear_has_numero_campo() {
  _has_bits_[0] &= ~0x00000001u;
}
void campo_macro::clear_numero_campo() {
  numero_campo_ = 0;
  clear_has_numero_campo();
}
 ::google::protobuf::int32 campo_macro::numero_campo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.campo_macro.numero_campo)
  return numero_campo_;
}
 void campo_macro::set_numero_campo(::google::protobuf::int32 value) {
  set_has_numero_campo();
  numero_campo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.campo_macro.numero_campo)
}

// optional bytes valor = 2;
bool campo_macro::has_valor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void campo_macro::set_has_valor() {
  _has_bits_[0] |= 0x00000002u;
}
void campo_macro::clear_has_valor() {
  _has_bits_[0] &= ~0x00000002u;
}
void campo_macro::clear_valor() {
  valor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valor();
}
 const ::std::string& campo_macro::valor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.campo_macro.valor)
  return valor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void campo_macro::set_valor(const ::std::string& value) {
  set_has_valor();
  valor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacote_posicao.campo_macro.valor)
}
 void campo_macro::set_valor(const char* value) {
  set_has_valor();
  valor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacote_posicao.campo_macro.valor)
}
 void campo_macro::set_valor(const void* value, size_t size) {
  set_has_valor();
  valor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacote_posicao.campo_macro.valor)
}
 ::std::string* campo_macro::mutable_valor() {
  set_has_valor();
  // @@protoc_insertion_point(field_mutable:pacote_posicao.campo_macro.valor)
  return valor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* campo_macro::release_valor() {
  clear_has_valor();
  return valor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void campo_macro::set_allocated_valor(::std::string* valor) {
  if (valor != NULL) {
    set_has_valor();
  } else {
    clear_has_valor();
  }
  valor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valor);
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.campo_macro.valor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_teclado::kTipoTecladoFieldNumber;
const int equip_teclado::kIdConfLeituraFieldNumber;
const int equip_teclado::kIdMacroFieldNumber;
const int equip_teclado::kNomeMacroFieldNumber;
const int equip_teclado::kIdTeclaFieldNumber;
const int equip_teclado::kIdMsgRetFieldNumber;
const int equip_teclado::kCampoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_teclado::equip_teclado()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_teclado)
}

void equip_teclado::InitAsDefaultInstance() {
}

equip_teclado::equip_teclado(const equip_teclado& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_teclado)
}

void equip_teclado::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tipo_teclado_ = 0;
  id_conf_leitura_ = 0;
  id_macro_ = 0;
  nome_macro_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_tecla_ = 0;
  id_msg_ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_teclado::~equip_teclado() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_teclado)
  SharedDtor();
}

void equip_teclado::SharedDtor() {
  nome_macro_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void equip_teclado::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_teclado::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_teclado_descriptor_;
}

const equip_teclado& equip_teclado::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_teclado* equip_teclado::default_instance_ = NULL;

equip_teclado* equip_teclado::New(::google::protobuf::Arena* arena) const {
  equip_teclado* n = new equip_teclado;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_teclado::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_teclado*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(tipo_teclado_, id_conf_leitura_);
    ZR_(id_macro_, id_tecla_);
    if (has_nome_macro()) {
      nome_macro_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_msg_ret_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  campo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_teclado::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_teclado)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tipo_teclado = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipo_teclado_)));
          set_has_tipo_teclado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_conf_leitura;
        break;
      }

      // optional int32 id_conf_leitura = 2;
      case 2: {
        if (tag == 16) {
         parse_id_conf_leitura:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_conf_leitura_)));
          set_has_id_conf_leitura();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id_macro;
        break;
      }

      // optional int32 id_macro = 3;
      case 3: {
        if (tag == 24) {
         parse_id_macro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_macro_)));
          set_has_id_macro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nome_macro;
        break;
      }

      // optional string nome_macro = 4;
      case 4: {
        if (tag == 34) {
         parse_nome_macro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nome_macro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nome_macro().data(), this->nome_macro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pacote_posicao.equip_teclado.nome_macro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id_tecla;
        break;
      }

      // optional int32 id_tecla = 5;
      case 5: {
        if (tag == 40) {
         parse_id_tecla:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_tecla_)));
          set_has_id_tecla();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id_msg_ret;
        break;
      }

      // optional int32 id_msg_ret = 6;
      case 6: {
        if (tag == 48) {
         parse_id_msg_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_msg_ret_)));
          set_has_id_msg_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_campo;
        break;
      }

      // repeated .pacote_posicao.campo_macro campo = 7;
      case 7: {
        if (tag == 58) {
         parse_campo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_campo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_campo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_campo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_teclado)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_teclado)
  return false;
#undef DO_
}

void equip_teclado::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_teclado)
  // required int32 tipo_teclado = 1;
  if (has_tipo_teclado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tipo_teclado(), output);
  }

  // optional int32 id_conf_leitura = 2;
  if (has_id_conf_leitura()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id_conf_leitura(), output);
  }

  // optional int32 id_macro = 3;
  if (has_id_macro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id_macro(), output);
  }

  // optional string nome_macro = 4;
  if (has_nome_macro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nome_macro().data(), this->nome_macro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pacote_posicao.equip_teclado.nome_macro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nome_macro(), output);
  }

  // optional int32 id_tecla = 5;
  if (has_id_tecla()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id_tecla(), output);
  }

  // optional int32 id_msg_ret = 6;
  if (has_id_msg_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id_msg_ret(), output);
  }

  // repeated .pacote_posicao.campo_macro campo = 7;
  for (unsigned int i = 0, n = this->campo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->campo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_teclado)
}

::google::protobuf::uint8* equip_teclado::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_teclado)
  // required int32 tipo_teclado = 1;
  if (has_tipo_teclado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tipo_teclado(), target);
  }

  // optional int32 id_conf_leitura = 2;
  if (has_id_conf_leitura()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id_conf_leitura(), target);
  }

  // optional int32 id_macro = 3;
  if (has_id_macro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id_macro(), target);
  }

  // optional string nome_macro = 4;
  if (has_nome_macro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nome_macro().data(), this->nome_macro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pacote_posicao.equip_teclado.nome_macro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nome_macro(), target);
  }

  // optional int32 id_tecla = 5;
  if (has_id_tecla()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id_tecla(), target);
  }

  // optional int32 id_msg_ret = 6;
  if (has_id_msg_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id_msg_ret(), target);
  }

  // repeated .pacote_posicao.campo_macro campo = 7;
  for (unsigned int i = 0, n = this->campo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->campo(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_teclado)
  return target;
}

int equip_teclado::ByteSize() const {
  int total_size = 0;

  // required int32 tipo_teclado = 1;
  if (has_tipo_teclado()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tipo_teclado());
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional int32 id_conf_leitura = 2;
    if (has_id_conf_leitura()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_conf_leitura());
    }

    // optional int32 id_macro = 3;
    if (has_id_macro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_macro());
    }

    // optional string nome_macro = 4;
    if (has_nome_macro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nome_macro());
    }

    // optional int32 id_tecla = 5;
    if (has_id_tecla()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_tecla());
    }

    // optional int32 id_msg_ret = 6;
    if (has_id_msg_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_msg_ret());
    }

  }
  // repeated .pacote_posicao.campo_macro campo = 7;
  total_size += 1 * this->campo_size();
  for (int i = 0; i < this->campo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->campo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_teclado::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_teclado* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_teclado>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_teclado::MergeFrom(const equip_teclado& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  campo_.MergeFrom(from.campo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tipo_teclado()) {
      set_tipo_teclado(from.tipo_teclado());
    }
    if (from.has_id_conf_leitura()) {
      set_id_conf_leitura(from.id_conf_leitura());
    }
    if (from.has_id_macro()) {
      set_id_macro(from.id_macro());
    }
    if (from.has_nome_macro()) {
      set_has_nome_macro();
      nome_macro_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nome_macro_);
    }
    if (from.has_id_tecla()) {
      set_id_tecla(from.id_tecla());
    }
    if (from.has_id_msg_ret()) {
      set_id_msg_ret(from.id_msg_ret());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_teclado::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_teclado::CopyFrom(const equip_teclado& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_teclado::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->campo())) return false;
  return true;
}

void equip_teclado::Swap(equip_teclado* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_teclado::InternalSwap(equip_teclado* other) {
  std::swap(tipo_teclado_, other->tipo_teclado_);
  std::swap(id_conf_leitura_, other->id_conf_leitura_);
  std::swap(id_macro_, other->id_macro_);
  nome_macro_.Swap(&other->nome_macro_);
  std::swap(id_tecla_, other->id_tecla_);
  std::swap(id_msg_ret_, other->id_msg_ret_);
  campo_.UnsafeArenaSwap(&other->campo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_teclado::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_teclado_descriptor_;
  metadata.reflection = equip_teclado_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_teclado

// required int32 tipo_teclado = 1;
bool equip_teclado::has_tipo_teclado() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_teclado::set_has_tipo_teclado() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_teclado::clear_has_tipo_teclado() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_teclado::clear_tipo_teclado() {
  tipo_teclado_ = 0;
  clear_has_tipo_teclado();
}
 ::google::protobuf::int32 equip_teclado::tipo_teclado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.tipo_teclado)
  return tipo_teclado_;
}
 void equip_teclado::set_tipo_teclado(::google::protobuf::int32 value) {
  set_has_tipo_teclado();
  tipo_teclado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_teclado.tipo_teclado)
}

// optional int32 id_conf_leitura = 2;
bool equip_teclado::has_id_conf_leitura() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_teclado::set_has_id_conf_leitura() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_teclado::clear_has_id_conf_leitura() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_teclado::clear_id_conf_leitura() {
  id_conf_leitura_ = 0;
  clear_has_id_conf_leitura();
}
 ::google::protobuf::int32 equip_teclado::id_conf_leitura() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.id_conf_leitura)
  return id_conf_leitura_;
}
 void equip_teclado::set_id_conf_leitura(::google::protobuf::int32 value) {
  set_has_id_conf_leitura();
  id_conf_leitura_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_teclado.id_conf_leitura)
}

// optional int32 id_macro = 3;
bool equip_teclado::has_id_macro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void equip_teclado::set_has_id_macro() {
  _has_bits_[0] |= 0x00000004u;
}
void equip_teclado::clear_has_id_macro() {
  _has_bits_[0] &= ~0x00000004u;
}
void equip_teclado::clear_id_macro() {
  id_macro_ = 0;
  clear_has_id_macro();
}
 ::google::protobuf::int32 equip_teclado::id_macro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.id_macro)
  return id_macro_;
}
 void equip_teclado::set_id_macro(::google::protobuf::int32 value) {
  set_has_id_macro();
  id_macro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_teclado.id_macro)
}

// optional string nome_macro = 4;
bool equip_teclado::has_nome_macro() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void equip_teclado::set_has_nome_macro() {
  _has_bits_[0] |= 0x00000008u;
}
void equip_teclado::clear_has_nome_macro() {
  _has_bits_[0] &= ~0x00000008u;
}
void equip_teclado::clear_nome_macro() {
  nome_macro_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nome_macro();
}
 const ::std::string& equip_teclado::nome_macro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.nome_macro)
  return nome_macro_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void equip_teclado::set_nome_macro(const ::std::string& value) {
  set_has_nome_macro();
  nome_macro_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_teclado.nome_macro)
}
 void equip_teclado::set_nome_macro(const char* value) {
  set_has_nome_macro();
  nome_macro_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacote_posicao.equip_teclado.nome_macro)
}
 void equip_teclado::set_nome_macro(const char* value, size_t size) {
  set_has_nome_macro();
  nome_macro_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacote_posicao.equip_teclado.nome_macro)
}
 ::std::string* equip_teclado::mutable_nome_macro() {
  set_has_nome_macro();
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_teclado.nome_macro)
  return nome_macro_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* equip_teclado::release_nome_macro() {
  clear_has_nome_macro();
  return nome_macro_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void equip_teclado::set_allocated_nome_macro(::std::string* nome_macro) {
  if (nome_macro != NULL) {
    set_has_nome_macro();
  } else {
    clear_has_nome_macro();
  }
  nome_macro_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome_macro);
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_teclado.nome_macro)
}

// optional int32 id_tecla = 5;
bool equip_teclado::has_id_tecla() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void equip_teclado::set_has_id_tecla() {
  _has_bits_[0] |= 0x00000010u;
}
void equip_teclado::clear_has_id_tecla() {
  _has_bits_[0] &= ~0x00000010u;
}
void equip_teclado::clear_id_tecla() {
  id_tecla_ = 0;
  clear_has_id_tecla();
}
 ::google::protobuf::int32 equip_teclado::id_tecla() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.id_tecla)
  return id_tecla_;
}
 void equip_teclado::set_id_tecla(::google::protobuf::int32 value) {
  set_has_id_tecla();
  id_tecla_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_teclado.id_tecla)
}

// optional int32 id_msg_ret = 6;
bool equip_teclado::has_id_msg_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void equip_teclado::set_has_id_msg_ret() {
  _has_bits_[0] |= 0x00000020u;
}
void equip_teclado::clear_has_id_msg_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
void equip_teclado::clear_id_msg_ret() {
  id_msg_ret_ = 0;
  clear_has_id_msg_ret();
}
 ::google::protobuf::int32 equip_teclado::id_msg_ret() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.id_msg_ret)
  return id_msg_ret_;
}
 void equip_teclado::set_id_msg_ret(::google::protobuf::int32 value) {
  set_has_id_msg_ret();
  id_msg_ret_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_teclado.id_msg_ret)
}

// repeated .pacote_posicao.campo_macro campo = 7;
int equip_teclado::campo_size() const {
  return campo_.size();
}
void equip_teclado::clear_campo() {
  campo_.Clear();
}
const ::pacote_posicao::campo_macro& equip_teclado::campo(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_teclado.campo)
  return campo_.Get(index);
}
::pacote_posicao::campo_macro* equip_teclado::mutable_campo(int index) {
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_teclado.campo)
  return campo_.Mutable(index);
}
::pacote_posicao::campo_macro* equip_teclado::add_campo() {
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_teclado.campo)
  return campo_.Add();
}
::google::protobuf::RepeatedPtrField< ::pacote_posicao::campo_macro >*
equip_teclado::mutable_campo() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_teclado.campo)
  return &campo_;
}
const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::campo_macro >&
equip_teclado::campo() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_teclado.campo)
  return campo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_evento::kDispositivoFieldNumber;
const int equip_evento::kEventoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_evento::equip_evento()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_evento)
}

void equip_evento::InitAsDefaultInstance() {
}

equip_evento::equip_evento(const equip_evento& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_evento)
}

void equip_evento::SharedCtor() {
  _cached_size_ = 0;
  dispositivo_ = 0;
  evento_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_evento::~equip_evento() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_evento)
  SharedDtor();
}

void equip_evento::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_evento::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_evento::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_evento_descriptor_;
}

const equip_evento& equip_evento::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_evento* equip_evento::default_instance_ = NULL;

equip_evento* equip_evento::New(::google::protobuf::Arena* arena) const {
  equip_evento* n = new equip_evento;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_evento::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_evento*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dispositivo_, evento_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_evento::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_evento)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dispositivo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispositivo_)));
          set_has_dispositivo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evento;
        break;
      }

      // required int32 evento = 2;
      case 2: {
        if (tag == 16) {
         parse_evento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evento_)));
          set_has_evento();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_evento)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_evento)
  return false;
#undef DO_
}

void equip_evento::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_evento)
  // required int32 dispositivo = 1;
  if (has_dispositivo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dispositivo(), output);
  }

  // required int32 evento = 2;
  if (has_evento()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->evento(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_evento)
}

::google::protobuf::uint8* equip_evento::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_evento)
  // required int32 dispositivo = 1;
  if (has_dispositivo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dispositivo(), target);
  }

  // required int32 evento = 2;
  if (has_evento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->evento(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_evento)
  return target;
}

int equip_evento::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_dispositivo()) {
    // required int32 dispositivo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dispositivo());
  }

  if (has_evento()) {
    // required int32 evento = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evento());
  }

  return total_size;
}
int equip_evento::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 dispositivo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dispositivo());

    // required int32 evento = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evento());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_evento::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_evento* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_evento>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_evento::MergeFrom(const equip_evento& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dispositivo()) {
      set_dispositivo(from.dispositivo());
    }
    if (from.has_evento()) {
      set_evento(from.evento());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_evento::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_evento::CopyFrom(const equip_evento& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_evento::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void equip_evento::Swap(equip_evento* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_evento::InternalSwap(equip_evento* other) {
  std::swap(dispositivo_, other->dispositivo_);
  std::swap(evento_, other->evento_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_evento::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_evento_descriptor_;
  metadata.reflection = equip_evento_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_evento

// required int32 dispositivo = 1;
bool equip_evento::has_dispositivo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_evento::set_has_dispositivo() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_evento::clear_has_dispositivo() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_evento::clear_dispositivo() {
  dispositivo_ = 0;
  clear_has_dispositivo();
}
 ::google::protobuf::int32 equip_evento::dispositivo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento.dispositivo)
  return dispositivo_;
}
 void equip_evento::set_dispositivo(::google::protobuf::int32 value) {
  set_has_dispositivo();
  dispositivo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento.dispositivo)
}

// required int32 evento = 2;
bool equip_evento::has_evento() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_evento::set_has_evento() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_evento::clear_has_evento() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_evento::clear_evento() {
  evento_ = 0;
  clear_has_evento();
}
 ::google::protobuf::int32 equip_evento::evento() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento.evento)
  return evento_;
}
 void equip_evento::set_evento(::google::protobuf::int32 value) {
  set_has_evento();
  evento_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento.evento)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_evento_carga::kIdFieldNumber;
const int equip_evento_carga::kEntradasFieldNumber;
const int equip_evento_carga::kSaidasFieldNumber;
const int equip_evento_carga::kTempoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_evento_carga::equip_evento_carga()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_evento_carga)
}

void equip_evento_carga::InitAsDefaultInstance() {
}

equip_evento_carga::equip_evento_carga(const equip_evento_carga& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_evento_carga)
}

void equip_evento_carga::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  entradas_ = 0;
  saidas_ = 0;
  tempo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_evento_carga::~equip_evento_carga() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_evento_carga)
  SharedDtor();
}

void equip_evento_carga::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_evento_carga::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_evento_carga::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_evento_carga_descriptor_;
}

const equip_evento_carga& equip_evento_carga::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_evento_carga* equip_evento_carga::default_instance_ = NULL;

equip_evento_carga* equip_evento_carga::New(::google::protobuf::Arena* arena) const {
  equip_evento_carga* n = new equip_evento_carga;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_evento_carga::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_evento_carga*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, tempo_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_evento_carga::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_evento_carga)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entradas;
        break;
      }

      // optional int32 entradas = 2;
      case 2: {
        if (tag == 16) {
         parse_entradas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entradas_)));
          set_has_entradas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_saidas;
        break;
      }

      // optional int32 saidas = 3;
      case 3: {
        if (tag == 24) {
         parse_saidas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saidas_)));
          set_has_saidas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tempo;
        break;
      }

      // required int32 tempo = 4;
      case 4: {
        if (tag == 32) {
         parse_tempo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempo_)));
          set_has_tempo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_evento_carga)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_evento_carga)
  return false;
#undef DO_
}

void equip_evento_carga::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_evento_carga)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 entradas = 2;
  if (has_entradas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entradas(), output);
  }

  // optional int32 saidas = 3;
  if (has_saidas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->saidas(), output);
  }

  // required int32 tempo = 4;
  if (has_tempo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tempo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_evento_carga)
}

::google::protobuf::uint8* equip_evento_carga::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_evento_carga)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 entradas = 2;
  if (has_entradas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entradas(), target);
  }

  // optional int32 saidas = 3;
  if (has_saidas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->saidas(), target);
  }

  // required int32 tempo = 4;
  if (has_tempo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tempo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_evento_carga)
  return target;
}

int equip_evento_carga::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_tempo()) {
    // required int32 tempo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tempo());
  }

  return total_size;
}
int equip_evento_carga::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 tempo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tempo());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 entradas = 2;
    if (has_entradas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entradas());
    }

    // optional int32 saidas = 3;
    if (has_saidas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saidas());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_evento_carga::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_evento_carga* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_evento_carga>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_evento_carga::MergeFrom(const equip_evento_carga& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_entradas()) {
      set_entradas(from.entradas());
    }
    if (from.has_saidas()) {
      set_saidas(from.saidas());
    }
    if (from.has_tempo()) {
      set_tempo(from.tempo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_evento_carga::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_evento_carga::CopyFrom(const equip_evento_carga& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_evento_carga::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void equip_evento_carga::Swap(equip_evento_carga* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_evento_carga::InternalSwap(equip_evento_carga* other) {
  std::swap(id_, other->id_);
  std::swap(entradas_, other->entradas_);
  std::swap(saidas_, other->saidas_);
  std::swap(tempo_, other->tempo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_evento_carga::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_evento_carga_descriptor_;
  metadata.reflection = equip_evento_carga_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_evento_carga

// required int32 id = 1;
bool equip_evento_carga::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_evento_carga::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_evento_carga::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_evento_carga::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 equip_evento_carga::id() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_carga.id)
  return id_;
}
 void equip_evento_carga::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_carga.id)
}

// optional int32 entradas = 2;
bool equip_evento_carga::has_entradas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_evento_carga::set_has_entradas() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_evento_carga::clear_has_entradas() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_evento_carga::clear_entradas() {
  entradas_ = 0;
  clear_has_entradas();
}
 ::google::protobuf::int32 equip_evento_carga::entradas() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_carga.entradas)
  return entradas_;
}
 void equip_evento_carga::set_entradas(::google::protobuf::int32 value) {
  set_has_entradas();
  entradas_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_carga.entradas)
}

// optional int32 saidas = 3;
bool equip_evento_carga::has_saidas() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void equip_evento_carga::set_has_saidas() {
  _has_bits_[0] |= 0x00000004u;
}
void equip_evento_carga::clear_has_saidas() {
  _has_bits_[0] &= ~0x00000004u;
}
void equip_evento_carga::clear_saidas() {
  saidas_ = 0;
  clear_has_saidas();
}
 ::google::protobuf::int32 equip_evento_carga::saidas() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_carga.saidas)
  return saidas_;
}
 void equip_evento_carga::set_saidas(::google::protobuf::int32 value) {
  set_has_saidas();
  saidas_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_carga.saidas)
}

// required int32 tempo = 4;
bool equip_evento_carga::has_tempo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void equip_evento_carga::set_has_tempo() {
  _has_bits_[0] |= 0x00000008u;
}
void equip_evento_carga::clear_has_tempo() {
  _has_bits_[0] &= ~0x00000008u;
}
void equip_evento_carga::clear_tempo() {
  tempo_ = 0;
  clear_has_tempo();
}
 ::google::protobuf::int32 equip_evento_carga::tempo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_carga.tempo)
  return tempo_;
}
 void equip_evento_carga::set_tempo(::google::protobuf::int32 value) {
  set_has_tempo();
  tempo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_carga.tempo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_delta_telemetria::kVersaoFieldNumber;
const int equip_delta_telemetria::kDtFxAzulFieldNumber;
const int equip_delta_telemetria::kTipoFieldNumber;
const int equip_delta_telemetria::kDtFxVermelhoFieldNumber;
const int equip_delta_telemetria::kVelMaxFieldNumber;
const int equip_delta_telemetria::kDtFxAmareloFieldNumber;
const int equip_delta_telemetria::kVelMediaFieldNumber;
const int equip_delta_telemetria::kDtOdometroFieldNumber;
const int equip_delta_telemetria::kDtIntervaloFieldNumber;
const int equip_delta_telemetria::kDtMotorGiroFieldNumber;
const int equip_delta_telemetria::kDtFxVerdeFieldNumber;
const int equip_delta_telemetria::kDtMovimentoFieldNumber;
const int equip_delta_telemetria::kDtParadoFieldNumber;
const int equip_delta_telemetria::kRpmMaxFieldNumber;
const int equip_delta_telemetria::kRpmMedFieldNumber;
const int equip_delta_telemetria::kTmpFreioMotorFieldNumber;
const int equip_delta_telemetria::kUsoEmbreagemKmFieldNumber;
const int equip_delta_telemetria::kUsoFreioKmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_delta_telemetria::equip_delta_telemetria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_delta_telemetria)
}

void equip_delta_telemetria::InitAsDefaultInstance() {
}

equip_delta_telemetria::equip_delta_telemetria(const equip_delta_telemetria& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_delta_telemetria)
}

void equip_delta_telemetria::SharedCtor() {
  _cached_size_ = 0;
  versao_ = 0;
  dt_fx_azul_ = 0;
  tipo_ = 0;
  dt_fx_vermelho_ = 0;
  vel_max_ = 0;
  dt_fx_amarelo_ = 0;
  vel_media_ = 0;
  dt_odometro_ = 0;
  dt_intervalo_ = 0;
  dt_motor_giro_ = 0;
  dt_fx_verde_ = 0;
  dt_movimento_ = 0;
  dt_parado_ = 0;
  rpm_max_ = 0;
  rpm_med_ = 0;
  tmp_freio_motor_ = 0;
  uso_embreagem_km_ = 0;
  uso_freio_km_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_delta_telemetria::~equip_delta_telemetria() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_delta_telemetria)
  SharedDtor();
}

void equip_delta_telemetria::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_delta_telemetria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_delta_telemetria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_delta_telemetria_descriptor_;
}

const equip_delta_telemetria& equip_delta_telemetria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_delta_telemetria* equip_delta_telemetria::default_instance_ = NULL;

equip_delta_telemetria* equip_delta_telemetria::New(::google::protobuf::Arena* arena) const {
  equip_delta_telemetria* n = new equip_delta_telemetria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_delta_telemetria::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_delta_telemetria*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(versao_, dt_odometro_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(dt_intervalo_, tmp_freio_motor_);
  }
  ZR_(uso_embreagem_km_, uso_freio_km_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_delta_telemetria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_delta_telemetria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 versao = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versao_)));
          set_has_versao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dt_fx_azul;
        break;
      }

      // required int32 dt_fx_azul = 2;
      case 2: {
        if (tag == 16) {
         parse_dt_fx_azul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_fx_azul_)));
          set_has_dt_fx_azul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tipo;
        break;
      }

      // required int32 tipo = 3;
      case 3: {
        if (tag == 24) {
         parse_tipo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipo_)));
          set_has_tipo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dt_fx_vermelho;
        break;
      }

      // required int32 dt_fx_vermelho = 4;
      case 4: {
        if (tag == 32) {
         parse_dt_fx_vermelho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_fx_vermelho_)));
          set_has_dt_fx_vermelho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vel_max;
        break;
      }

      // required int32 vel_max = 5;
      case 5: {
        if (tag == 40) {
         parse_vel_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vel_max_)));
          set_has_vel_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dt_fx_amarelo;
        break;
      }

      // required int32 dt_fx_amarelo = 6;
      case 6: {
        if (tag == 48) {
         parse_dt_fx_amarelo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_fx_amarelo_)));
          set_has_dt_fx_amarelo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vel_media;
        break;
      }

      // required int32 vel_media = 7;
      case 7: {
        if (tag == 56) {
         parse_vel_media:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vel_media_)));
          set_has_vel_media();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dt_odometro;
        break;
      }

      // required int32 dt_odometro = 8;
      case 8: {
        if (tag == 64) {
         parse_dt_odometro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_odometro_)));
          set_has_dt_odometro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dt_intervalo;
        break;
      }

      // required int32 dt_intervalo = 9;
      case 9: {
        if (tag == 72) {
         parse_dt_intervalo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_intervalo_)));
          set_has_dt_intervalo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_dt_motor_giro;
        break;
      }

      // optional int32 dt_motor_giro = 10;
      case 10: {
        if (tag == 80) {
         parse_dt_motor_giro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_motor_giro_)));
          set_has_dt_motor_giro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dt_fx_verde;
        break;
      }

      // required int32 dt_fx_verde = 11;
      case 11: {
        if (tag == 88) {
         parse_dt_fx_verde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_fx_verde_)));
          set_has_dt_fx_verde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dt_movimento;
        break;
      }

      // required int32 dt_movimento = 12;
      case 12: {
        if (tag == 96) {
         parse_dt_movimento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_movimento_)));
          set_has_dt_movimento();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dt_parado;
        break;
      }

      // required int32 dt_parado = 13;
      case 13: {
        if (tag == 104) {
         parse_dt_parado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dt_parado_)));
          set_has_dt_parado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rpm_max;
        break;
      }

      // required int32 rpm_max = 14;
      case 14: {
        if (tag == 112) {
         parse_rpm_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpm_max_)));
          set_has_rpm_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rpm_med;
        break;
      }

      // required int32 rpm_med = 15;
      case 15: {
        if (tag == 120) {
         parse_rpm_med:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpm_med_)));
          set_has_rpm_med();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_tmp_freio_motor;
        break;
      }

      // required int32 tmp_freio_motor = 16;
      case 16: {
        if (tag == 128) {
         parse_tmp_freio_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmp_freio_motor_)));
          set_has_tmp_freio_motor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_uso_embreagem_km;
        break;
      }

      // required int32 uso_embreagem_km = 17;
      case 17: {
        if (tag == 136) {
         parse_uso_embreagem_km:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uso_embreagem_km_)));
          set_has_uso_embreagem_km();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_uso_freio_km;
        break;
      }

      // required int32 uso_freio_km = 18;
      case 18: {
        if (tag == 144) {
         parse_uso_freio_km:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uso_freio_km_)));
          set_has_uso_freio_km();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_delta_telemetria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_delta_telemetria)
  return false;
#undef DO_
}

void equip_delta_telemetria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_delta_telemetria)
  // required int32 versao = 1;
  if (has_versao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->versao(), output);
  }

  // required int32 dt_fx_azul = 2;
  if (has_dt_fx_azul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dt_fx_azul(), output);
  }

  // required int32 tipo = 3;
  if (has_tipo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tipo(), output);
  }

  // required int32 dt_fx_vermelho = 4;
  if (has_dt_fx_vermelho()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dt_fx_vermelho(), output);
  }

  // required int32 vel_max = 5;
  if (has_vel_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vel_max(), output);
  }

  // required int32 dt_fx_amarelo = 6;
  if (has_dt_fx_amarelo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dt_fx_amarelo(), output);
  }

  // required int32 vel_media = 7;
  if (has_vel_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vel_media(), output);
  }

  // required int32 dt_odometro = 8;
  if (has_dt_odometro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dt_odometro(), output);
  }

  // required int32 dt_intervalo = 9;
  if (has_dt_intervalo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dt_intervalo(), output);
  }

  // optional int32 dt_motor_giro = 10;
  if (has_dt_motor_giro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dt_motor_giro(), output);
  }

  // required int32 dt_fx_verde = 11;
  if (has_dt_fx_verde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dt_fx_verde(), output);
  }

  // required int32 dt_movimento = 12;
  if (has_dt_movimento()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dt_movimento(), output);
  }

  // required int32 dt_parado = 13;
  if (has_dt_parado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dt_parado(), output);
  }

  // required int32 rpm_max = 14;
  if (has_rpm_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rpm_max(), output);
  }

  // required int32 rpm_med = 15;
  if (has_rpm_med()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->rpm_med(), output);
  }

  // required int32 tmp_freio_motor = 16;
  if (has_tmp_freio_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tmp_freio_motor(), output);
  }

  // required int32 uso_embreagem_km = 17;
  if (has_uso_embreagem_km()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->uso_embreagem_km(), output);
  }

  // required int32 uso_freio_km = 18;
  if (has_uso_freio_km()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->uso_freio_km(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_delta_telemetria)
}

::google::protobuf::uint8* equip_delta_telemetria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_delta_telemetria)
  // required int32 versao = 1;
  if (has_versao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->versao(), target);
  }

  // required int32 dt_fx_azul = 2;
  if (has_dt_fx_azul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dt_fx_azul(), target);
  }

  // required int32 tipo = 3;
  if (has_tipo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tipo(), target);
  }

  // required int32 dt_fx_vermelho = 4;
  if (has_dt_fx_vermelho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dt_fx_vermelho(), target);
  }

  // required int32 vel_max = 5;
  if (has_vel_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vel_max(), target);
  }

  // required int32 dt_fx_amarelo = 6;
  if (has_dt_fx_amarelo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dt_fx_amarelo(), target);
  }

  // required int32 vel_media = 7;
  if (has_vel_media()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vel_media(), target);
  }

  // required int32 dt_odometro = 8;
  if (has_dt_odometro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dt_odometro(), target);
  }

  // required int32 dt_intervalo = 9;
  if (has_dt_intervalo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dt_intervalo(), target);
  }

  // optional int32 dt_motor_giro = 10;
  if (has_dt_motor_giro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dt_motor_giro(), target);
  }

  // required int32 dt_fx_verde = 11;
  if (has_dt_fx_verde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dt_fx_verde(), target);
  }

  // required int32 dt_movimento = 12;
  if (has_dt_movimento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dt_movimento(), target);
  }

  // required int32 dt_parado = 13;
  if (has_dt_parado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dt_parado(), target);
  }

  // required int32 rpm_max = 14;
  if (has_rpm_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rpm_max(), target);
  }

  // required int32 rpm_med = 15;
  if (has_rpm_med()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->rpm_med(), target);
  }

  // required int32 tmp_freio_motor = 16;
  if (has_tmp_freio_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tmp_freio_motor(), target);
  }

  // required int32 uso_embreagem_km = 17;
  if (has_uso_embreagem_km()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->uso_embreagem_km(), target);
  }

  // required int32 uso_freio_km = 18;
  if (has_uso_freio_km()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->uso_freio_km(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_delta_telemetria)
  return target;
}

int equip_delta_telemetria::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_versao()) {
    // required int32 versao = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->versao());
  }

  if (has_dt_fx_azul()) {
    // required int32 dt_fx_azul = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_azul());
  }

  if (has_tipo()) {
    // required int32 tipo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tipo());
  }

  if (has_dt_fx_vermelho()) {
    // required int32 dt_fx_vermelho = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_vermelho());
  }

  if (has_vel_max()) {
    // required int32 vel_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vel_max());
  }

  if (has_dt_fx_amarelo()) {
    // required int32 dt_fx_amarelo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_amarelo());
  }

  if (has_vel_media()) {
    // required int32 vel_media = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vel_media());
  }

  if (has_dt_odometro()) {
    // required int32 dt_odometro = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_odometro());
  }

  if (has_dt_intervalo()) {
    // required int32 dt_intervalo = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_intervalo());
  }

  if (has_dt_fx_verde()) {
    // required int32 dt_fx_verde = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_verde());
  }

  if (has_dt_movimento()) {
    // required int32 dt_movimento = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_movimento());
  }

  if (has_dt_parado()) {
    // required int32 dt_parado = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_parado());
  }

  if (has_rpm_max()) {
    // required int32 rpm_max = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpm_max());
  }

  if (has_rpm_med()) {
    // required int32 rpm_med = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpm_med());
  }

  if (has_tmp_freio_motor()) {
    // required int32 tmp_freio_motor = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tmp_freio_motor());
  }

  if (has_uso_embreagem_km()) {
    // required int32 uso_embreagem_km = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uso_embreagem_km());
  }

  if (has_uso_freio_km()) {
    // required int32 uso_freio_km = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uso_freio_km());
  }

  return total_size;
}
int equip_delta_telemetria::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0003fdff) ^ 0x0003fdff) == 0) {  // All required fields are present.
    // required int32 versao = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->versao());

    // required int32 dt_fx_azul = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_azul());

    // required int32 tipo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tipo());

    // required int32 dt_fx_vermelho = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_vermelho());

    // required int32 vel_max = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vel_max());

    // required int32 dt_fx_amarelo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_amarelo());

    // required int32 vel_media = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vel_media());

    // required int32 dt_odometro = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_odometro());

    // required int32 dt_intervalo = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_intervalo());

    // required int32 dt_fx_verde = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_fx_verde());

    // required int32 dt_movimento = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_movimento());

    // required int32 dt_parado = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_parado());

    // required int32 rpm_max = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpm_max());

    // required int32 rpm_med = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpm_med());

    // required int32 tmp_freio_motor = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tmp_freio_motor());

    // required int32 uso_embreagem_km = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uso_embreagem_km());

    // required int32 uso_freio_km = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uso_freio_km());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 dt_motor_giro = 10;
  if (has_dt_motor_giro()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dt_motor_giro());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_delta_telemetria::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_delta_telemetria* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_delta_telemetria>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_delta_telemetria::MergeFrom(const equip_delta_telemetria& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_versao()) {
      set_versao(from.versao());
    }
    if (from.has_dt_fx_azul()) {
      set_dt_fx_azul(from.dt_fx_azul());
    }
    if (from.has_tipo()) {
      set_tipo(from.tipo());
    }
    if (from.has_dt_fx_vermelho()) {
      set_dt_fx_vermelho(from.dt_fx_vermelho());
    }
    if (from.has_vel_max()) {
      set_vel_max(from.vel_max());
    }
    if (from.has_dt_fx_amarelo()) {
      set_dt_fx_amarelo(from.dt_fx_amarelo());
    }
    if (from.has_vel_media()) {
      set_vel_media(from.vel_media());
    }
    if (from.has_dt_odometro()) {
      set_dt_odometro(from.dt_odometro());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dt_intervalo()) {
      set_dt_intervalo(from.dt_intervalo());
    }
    if (from.has_dt_motor_giro()) {
      set_dt_motor_giro(from.dt_motor_giro());
    }
    if (from.has_dt_fx_verde()) {
      set_dt_fx_verde(from.dt_fx_verde());
    }
    if (from.has_dt_movimento()) {
      set_dt_movimento(from.dt_movimento());
    }
    if (from.has_dt_parado()) {
      set_dt_parado(from.dt_parado());
    }
    if (from.has_rpm_max()) {
      set_rpm_max(from.rpm_max());
    }
    if (from.has_rpm_med()) {
      set_rpm_med(from.rpm_med());
    }
    if (from.has_tmp_freio_motor()) {
      set_tmp_freio_motor(from.tmp_freio_motor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_uso_embreagem_km()) {
      set_uso_embreagem_km(from.uso_embreagem_km());
    }
    if (from.has_uso_freio_km()) {
      set_uso_freio_km(from.uso_freio_km());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_delta_telemetria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_delta_telemetria::CopyFrom(const equip_delta_telemetria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_delta_telemetria::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003fdff) != 0x0003fdff) return false;

  return true;
}

void equip_delta_telemetria::Swap(equip_delta_telemetria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_delta_telemetria::InternalSwap(equip_delta_telemetria* other) {
  std::swap(versao_, other->versao_);
  std::swap(dt_fx_azul_, other->dt_fx_azul_);
  std::swap(tipo_, other->tipo_);
  std::swap(dt_fx_vermelho_, other->dt_fx_vermelho_);
  std::swap(vel_max_, other->vel_max_);
  std::swap(dt_fx_amarelo_, other->dt_fx_amarelo_);
  std::swap(vel_media_, other->vel_media_);
  std::swap(dt_odometro_, other->dt_odometro_);
  std::swap(dt_intervalo_, other->dt_intervalo_);
  std::swap(dt_motor_giro_, other->dt_motor_giro_);
  std::swap(dt_fx_verde_, other->dt_fx_verde_);
  std::swap(dt_movimento_, other->dt_movimento_);
  std::swap(dt_parado_, other->dt_parado_);
  std::swap(rpm_max_, other->rpm_max_);
  std::swap(rpm_med_, other->rpm_med_);
  std::swap(tmp_freio_motor_, other->tmp_freio_motor_);
  std::swap(uso_embreagem_km_, other->uso_embreagem_km_);
  std::swap(uso_freio_km_, other->uso_freio_km_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_delta_telemetria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_delta_telemetria_descriptor_;
  metadata.reflection = equip_delta_telemetria_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_delta_telemetria

// required int32 versao = 1;
bool equip_delta_telemetria::has_versao() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_delta_telemetria::set_has_versao() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_delta_telemetria::clear_has_versao() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_delta_telemetria::clear_versao() {
  versao_ = 0;
  clear_has_versao();
}
 ::google::protobuf::int32 equip_delta_telemetria::versao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.versao)
  return versao_;
}
 void equip_delta_telemetria::set_versao(::google::protobuf::int32 value) {
  set_has_versao();
  versao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.versao)
}

// required int32 dt_fx_azul = 2;
bool equip_delta_telemetria::has_dt_fx_azul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_delta_telemetria::set_has_dt_fx_azul() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_delta_telemetria::clear_has_dt_fx_azul() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_delta_telemetria::clear_dt_fx_azul() {
  dt_fx_azul_ = 0;
  clear_has_dt_fx_azul();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_fx_azul() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_fx_azul)
  return dt_fx_azul_;
}
 void equip_delta_telemetria::set_dt_fx_azul(::google::protobuf::int32 value) {
  set_has_dt_fx_azul();
  dt_fx_azul_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_fx_azul)
}

// required int32 tipo = 3;
bool equip_delta_telemetria::has_tipo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void equip_delta_telemetria::set_has_tipo() {
  _has_bits_[0] |= 0x00000004u;
}
void equip_delta_telemetria::clear_has_tipo() {
  _has_bits_[0] &= ~0x00000004u;
}
void equip_delta_telemetria::clear_tipo() {
  tipo_ = 0;
  clear_has_tipo();
}
 ::google::protobuf::int32 equip_delta_telemetria::tipo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.tipo)
  return tipo_;
}
 void equip_delta_telemetria::set_tipo(::google::protobuf::int32 value) {
  set_has_tipo();
  tipo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.tipo)
}

// required int32 dt_fx_vermelho = 4;
bool equip_delta_telemetria::has_dt_fx_vermelho() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void equip_delta_telemetria::set_has_dt_fx_vermelho() {
  _has_bits_[0] |= 0x00000008u;
}
void equip_delta_telemetria::clear_has_dt_fx_vermelho() {
  _has_bits_[0] &= ~0x00000008u;
}
void equip_delta_telemetria::clear_dt_fx_vermelho() {
  dt_fx_vermelho_ = 0;
  clear_has_dt_fx_vermelho();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_fx_vermelho() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_fx_vermelho)
  return dt_fx_vermelho_;
}
 void equip_delta_telemetria::set_dt_fx_vermelho(::google::protobuf::int32 value) {
  set_has_dt_fx_vermelho();
  dt_fx_vermelho_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_fx_vermelho)
}

// required int32 vel_max = 5;
bool equip_delta_telemetria::has_vel_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void equip_delta_telemetria::set_has_vel_max() {
  _has_bits_[0] |= 0x00000010u;
}
void equip_delta_telemetria::clear_has_vel_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void equip_delta_telemetria::clear_vel_max() {
  vel_max_ = 0;
  clear_has_vel_max();
}
 ::google::protobuf::int32 equip_delta_telemetria::vel_max() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.vel_max)
  return vel_max_;
}
 void equip_delta_telemetria::set_vel_max(::google::protobuf::int32 value) {
  set_has_vel_max();
  vel_max_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.vel_max)
}

// required int32 dt_fx_amarelo = 6;
bool equip_delta_telemetria::has_dt_fx_amarelo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void equip_delta_telemetria::set_has_dt_fx_amarelo() {
  _has_bits_[0] |= 0x00000020u;
}
void equip_delta_telemetria::clear_has_dt_fx_amarelo() {
  _has_bits_[0] &= ~0x00000020u;
}
void equip_delta_telemetria::clear_dt_fx_amarelo() {
  dt_fx_amarelo_ = 0;
  clear_has_dt_fx_amarelo();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_fx_amarelo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_fx_amarelo)
  return dt_fx_amarelo_;
}
 void equip_delta_telemetria::set_dt_fx_amarelo(::google::protobuf::int32 value) {
  set_has_dt_fx_amarelo();
  dt_fx_amarelo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_fx_amarelo)
}

// required int32 vel_media = 7;
bool equip_delta_telemetria::has_vel_media() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void equip_delta_telemetria::set_has_vel_media() {
  _has_bits_[0] |= 0x00000040u;
}
void equip_delta_telemetria::clear_has_vel_media() {
  _has_bits_[0] &= ~0x00000040u;
}
void equip_delta_telemetria::clear_vel_media() {
  vel_media_ = 0;
  clear_has_vel_media();
}
 ::google::protobuf::int32 equip_delta_telemetria::vel_media() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.vel_media)
  return vel_media_;
}
 void equip_delta_telemetria::set_vel_media(::google::protobuf::int32 value) {
  set_has_vel_media();
  vel_media_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.vel_media)
}

// required int32 dt_odometro = 8;
bool equip_delta_telemetria::has_dt_odometro() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void equip_delta_telemetria::set_has_dt_odometro() {
  _has_bits_[0] |= 0x00000080u;
}
void equip_delta_telemetria::clear_has_dt_odometro() {
  _has_bits_[0] &= ~0x00000080u;
}
void equip_delta_telemetria::clear_dt_odometro() {
  dt_odometro_ = 0;
  clear_has_dt_odometro();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_odometro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_odometro)
  return dt_odometro_;
}
 void equip_delta_telemetria::set_dt_odometro(::google::protobuf::int32 value) {
  set_has_dt_odometro();
  dt_odometro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_odometro)
}

// required int32 dt_intervalo = 9;
bool equip_delta_telemetria::has_dt_intervalo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void equip_delta_telemetria::set_has_dt_intervalo() {
  _has_bits_[0] |= 0x00000100u;
}
void equip_delta_telemetria::clear_has_dt_intervalo() {
  _has_bits_[0] &= ~0x00000100u;
}
void equip_delta_telemetria::clear_dt_intervalo() {
  dt_intervalo_ = 0;
  clear_has_dt_intervalo();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_intervalo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_intervalo)
  return dt_intervalo_;
}
 void equip_delta_telemetria::set_dt_intervalo(::google::protobuf::int32 value) {
  set_has_dt_intervalo();
  dt_intervalo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_intervalo)
}

// optional int32 dt_motor_giro = 10;
bool equip_delta_telemetria::has_dt_motor_giro() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void equip_delta_telemetria::set_has_dt_motor_giro() {
  _has_bits_[0] |= 0x00000200u;
}
void equip_delta_telemetria::clear_has_dt_motor_giro() {
  _has_bits_[0] &= ~0x00000200u;
}
void equip_delta_telemetria::clear_dt_motor_giro() {
  dt_motor_giro_ = 0;
  clear_has_dt_motor_giro();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_motor_giro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_motor_giro)
  return dt_motor_giro_;
}
 void equip_delta_telemetria::set_dt_motor_giro(::google::protobuf::int32 value) {
  set_has_dt_motor_giro();
  dt_motor_giro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_motor_giro)
}

// required int32 dt_fx_verde = 11;
bool equip_delta_telemetria::has_dt_fx_verde() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void equip_delta_telemetria::set_has_dt_fx_verde() {
  _has_bits_[0] |= 0x00000400u;
}
void equip_delta_telemetria::clear_has_dt_fx_verde() {
  _has_bits_[0] &= ~0x00000400u;
}
void equip_delta_telemetria::clear_dt_fx_verde() {
  dt_fx_verde_ = 0;
  clear_has_dt_fx_verde();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_fx_verde() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_fx_verde)
  return dt_fx_verde_;
}
 void equip_delta_telemetria::set_dt_fx_verde(::google::protobuf::int32 value) {
  set_has_dt_fx_verde();
  dt_fx_verde_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_fx_verde)
}

// required int32 dt_movimento = 12;
bool equip_delta_telemetria::has_dt_movimento() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void equip_delta_telemetria::set_has_dt_movimento() {
  _has_bits_[0] |= 0x00000800u;
}
void equip_delta_telemetria::clear_has_dt_movimento() {
  _has_bits_[0] &= ~0x00000800u;
}
void equip_delta_telemetria::clear_dt_movimento() {
  dt_movimento_ = 0;
  clear_has_dt_movimento();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_movimento() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_movimento)
  return dt_movimento_;
}
 void equip_delta_telemetria::set_dt_movimento(::google::protobuf::int32 value) {
  set_has_dt_movimento();
  dt_movimento_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_movimento)
}

// required int32 dt_parado = 13;
bool equip_delta_telemetria::has_dt_parado() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void equip_delta_telemetria::set_has_dt_parado() {
  _has_bits_[0] |= 0x00001000u;
}
void equip_delta_telemetria::clear_has_dt_parado() {
  _has_bits_[0] &= ~0x00001000u;
}
void equip_delta_telemetria::clear_dt_parado() {
  dt_parado_ = 0;
  clear_has_dt_parado();
}
 ::google::protobuf::int32 equip_delta_telemetria::dt_parado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.dt_parado)
  return dt_parado_;
}
 void equip_delta_telemetria::set_dt_parado(::google::protobuf::int32 value) {
  set_has_dt_parado();
  dt_parado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.dt_parado)
}

// required int32 rpm_max = 14;
bool equip_delta_telemetria::has_rpm_max() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void equip_delta_telemetria::set_has_rpm_max() {
  _has_bits_[0] |= 0x00002000u;
}
void equip_delta_telemetria::clear_has_rpm_max() {
  _has_bits_[0] &= ~0x00002000u;
}
void equip_delta_telemetria::clear_rpm_max() {
  rpm_max_ = 0;
  clear_has_rpm_max();
}
 ::google::protobuf::int32 equip_delta_telemetria::rpm_max() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.rpm_max)
  return rpm_max_;
}
 void equip_delta_telemetria::set_rpm_max(::google::protobuf::int32 value) {
  set_has_rpm_max();
  rpm_max_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.rpm_max)
}

// required int32 rpm_med = 15;
bool equip_delta_telemetria::has_rpm_med() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void equip_delta_telemetria::set_has_rpm_med() {
  _has_bits_[0] |= 0x00004000u;
}
void equip_delta_telemetria::clear_has_rpm_med() {
  _has_bits_[0] &= ~0x00004000u;
}
void equip_delta_telemetria::clear_rpm_med() {
  rpm_med_ = 0;
  clear_has_rpm_med();
}
 ::google::protobuf::int32 equip_delta_telemetria::rpm_med() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.rpm_med)
  return rpm_med_;
}
 void equip_delta_telemetria::set_rpm_med(::google::protobuf::int32 value) {
  set_has_rpm_med();
  rpm_med_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.rpm_med)
}

// required int32 tmp_freio_motor = 16;
bool equip_delta_telemetria::has_tmp_freio_motor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void equip_delta_telemetria::set_has_tmp_freio_motor() {
  _has_bits_[0] |= 0x00008000u;
}
void equip_delta_telemetria::clear_has_tmp_freio_motor() {
  _has_bits_[0] &= ~0x00008000u;
}
void equip_delta_telemetria::clear_tmp_freio_motor() {
  tmp_freio_motor_ = 0;
  clear_has_tmp_freio_motor();
}
 ::google::protobuf::int32 equip_delta_telemetria::tmp_freio_motor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.tmp_freio_motor)
  return tmp_freio_motor_;
}
 void equip_delta_telemetria::set_tmp_freio_motor(::google::protobuf::int32 value) {
  set_has_tmp_freio_motor();
  tmp_freio_motor_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.tmp_freio_motor)
}

// required int32 uso_embreagem_km = 17;
bool equip_delta_telemetria::has_uso_embreagem_km() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void equip_delta_telemetria::set_has_uso_embreagem_km() {
  _has_bits_[0] |= 0x00010000u;
}
void equip_delta_telemetria::clear_has_uso_embreagem_km() {
  _has_bits_[0] &= ~0x00010000u;
}
void equip_delta_telemetria::clear_uso_embreagem_km() {
  uso_embreagem_km_ = 0;
  clear_has_uso_embreagem_km();
}
 ::google::protobuf::int32 equip_delta_telemetria::uso_embreagem_km() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.uso_embreagem_km)
  return uso_embreagem_km_;
}
 void equip_delta_telemetria::set_uso_embreagem_km(::google::protobuf::int32 value) {
  set_has_uso_embreagem_km();
  uso_embreagem_km_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.uso_embreagem_km)
}

// required int32 uso_freio_km = 18;
bool equip_delta_telemetria::has_uso_freio_km() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void equip_delta_telemetria::set_has_uso_freio_km() {
  _has_bits_[0] |= 0x00020000u;
}
void equip_delta_telemetria::clear_has_uso_freio_km() {
  _has_bits_[0] &= ~0x00020000u;
}
void equip_delta_telemetria::clear_uso_freio_km() {
  uso_freio_km_ = 0;
  clear_has_uso_freio_km();
}
 ::google::protobuf::int32 equip_delta_telemetria::uso_freio_km() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_delta_telemetria.uso_freio_km)
  return uso_freio_km_;
}
 void equip_delta_telemetria::set_uso_freio_km(::google::protobuf::int32 value) {
  set_has_uso_freio_km();
  uso_freio_km_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_delta_telemetria.uso_freio_km)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_evento_telemetria::kIdentificadorFieldNumber;
const int equip_evento_telemetria::kHoriFxAzulFieldNumber;
const int equip_evento_telemetria::kHoriFxAmarelaFieldNumber;
const int equip_evento_telemetria::kHoriFxVerdeFieldNumber;
const int equip_evento_telemetria::kHoriFxVermelhaFieldNumber;
const int equip_evento_telemetria::kHoriMotorLigadoFieldNumber;
const int equip_evento_telemetria::kHoriVeiParadoFieldNumber;
const int equip_evento_telemetria::kHoriVeiMovimentoFieldNumber;
const int equip_evento_telemetria::kHoriVelKmhrFieldNumber;
const int equip_evento_telemetria::kHoriDistancia100FieldNumber;
const int equip_evento_telemetria::kEsPsiOleoFieldNumber;
const int equip_evento_telemetria::kEsEmbreagemFieldNumber;
const int equip_evento_telemetria::kEsFreioFieldNumber;
const int equip_evento_telemetria::kEsLimpadorParabrisaFieldNumber;
const int equip_evento_telemetria::kEsCxMarchaFieldNumber;
const int equip_evento_telemetria::kEsFreioMotorFieldNumber;
const int equip_evento_telemetria::kEsSaidaFetFieldNumber;
const int equip_evento_telemetria::kEsA1FieldNumber;
const int equip_evento_telemetria::kEsA2FieldNumber;
const int equip_evento_telemetria::kEsA3FieldNumber;
const int equip_evento_telemetria::kEsIdEventoPercursoFieldNumber;
const int equip_evento_telemetria::kEsPctEventoFieldNumber;
const int equip_evento_telemetria::kEvVelMaxAlcancadaFieldNumber;
const int equip_evento_telemetria::kEvVelMediaFieldNumber;
const int equip_evento_telemetria::kEvRotMaximaFieldNumber;
const int equip_evento_telemetria::kEvEmbreKmrodadoFieldNumber;
const int equip_evento_telemetria::kEvFreioKmrodadoFieldNumber;
const int equip_evento_telemetria::kEvTempoFreiomotorFieldNumber;
const int equip_evento_telemetria::kEvVelLibEmbreFieldNumber;
const int equip_evento_telemetria::kEvRotEmbreFieldNumber;
const int equip_evento_telemetria::kEvTempoDuracaoFieldNumber;
const int equip_evento_telemetria::kEvVelReferenciaFieldNumber;
const int equip_evento_telemetria::kEvVelInicialFieldNumber;
const int equip_evento_telemetria::kEvVelFinalFieldNumber;
const int equip_evento_telemetria::kEvVelMaxEventoFieldNumber;
const int equip_evento_telemetria::kEvTempMax01VFieldNumber;
const int equip_evento_telemetria::kEvTensao01VFieldNumber;
const int equip_evento_telemetria::kEvRotPermitidoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_evento_telemetria::equip_evento_telemetria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_evento_telemetria)
}

void equip_evento_telemetria::InitAsDefaultInstance() {
}

equip_evento_telemetria::equip_evento_telemetria(const equip_evento_telemetria& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_evento_telemetria)
}

void equip_evento_telemetria::SharedCtor() {
  _cached_size_ = 0;
  identificador_ = 0;
  hori_fx_azul_ = 0;
  hori_fx_amarela_ = 0;
  hori_fx_verde_ = 0;
  hori_fx_vermelha_ = 0;
  hori_motor_ligado_ = 0;
  hori_vei_parado_ = 0;
  hori_vei_movimento_ = 0;
  hori_vel_kmhr_ = 0;
  hori_distancia_100_ = 0;
  es_psi_oleo_ = 0;
  es_embreagem_ = 0;
  es_freio_ = 0;
  es_limpador_parabrisa_ = 0;
  es_cx_marcha_ = 0;
  es_freio_motor_ = 0;
  es_saida_fet_ = 0;
  es_a1_ = 0;
  es_a2_ = 0;
  es_a3_ = 0;
  es_id_evento_percurso_ = 0;
  es_pct_evento_ = 0;
  ev_vel_max_alcancada_ = 0;
  ev_vel_media_ = 0;
  ev_rot_maxima_ = 0;
  ev_embre_kmrodado_ = 0;
  ev_freio_kmrodado_ = 0;
  ev_tempo_freiomotor_ = 0;
  ev_vel_lib_embre_ = 0;
  ev_rot_embre_ = 0;
  ev_tempo_duracao_ = 0;
  ev_vel_referencia_ = 0;
  ev_vel_inicial_ = 0;
  ev_vel_final_ = 0;
  ev_vel_max_evento_ = 0;
  ev_temp_max_01v_ = 0;
  ev_tensao_01v_ = 0;
  ev_rot_permitido_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_evento_telemetria::~equip_evento_telemetria() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_evento_telemetria)
  SharedDtor();
}

void equip_evento_telemetria::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_evento_telemetria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_evento_telemetria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_evento_telemetria_descriptor_;
}

const equip_evento_telemetria& equip_evento_telemetria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_evento_telemetria* equip_evento_telemetria::default_instance_ = NULL;

equip_evento_telemetria* equip_evento_telemetria::New(::google::protobuf::Arena* arena) const {
  equip_evento_telemetria* n = new equip_evento_telemetria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_evento_telemetria::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_evento_telemetria*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(identificador_, hori_vei_movimento_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(hori_vel_kmhr_, es_freio_motor_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(es_saida_fet_, ev_vel_media_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(ev_rot_maxima_, ev_vel_referencia_);
  }
  if (_has_bits_[32 / 32] & 63u) {
    ZR_(ev_vel_inicial_, ev_rot_permitido_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_evento_telemetria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_evento_telemetria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 identificador = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identificador_)));
          set_has_identificador();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hori_fx_azul;
        break;
      }

      // optional int32 hori_fx_azul = 2;
      case 2: {
        if (tag == 16) {
         parse_hori_fx_azul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_fx_azul_)));
          set_has_hori_fx_azul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hori_fx_amarela;
        break;
      }

      // optional int32 hori_fx_amarela = 3;
      case 3: {
        if (tag == 24) {
         parse_hori_fx_amarela:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_fx_amarela_)));
          set_has_hori_fx_amarela();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hori_fx_verde;
        break;
      }

      // optional int32 hori_fx_verde = 4;
      case 4: {
        if (tag == 32) {
         parse_hori_fx_verde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_fx_verde_)));
          set_has_hori_fx_verde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hori_fx_vermelha;
        break;
      }

      // optional int32 hori_fx_vermelha = 5;
      case 5: {
        if (tag == 40) {
         parse_hori_fx_vermelha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_fx_vermelha_)));
          set_has_hori_fx_vermelha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hori_motor_ligado;
        break;
      }

      // optional int32 hori_motor_ligado = 6;
      case 6: {
        if (tag == 48) {
         parse_hori_motor_ligado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_motor_ligado_)));
          set_has_hori_motor_ligado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hori_vei_parado;
        break;
      }

      // optional int32 hori_vei_parado = 7;
      case 7: {
        if (tag == 56) {
         parse_hori_vei_parado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_vei_parado_)));
          set_has_hori_vei_parado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hori_vei_movimento;
        break;
      }

      // optional int32 hori_vei_movimento = 8;
      case 8: {
        if (tag == 64) {
         parse_hori_vei_movimento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_vei_movimento_)));
          set_has_hori_vei_movimento();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hori_vel_kmhr;
        break;
      }

      // optional int32 hori_vel_kmhr = 9;
      case 9: {
        if (tag == 72) {
         parse_hori_vel_kmhr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_vel_kmhr_)));
          set_has_hori_vel_kmhr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hori_distancia_100;
        break;
      }

      // optional int32 hori_distancia_100 = 10;
      case 10: {
        if (tag == 80) {
         parse_hori_distancia_100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hori_distancia_100_)));
          set_has_hori_distancia_100();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_es_psi_oleo;
        break;
      }

      // optional int32 es_psi_oleo = 11;
      case 11: {
        if (tag == 88) {
         parse_es_psi_oleo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_psi_oleo_)));
          set_has_es_psi_oleo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_es_embreagem;
        break;
      }

      // optional int32 es_embreagem = 12;
      case 12: {
        if (tag == 96) {
         parse_es_embreagem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_embreagem_)));
          set_has_es_embreagem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_es_freio;
        break;
      }

      // optional int32 es_freio = 13;
      case 13: {
        if (tag == 104) {
         parse_es_freio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_freio_)));
          set_has_es_freio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_es_limpador_parabrisa;
        break;
      }

      // optional int32 es_limpador_parabrisa = 14;
      case 14: {
        if (tag == 112) {
         parse_es_limpador_parabrisa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_limpador_parabrisa_)));
          set_has_es_limpador_parabrisa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_es_cx_marcha;
        break;
      }

      // optional int32 es_cx_marcha = 15;
      case 15: {
        if (tag == 120) {
         parse_es_cx_marcha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_cx_marcha_)));
          set_has_es_cx_marcha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_es_freio_motor;
        break;
      }

      // optional int32 es_freio_motor = 16;
      case 16: {
        if (tag == 128) {
         parse_es_freio_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_freio_motor_)));
          set_has_es_freio_motor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_es_saida_fet;
        break;
      }

      // optional int32 es_saida_fet = 17;
      case 17: {
        if (tag == 136) {
         parse_es_saida_fet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_saida_fet_)));
          set_has_es_saida_fet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_es_a1;
        break;
      }

      // optional int32 es_a1 = 18;
      case 18: {
        if (tag == 144) {
         parse_es_a1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_a1_)));
          set_has_es_a1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_es_a2;
        break;
      }

      // optional int32 es_a2 = 19;
      case 19: {
        if (tag == 152) {
         parse_es_a2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_a2_)));
          set_has_es_a2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_es_a3;
        break;
      }

      // optional int32 es_a3 = 20;
      case 20: {
        if (tag == 160) {
         parse_es_a3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_a3_)));
          set_has_es_a3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_es_id_evento_percurso;
        break;
      }

      // optional int32 es_id_evento_percurso = 21;
      case 21: {
        if (tag == 168) {
         parse_es_id_evento_percurso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_id_evento_percurso_)));
          set_has_es_id_evento_percurso();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_es_pct_evento;
        break;
      }

      // optional int32 es_pct_evento = 22;
      case 22: {
        if (tag == 176) {
         parse_es_pct_evento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &es_pct_evento_)));
          set_has_es_pct_evento();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ev_vel_max_alcancada;
        break;
      }

      // optional int32 ev_vel_max_alcancada = 23;
      case 23: {
        if (tag == 184) {
         parse_ev_vel_max_alcancada:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_max_alcancada_)));
          set_has_ev_vel_max_alcancada();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_ev_vel_media;
        break;
      }

      // optional int32 ev_vel_media = 24;
      case 24: {
        if (tag == 192) {
         parse_ev_vel_media:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_media_)));
          set_has_ev_vel_media();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_ev_rot_maxima;
        break;
      }

      // optional int32 ev_rot_maxima = 25;
      case 25: {
        if (tag == 200) {
         parse_ev_rot_maxima:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_rot_maxima_)));
          set_has_ev_rot_maxima();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_ev_embre_kmrodado;
        break;
      }

      // optional int32 ev_embre_kmrodado = 26;
      case 26: {
        if (tag == 208) {
         parse_ev_embre_kmrodado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_embre_kmrodado_)));
          set_has_ev_embre_kmrodado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_ev_freio_kmrodado;
        break;
      }

      // optional int32 ev_freio_kmrodado = 27;
      case 27: {
        if (tag == 216) {
         parse_ev_freio_kmrodado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_freio_kmrodado_)));
          set_has_ev_freio_kmrodado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_ev_tempo_freiomotor;
        break;
      }

      // optional int32 ev_tempo_freiomotor = 28;
      case 28: {
        if (tag == 224) {
         parse_ev_tempo_freiomotor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_tempo_freiomotor_)));
          set_has_ev_tempo_freiomotor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_ev_vel_lib_embre;
        break;
      }

      // optional int32 ev_vel_lib_embre = 29;
      case 29: {
        if (tag == 232) {
         parse_ev_vel_lib_embre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_lib_embre_)));
          set_has_ev_vel_lib_embre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_ev_rot_embre;
        break;
      }

      // optional int32 ev_rot_embre = 30;
      case 30: {
        if (tag == 240) {
         parse_ev_rot_embre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_rot_embre_)));
          set_has_ev_rot_embre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_ev_tempo_duracao;
        break;
      }

      // optional int32 ev_tempo_duracao = 31;
      case 31: {
        if (tag == 248) {
         parse_ev_tempo_duracao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_tempo_duracao_)));
          set_has_ev_tempo_duracao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_ev_vel_referencia;
        break;
      }

      // optional int32 ev_vel_referencia = 32;
      case 32: {
        if (tag == 256) {
         parse_ev_vel_referencia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_referencia_)));
          set_has_ev_vel_referencia();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_ev_vel_inicial;
        break;
      }

      // optional int32 ev_vel_inicial = 33;
      case 33: {
        if (tag == 264) {
         parse_ev_vel_inicial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_inicial_)));
          set_has_ev_vel_inicial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_ev_vel_final;
        break;
      }

      // optional int32 ev_vel_final = 34;
      case 34: {
        if (tag == 272) {
         parse_ev_vel_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_final_)));
          set_has_ev_vel_final();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_ev_vel_max_evento;
        break;
      }

      // optional int32 ev_vel_max_evento = 35;
      case 35: {
        if (tag == 280) {
         parse_ev_vel_max_evento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_vel_max_evento_)));
          set_has_ev_vel_max_evento();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_ev_temp_max_01v;
        break;
      }

      // optional int32 ev_temp_max_01v = 36;
      case 36: {
        if (tag == 288) {
         parse_ev_temp_max_01v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_temp_max_01v_)));
          set_has_ev_temp_max_01v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_ev_tensao_01v;
        break;
      }

      // optional int32 ev_tensao_01v = 37;
      case 37: {
        if (tag == 296) {
         parse_ev_tensao_01v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_tensao_01v_)));
          set_has_ev_tensao_01v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_ev_rot_permitido;
        break;
      }

      // optional int32 ev_rot_permitido = 38;
      case 38: {
        if (tag == 304) {
         parse_ev_rot_permitido:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ev_rot_permitido_)));
          set_has_ev_rot_permitido();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_evento_telemetria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_evento_telemetria)
  return false;
#undef DO_
}

void equip_evento_telemetria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_evento_telemetria)
  // required int32 identificador = 1;
  if (has_identificador()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->identificador(), output);
  }

  // optional int32 hori_fx_azul = 2;
  if (has_hori_fx_azul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hori_fx_azul(), output);
  }

  // optional int32 hori_fx_amarela = 3;
  if (has_hori_fx_amarela()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hori_fx_amarela(), output);
  }

  // optional int32 hori_fx_verde = 4;
  if (has_hori_fx_verde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hori_fx_verde(), output);
  }

  // optional int32 hori_fx_vermelha = 5;
  if (has_hori_fx_vermelha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hori_fx_vermelha(), output);
  }

  // optional int32 hori_motor_ligado = 6;
  if (has_hori_motor_ligado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hori_motor_ligado(), output);
  }

  // optional int32 hori_vei_parado = 7;
  if (has_hori_vei_parado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hori_vei_parado(), output);
  }

  // optional int32 hori_vei_movimento = 8;
  if (has_hori_vei_movimento()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hori_vei_movimento(), output);
  }

  // optional int32 hori_vel_kmhr = 9;
  if (has_hori_vel_kmhr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hori_vel_kmhr(), output);
  }

  // optional int32 hori_distancia_100 = 10;
  if (has_hori_distancia_100()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hori_distancia_100(), output);
  }

  // optional int32 es_psi_oleo = 11;
  if (has_es_psi_oleo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->es_psi_oleo(), output);
  }

  // optional int32 es_embreagem = 12;
  if (has_es_embreagem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->es_embreagem(), output);
  }

  // optional int32 es_freio = 13;
  if (has_es_freio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->es_freio(), output);
  }

  // optional int32 es_limpador_parabrisa = 14;
  if (has_es_limpador_parabrisa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->es_limpador_parabrisa(), output);
  }

  // optional int32 es_cx_marcha = 15;
  if (has_es_cx_marcha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->es_cx_marcha(), output);
  }

  // optional int32 es_freio_motor = 16;
  if (has_es_freio_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->es_freio_motor(), output);
  }

  // optional int32 es_saida_fet = 17;
  if (has_es_saida_fet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->es_saida_fet(), output);
  }

  // optional int32 es_a1 = 18;
  if (has_es_a1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->es_a1(), output);
  }

  // optional int32 es_a2 = 19;
  if (has_es_a2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->es_a2(), output);
  }

  // optional int32 es_a3 = 20;
  if (has_es_a3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->es_a3(), output);
  }

  // optional int32 es_id_evento_percurso = 21;
  if (has_es_id_evento_percurso()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->es_id_evento_percurso(), output);
  }

  // optional int32 es_pct_evento = 22;
  if (has_es_pct_evento()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->es_pct_evento(), output);
  }

  // optional int32 ev_vel_max_alcancada = 23;
  if (has_ev_vel_max_alcancada()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ev_vel_max_alcancada(), output);
  }

  // optional int32 ev_vel_media = 24;
  if (has_ev_vel_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ev_vel_media(), output);
  }

  // optional int32 ev_rot_maxima = 25;
  if (has_ev_rot_maxima()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ev_rot_maxima(), output);
  }

  // optional int32 ev_embre_kmrodado = 26;
  if (has_ev_embre_kmrodado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ev_embre_kmrodado(), output);
  }

  // optional int32 ev_freio_kmrodado = 27;
  if (has_ev_freio_kmrodado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ev_freio_kmrodado(), output);
  }

  // optional int32 ev_tempo_freiomotor = 28;
  if (has_ev_tempo_freiomotor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ev_tempo_freiomotor(), output);
  }

  // optional int32 ev_vel_lib_embre = 29;
  if (has_ev_vel_lib_embre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->ev_vel_lib_embre(), output);
  }

  // optional int32 ev_rot_embre = 30;
  if (has_ev_rot_embre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->ev_rot_embre(), output);
  }

  // optional int32 ev_tempo_duracao = 31;
  if (has_ev_tempo_duracao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->ev_tempo_duracao(), output);
  }

  // optional int32 ev_vel_referencia = 32;
  if (has_ev_vel_referencia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->ev_vel_referencia(), output);
  }

  // optional int32 ev_vel_inicial = 33;
  if (has_ev_vel_inicial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->ev_vel_inicial(), output);
  }

  // optional int32 ev_vel_final = 34;
  if (has_ev_vel_final()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ev_vel_final(), output);
  }

  // optional int32 ev_vel_max_evento = 35;
  if (has_ev_vel_max_evento()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ev_vel_max_evento(), output);
  }

  // optional int32 ev_temp_max_01v = 36;
  if (has_ev_temp_max_01v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->ev_temp_max_01v(), output);
  }

  // optional int32 ev_tensao_01v = 37;
  if (has_ev_tensao_01v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->ev_tensao_01v(), output);
  }

  // optional int32 ev_rot_permitido = 38;
  if (has_ev_rot_permitido()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->ev_rot_permitido(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_evento_telemetria)
}

::google::protobuf::uint8* equip_evento_telemetria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_evento_telemetria)
  // required int32 identificador = 1;
  if (has_identificador()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->identificador(), target);
  }

  // optional int32 hori_fx_azul = 2;
  if (has_hori_fx_azul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hori_fx_azul(), target);
  }

  // optional int32 hori_fx_amarela = 3;
  if (has_hori_fx_amarela()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hori_fx_amarela(), target);
  }

  // optional int32 hori_fx_verde = 4;
  if (has_hori_fx_verde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hori_fx_verde(), target);
  }

  // optional int32 hori_fx_vermelha = 5;
  if (has_hori_fx_vermelha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hori_fx_vermelha(), target);
  }

  // optional int32 hori_motor_ligado = 6;
  if (has_hori_motor_ligado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hori_motor_ligado(), target);
  }

  // optional int32 hori_vei_parado = 7;
  if (has_hori_vei_parado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hori_vei_parado(), target);
  }

  // optional int32 hori_vei_movimento = 8;
  if (has_hori_vei_movimento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hori_vei_movimento(), target);
  }

  // optional int32 hori_vel_kmhr = 9;
  if (has_hori_vel_kmhr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hori_vel_kmhr(), target);
  }

  // optional int32 hori_distancia_100 = 10;
  if (has_hori_distancia_100()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hori_distancia_100(), target);
  }

  // optional int32 es_psi_oleo = 11;
  if (has_es_psi_oleo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->es_psi_oleo(), target);
  }

  // optional int32 es_embreagem = 12;
  if (has_es_embreagem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->es_embreagem(), target);
  }

  // optional int32 es_freio = 13;
  if (has_es_freio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->es_freio(), target);
  }

  // optional int32 es_limpador_parabrisa = 14;
  if (has_es_limpador_parabrisa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->es_limpador_parabrisa(), target);
  }

  // optional int32 es_cx_marcha = 15;
  if (has_es_cx_marcha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->es_cx_marcha(), target);
  }

  // optional int32 es_freio_motor = 16;
  if (has_es_freio_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->es_freio_motor(), target);
  }

  // optional int32 es_saida_fet = 17;
  if (has_es_saida_fet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->es_saida_fet(), target);
  }

  // optional int32 es_a1 = 18;
  if (has_es_a1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->es_a1(), target);
  }

  // optional int32 es_a2 = 19;
  if (has_es_a2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->es_a2(), target);
  }

  // optional int32 es_a3 = 20;
  if (has_es_a3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->es_a3(), target);
  }

  // optional int32 es_id_evento_percurso = 21;
  if (has_es_id_evento_percurso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->es_id_evento_percurso(), target);
  }

  // optional int32 es_pct_evento = 22;
  if (has_es_pct_evento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->es_pct_evento(), target);
  }

  // optional int32 ev_vel_max_alcancada = 23;
  if (has_ev_vel_max_alcancada()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ev_vel_max_alcancada(), target);
  }

  // optional int32 ev_vel_media = 24;
  if (has_ev_vel_media()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ev_vel_media(), target);
  }

  // optional int32 ev_rot_maxima = 25;
  if (has_ev_rot_maxima()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ev_rot_maxima(), target);
  }

  // optional int32 ev_embre_kmrodado = 26;
  if (has_ev_embre_kmrodado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ev_embre_kmrodado(), target);
  }

  // optional int32 ev_freio_kmrodado = 27;
  if (has_ev_freio_kmrodado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ev_freio_kmrodado(), target);
  }

  // optional int32 ev_tempo_freiomotor = 28;
  if (has_ev_tempo_freiomotor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->ev_tempo_freiomotor(), target);
  }

  // optional int32 ev_vel_lib_embre = 29;
  if (has_ev_vel_lib_embre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->ev_vel_lib_embre(), target);
  }

  // optional int32 ev_rot_embre = 30;
  if (has_ev_rot_embre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->ev_rot_embre(), target);
  }

  // optional int32 ev_tempo_duracao = 31;
  if (has_ev_tempo_duracao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->ev_tempo_duracao(), target);
  }

  // optional int32 ev_vel_referencia = 32;
  if (has_ev_vel_referencia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->ev_vel_referencia(), target);
  }

  // optional int32 ev_vel_inicial = 33;
  if (has_ev_vel_inicial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->ev_vel_inicial(), target);
  }

  // optional int32 ev_vel_final = 34;
  if (has_ev_vel_final()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ev_vel_final(), target);
  }

  // optional int32 ev_vel_max_evento = 35;
  if (has_ev_vel_max_evento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ev_vel_max_evento(), target);
  }

  // optional int32 ev_temp_max_01v = 36;
  if (has_ev_temp_max_01v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->ev_temp_max_01v(), target);
  }

  // optional int32 ev_tensao_01v = 37;
  if (has_ev_tensao_01v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->ev_tensao_01v(), target);
  }

  // optional int32 ev_rot_permitido = 38;
  if (has_ev_rot_permitido()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->ev_rot_permitido(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_evento_telemetria)
  return target;
}

int equip_evento_telemetria::ByteSize() const {
  int total_size = 0;

  // required int32 identificador = 1;
  if (has_identificador()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->identificador());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 hori_fx_azul = 2;
    if (has_hori_fx_azul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_fx_azul());
    }

    // optional int32 hori_fx_amarela = 3;
    if (has_hori_fx_amarela()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_fx_amarela());
    }

    // optional int32 hori_fx_verde = 4;
    if (has_hori_fx_verde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_fx_verde());
    }

    // optional int32 hori_fx_vermelha = 5;
    if (has_hori_fx_vermelha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_fx_vermelha());
    }

    // optional int32 hori_motor_ligado = 6;
    if (has_hori_motor_ligado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_motor_ligado());
    }

    // optional int32 hori_vei_parado = 7;
    if (has_hori_vei_parado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_vei_parado());
    }

    // optional int32 hori_vei_movimento = 8;
    if (has_hori_vei_movimento()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_vei_movimento());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 hori_vel_kmhr = 9;
    if (has_hori_vel_kmhr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_vel_kmhr());
    }

    // optional int32 hori_distancia_100 = 10;
    if (has_hori_distancia_100()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hori_distancia_100());
    }

    // optional int32 es_psi_oleo = 11;
    if (has_es_psi_oleo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_psi_oleo());
    }

    // optional int32 es_embreagem = 12;
    if (has_es_embreagem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_embreagem());
    }

    // optional int32 es_freio = 13;
    if (has_es_freio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_freio());
    }

    // optional int32 es_limpador_parabrisa = 14;
    if (has_es_limpador_parabrisa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_limpador_parabrisa());
    }

    // optional int32 es_cx_marcha = 15;
    if (has_es_cx_marcha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_cx_marcha());
    }

    // optional int32 es_freio_motor = 16;
    if (has_es_freio_motor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_freio_motor());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 es_saida_fet = 17;
    if (has_es_saida_fet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_saida_fet());
    }

    // optional int32 es_a1 = 18;
    if (has_es_a1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_a1());
    }

    // optional int32 es_a2 = 19;
    if (has_es_a2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_a2());
    }

    // optional int32 es_a3 = 20;
    if (has_es_a3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_a3());
    }

    // optional int32 es_id_evento_percurso = 21;
    if (has_es_id_evento_percurso()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_id_evento_percurso());
    }

    // optional int32 es_pct_evento = 22;
    if (has_es_pct_evento()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->es_pct_evento());
    }

    // optional int32 ev_vel_max_alcancada = 23;
    if (has_ev_vel_max_alcancada()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_max_alcancada());
    }

    // optional int32 ev_vel_media = 24;
    if (has_ev_vel_media()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_media());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 ev_rot_maxima = 25;
    if (has_ev_rot_maxima()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_rot_maxima());
    }

    // optional int32 ev_embre_kmrodado = 26;
    if (has_ev_embre_kmrodado()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_embre_kmrodado());
    }

    // optional int32 ev_freio_kmrodado = 27;
    if (has_ev_freio_kmrodado()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_freio_kmrodado());
    }

    // optional int32 ev_tempo_freiomotor = 28;
    if (has_ev_tempo_freiomotor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_tempo_freiomotor());
    }

    // optional int32 ev_vel_lib_embre = 29;
    if (has_ev_vel_lib_embre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_lib_embre());
    }

    // optional int32 ev_rot_embre = 30;
    if (has_ev_rot_embre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_rot_embre());
    }

    // optional int32 ev_tempo_duracao = 31;
    if (has_ev_tempo_duracao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_tempo_duracao());
    }

    // optional int32 ev_vel_referencia = 32;
    if (has_ev_vel_referencia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_referencia());
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional int32 ev_vel_inicial = 33;
    if (has_ev_vel_inicial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_inicial());
    }

    // optional int32 ev_vel_final = 34;
    if (has_ev_vel_final()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_final());
    }

    // optional int32 ev_vel_max_evento = 35;
    if (has_ev_vel_max_evento()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_vel_max_evento());
    }

    // optional int32 ev_temp_max_01v = 36;
    if (has_ev_temp_max_01v()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_temp_max_01v());
    }

    // optional int32 ev_tensao_01v = 37;
    if (has_ev_tensao_01v()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_tensao_01v());
    }

    // optional int32 ev_rot_permitido = 38;
    if (has_ev_rot_permitido()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ev_rot_permitido());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_evento_telemetria::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_evento_telemetria* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_evento_telemetria>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_evento_telemetria::MergeFrom(const equip_evento_telemetria& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identificador()) {
      set_identificador(from.identificador());
    }
    if (from.has_hori_fx_azul()) {
      set_hori_fx_azul(from.hori_fx_azul());
    }
    if (from.has_hori_fx_amarela()) {
      set_hori_fx_amarela(from.hori_fx_amarela());
    }
    if (from.has_hori_fx_verde()) {
      set_hori_fx_verde(from.hori_fx_verde());
    }
    if (from.has_hori_fx_vermelha()) {
      set_hori_fx_vermelha(from.hori_fx_vermelha());
    }
    if (from.has_hori_motor_ligado()) {
      set_hori_motor_ligado(from.hori_motor_ligado());
    }
    if (from.has_hori_vei_parado()) {
      set_hori_vei_parado(from.hori_vei_parado());
    }
    if (from.has_hori_vei_movimento()) {
      set_hori_vei_movimento(from.hori_vei_movimento());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hori_vel_kmhr()) {
      set_hori_vel_kmhr(from.hori_vel_kmhr());
    }
    if (from.has_hori_distancia_100()) {
      set_hori_distancia_100(from.hori_distancia_100());
    }
    if (from.has_es_psi_oleo()) {
      set_es_psi_oleo(from.es_psi_oleo());
    }
    if (from.has_es_embreagem()) {
      set_es_embreagem(from.es_embreagem());
    }
    if (from.has_es_freio()) {
      set_es_freio(from.es_freio());
    }
    if (from.has_es_limpador_parabrisa()) {
      set_es_limpador_parabrisa(from.es_limpador_parabrisa());
    }
    if (from.has_es_cx_marcha()) {
      set_es_cx_marcha(from.es_cx_marcha());
    }
    if (from.has_es_freio_motor()) {
      set_es_freio_motor(from.es_freio_motor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_es_saida_fet()) {
      set_es_saida_fet(from.es_saida_fet());
    }
    if (from.has_es_a1()) {
      set_es_a1(from.es_a1());
    }
    if (from.has_es_a2()) {
      set_es_a2(from.es_a2());
    }
    if (from.has_es_a3()) {
      set_es_a3(from.es_a3());
    }
    if (from.has_es_id_evento_percurso()) {
      set_es_id_evento_percurso(from.es_id_evento_percurso());
    }
    if (from.has_es_pct_evento()) {
      set_es_pct_evento(from.es_pct_evento());
    }
    if (from.has_ev_vel_max_alcancada()) {
      set_ev_vel_max_alcancada(from.ev_vel_max_alcancada());
    }
    if (from.has_ev_vel_media()) {
      set_ev_vel_media(from.ev_vel_media());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ev_rot_maxima()) {
      set_ev_rot_maxima(from.ev_rot_maxima());
    }
    if (from.has_ev_embre_kmrodado()) {
      set_ev_embre_kmrodado(from.ev_embre_kmrodado());
    }
    if (from.has_ev_freio_kmrodado()) {
      set_ev_freio_kmrodado(from.ev_freio_kmrodado());
    }
    if (from.has_ev_tempo_freiomotor()) {
      set_ev_tempo_freiomotor(from.ev_tempo_freiomotor());
    }
    if (from.has_ev_vel_lib_embre()) {
      set_ev_vel_lib_embre(from.ev_vel_lib_embre());
    }
    if (from.has_ev_rot_embre()) {
      set_ev_rot_embre(from.ev_rot_embre());
    }
    if (from.has_ev_tempo_duracao()) {
      set_ev_tempo_duracao(from.ev_tempo_duracao());
    }
    if (from.has_ev_vel_referencia()) {
      set_ev_vel_referencia(from.ev_vel_referencia());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ev_vel_inicial()) {
      set_ev_vel_inicial(from.ev_vel_inicial());
    }
    if (from.has_ev_vel_final()) {
      set_ev_vel_final(from.ev_vel_final());
    }
    if (from.has_ev_vel_max_evento()) {
      set_ev_vel_max_evento(from.ev_vel_max_evento());
    }
    if (from.has_ev_temp_max_01v()) {
      set_ev_temp_max_01v(from.ev_temp_max_01v());
    }
    if (from.has_ev_tensao_01v()) {
      set_ev_tensao_01v(from.ev_tensao_01v());
    }
    if (from.has_ev_rot_permitido()) {
      set_ev_rot_permitido(from.ev_rot_permitido());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_evento_telemetria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_evento_telemetria::CopyFrom(const equip_evento_telemetria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_evento_telemetria::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void equip_evento_telemetria::Swap(equip_evento_telemetria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_evento_telemetria::InternalSwap(equip_evento_telemetria* other) {
  std::swap(identificador_, other->identificador_);
  std::swap(hori_fx_azul_, other->hori_fx_azul_);
  std::swap(hori_fx_amarela_, other->hori_fx_amarela_);
  std::swap(hori_fx_verde_, other->hori_fx_verde_);
  std::swap(hori_fx_vermelha_, other->hori_fx_vermelha_);
  std::swap(hori_motor_ligado_, other->hori_motor_ligado_);
  std::swap(hori_vei_parado_, other->hori_vei_parado_);
  std::swap(hori_vei_movimento_, other->hori_vei_movimento_);
  std::swap(hori_vel_kmhr_, other->hori_vel_kmhr_);
  std::swap(hori_distancia_100_, other->hori_distancia_100_);
  std::swap(es_psi_oleo_, other->es_psi_oleo_);
  std::swap(es_embreagem_, other->es_embreagem_);
  std::swap(es_freio_, other->es_freio_);
  std::swap(es_limpador_parabrisa_, other->es_limpador_parabrisa_);
  std::swap(es_cx_marcha_, other->es_cx_marcha_);
  std::swap(es_freio_motor_, other->es_freio_motor_);
  std::swap(es_saida_fet_, other->es_saida_fet_);
  std::swap(es_a1_, other->es_a1_);
  std::swap(es_a2_, other->es_a2_);
  std::swap(es_a3_, other->es_a3_);
  std::swap(es_id_evento_percurso_, other->es_id_evento_percurso_);
  std::swap(es_pct_evento_, other->es_pct_evento_);
  std::swap(ev_vel_max_alcancada_, other->ev_vel_max_alcancada_);
  std::swap(ev_vel_media_, other->ev_vel_media_);
  std::swap(ev_rot_maxima_, other->ev_rot_maxima_);
  std::swap(ev_embre_kmrodado_, other->ev_embre_kmrodado_);
  std::swap(ev_freio_kmrodado_, other->ev_freio_kmrodado_);
  std::swap(ev_tempo_freiomotor_, other->ev_tempo_freiomotor_);
  std::swap(ev_vel_lib_embre_, other->ev_vel_lib_embre_);
  std::swap(ev_rot_embre_, other->ev_rot_embre_);
  std::swap(ev_tempo_duracao_, other->ev_tempo_duracao_);
  std::swap(ev_vel_referencia_, other->ev_vel_referencia_);
  std::swap(ev_vel_inicial_, other->ev_vel_inicial_);
  std::swap(ev_vel_final_, other->ev_vel_final_);
  std::swap(ev_vel_max_evento_, other->ev_vel_max_evento_);
  std::swap(ev_temp_max_01v_, other->ev_temp_max_01v_);
  std::swap(ev_tensao_01v_, other->ev_tensao_01v_);
  std::swap(ev_rot_permitido_, other->ev_rot_permitido_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_evento_telemetria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_evento_telemetria_descriptor_;
  metadata.reflection = equip_evento_telemetria_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_evento_telemetria

// required int32 identificador = 1;
bool equip_evento_telemetria::has_identificador() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_evento_telemetria::set_has_identificador() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_evento_telemetria::clear_has_identificador() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_evento_telemetria::clear_identificador() {
  identificador_ = 0;
  clear_has_identificador();
}
 ::google::protobuf::int32 equip_evento_telemetria::identificador() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.identificador)
  return identificador_;
}
 void equip_evento_telemetria::set_identificador(::google::protobuf::int32 value) {
  set_has_identificador();
  identificador_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.identificador)
}

// optional int32 hori_fx_azul = 2;
bool equip_evento_telemetria::has_hori_fx_azul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_evento_telemetria::set_has_hori_fx_azul() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_evento_telemetria::clear_has_hori_fx_azul() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_evento_telemetria::clear_hori_fx_azul() {
  hori_fx_azul_ = 0;
  clear_has_hori_fx_azul();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_fx_azul() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_fx_azul)
  return hori_fx_azul_;
}
 void equip_evento_telemetria::set_hori_fx_azul(::google::protobuf::int32 value) {
  set_has_hori_fx_azul();
  hori_fx_azul_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_fx_azul)
}

// optional int32 hori_fx_amarela = 3;
bool equip_evento_telemetria::has_hori_fx_amarela() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void equip_evento_telemetria::set_has_hori_fx_amarela() {
  _has_bits_[0] |= 0x00000004u;
}
void equip_evento_telemetria::clear_has_hori_fx_amarela() {
  _has_bits_[0] &= ~0x00000004u;
}
void equip_evento_telemetria::clear_hori_fx_amarela() {
  hori_fx_amarela_ = 0;
  clear_has_hori_fx_amarela();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_fx_amarela() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_fx_amarela)
  return hori_fx_amarela_;
}
 void equip_evento_telemetria::set_hori_fx_amarela(::google::protobuf::int32 value) {
  set_has_hori_fx_amarela();
  hori_fx_amarela_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_fx_amarela)
}

// optional int32 hori_fx_verde = 4;
bool equip_evento_telemetria::has_hori_fx_verde() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void equip_evento_telemetria::set_has_hori_fx_verde() {
  _has_bits_[0] |= 0x00000008u;
}
void equip_evento_telemetria::clear_has_hori_fx_verde() {
  _has_bits_[0] &= ~0x00000008u;
}
void equip_evento_telemetria::clear_hori_fx_verde() {
  hori_fx_verde_ = 0;
  clear_has_hori_fx_verde();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_fx_verde() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_fx_verde)
  return hori_fx_verde_;
}
 void equip_evento_telemetria::set_hori_fx_verde(::google::protobuf::int32 value) {
  set_has_hori_fx_verde();
  hori_fx_verde_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_fx_verde)
}

// optional int32 hori_fx_vermelha = 5;
bool equip_evento_telemetria::has_hori_fx_vermelha() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void equip_evento_telemetria::set_has_hori_fx_vermelha() {
  _has_bits_[0] |= 0x00000010u;
}
void equip_evento_telemetria::clear_has_hori_fx_vermelha() {
  _has_bits_[0] &= ~0x00000010u;
}
void equip_evento_telemetria::clear_hori_fx_vermelha() {
  hori_fx_vermelha_ = 0;
  clear_has_hori_fx_vermelha();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_fx_vermelha() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_fx_vermelha)
  return hori_fx_vermelha_;
}
 void equip_evento_telemetria::set_hori_fx_vermelha(::google::protobuf::int32 value) {
  set_has_hori_fx_vermelha();
  hori_fx_vermelha_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_fx_vermelha)
}

// optional int32 hori_motor_ligado = 6;
bool equip_evento_telemetria::has_hori_motor_ligado() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void equip_evento_telemetria::set_has_hori_motor_ligado() {
  _has_bits_[0] |= 0x00000020u;
}
void equip_evento_telemetria::clear_has_hori_motor_ligado() {
  _has_bits_[0] &= ~0x00000020u;
}
void equip_evento_telemetria::clear_hori_motor_ligado() {
  hori_motor_ligado_ = 0;
  clear_has_hori_motor_ligado();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_motor_ligado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_motor_ligado)
  return hori_motor_ligado_;
}
 void equip_evento_telemetria::set_hori_motor_ligado(::google::protobuf::int32 value) {
  set_has_hori_motor_ligado();
  hori_motor_ligado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_motor_ligado)
}

// optional int32 hori_vei_parado = 7;
bool equip_evento_telemetria::has_hori_vei_parado() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void equip_evento_telemetria::set_has_hori_vei_parado() {
  _has_bits_[0] |= 0x00000040u;
}
void equip_evento_telemetria::clear_has_hori_vei_parado() {
  _has_bits_[0] &= ~0x00000040u;
}
void equip_evento_telemetria::clear_hori_vei_parado() {
  hori_vei_parado_ = 0;
  clear_has_hori_vei_parado();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_vei_parado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_vei_parado)
  return hori_vei_parado_;
}
 void equip_evento_telemetria::set_hori_vei_parado(::google::protobuf::int32 value) {
  set_has_hori_vei_parado();
  hori_vei_parado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_vei_parado)
}

// optional int32 hori_vei_movimento = 8;
bool equip_evento_telemetria::has_hori_vei_movimento() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void equip_evento_telemetria::set_has_hori_vei_movimento() {
  _has_bits_[0] |= 0x00000080u;
}
void equip_evento_telemetria::clear_has_hori_vei_movimento() {
  _has_bits_[0] &= ~0x00000080u;
}
void equip_evento_telemetria::clear_hori_vei_movimento() {
  hori_vei_movimento_ = 0;
  clear_has_hori_vei_movimento();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_vei_movimento() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_vei_movimento)
  return hori_vei_movimento_;
}
 void equip_evento_telemetria::set_hori_vei_movimento(::google::protobuf::int32 value) {
  set_has_hori_vei_movimento();
  hori_vei_movimento_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_vei_movimento)
}

// optional int32 hori_vel_kmhr = 9;
bool equip_evento_telemetria::has_hori_vel_kmhr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void equip_evento_telemetria::set_has_hori_vel_kmhr() {
  _has_bits_[0] |= 0x00000100u;
}
void equip_evento_telemetria::clear_has_hori_vel_kmhr() {
  _has_bits_[0] &= ~0x00000100u;
}
void equip_evento_telemetria::clear_hori_vel_kmhr() {
  hori_vel_kmhr_ = 0;
  clear_has_hori_vel_kmhr();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_vel_kmhr() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_vel_kmhr)
  return hori_vel_kmhr_;
}
 void equip_evento_telemetria::set_hori_vel_kmhr(::google::protobuf::int32 value) {
  set_has_hori_vel_kmhr();
  hori_vel_kmhr_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_vel_kmhr)
}

// optional int32 hori_distancia_100 = 10;
bool equip_evento_telemetria::has_hori_distancia_100() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void equip_evento_telemetria::set_has_hori_distancia_100() {
  _has_bits_[0] |= 0x00000200u;
}
void equip_evento_telemetria::clear_has_hori_distancia_100() {
  _has_bits_[0] &= ~0x00000200u;
}
void equip_evento_telemetria::clear_hori_distancia_100() {
  hori_distancia_100_ = 0;
  clear_has_hori_distancia_100();
}
 ::google::protobuf::int32 equip_evento_telemetria::hori_distancia_100() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.hori_distancia_100)
  return hori_distancia_100_;
}
 void equip_evento_telemetria::set_hori_distancia_100(::google::protobuf::int32 value) {
  set_has_hori_distancia_100();
  hori_distancia_100_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.hori_distancia_100)
}

// optional int32 es_psi_oleo = 11;
bool equip_evento_telemetria::has_es_psi_oleo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void equip_evento_telemetria::set_has_es_psi_oleo() {
  _has_bits_[0] |= 0x00000400u;
}
void equip_evento_telemetria::clear_has_es_psi_oleo() {
  _has_bits_[0] &= ~0x00000400u;
}
void equip_evento_telemetria::clear_es_psi_oleo() {
  es_psi_oleo_ = 0;
  clear_has_es_psi_oleo();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_psi_oleo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_psi_oleo)
  return es_psi_oleo_;
}
 void equip_evento_telemetria::set_es_psi_oleo(::google::protobuf::int32 value) {
  set_has_es_psi_oleo();
  es_psi_oleo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_psi_oleo)
}

// optional int32 es_embreagem = 12;
bool equip_evento_telemetria::has_es_embreagem() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void equip_evento_telemetria::set_has_es_embreagem() {
  _has_bits_[0] |= 0x00000800u;
}
void equip_evento_telemetria::clear_has_es_embreagem() {
  _has_bits_[0] &= ~0x00000800u;
}
void equip_evento_telemetria::clear_es_embreagem() {
  es_embreagem_ = 0;
  clear_has_es_embreagem();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_embreagem() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_embreagem)
  return es_embreagem_;
}
 void equip_evento_telemetria::set_es_embreagem(::google::protobuf::int32 value) {
  set_has_es_embreagem();
  es_embreagem_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_embreagem)
}

// optional int32 es_freio = 13;
bool equip_evento_telemetria::has_es_freio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void equip_evento_telemetria::set_has_es_freio() {
  _has_bits_[0] |= 0x00001000u;
}
void equip_evento_telemetria::clear_has_es_freio() {
  _has_bits_[0] &= ~0x00001000u;
}
void equip_evento_telemetria::clear_es_freio() {
  es_freio_ = 0;
  clear_has_es_freio();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_freio() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_freio)
  return es_freio_;
}
 void equip_evento_telemetria::set_es_freio(::google::protobuf::int32 value) {
  set_has_es_freio();
  es_freio_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_freio)
}

// optional int32 es_limpador_parabrisa = 14;
bool equip_evento_telemetria::has_es_limpador_parabrisa() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void equip_evento_telemetria::set_has_es_limpador_parabrisa() {
  _has_bits_[0] |= 0x00002000u;
}
void equip_evento_telemetria::clear_has_es_limpador_parabrisa() {
  _has_bits_[0] &= ~0x00002000u;
}
void equip_evento_telemetria::clear_es_limpador_parabrisa() {
  es_limpador_parabrisa_ = 0;
  clear_has_es_limpador_parabrisa();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_limpador_parabrisa() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_limpador_parabrisa)
  return es_limpador_parabrisa_;
}
 void equip_evento_telemetria::set_es_limpador_parabrisa(::google::protobuf::int32 value) {
  set_has_es_limpador_parabrisa();
  es_limpador_parabrisa_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_limpador_parabrisa)
}

// optional int32 es_cx_marcha = 15;
bool equip_evento_telemetria::has_es_cx_marcha() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void equip_evento_telemetria::set_has_es_cx_marcha() {
  _has_bits_[0] |= 0x00004000u;
}
void equip_evento_telemetria::clear_has_es_cx_marcha() {
  _has_bits_[0] &= ~0x00004000u;
}
void equip_evento_telemetria::clear_es_cx_marcha() {
  es_cx_marcha_ = 0;
  clear_has_es_cx_marcha();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_cx_marcha() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_cx_marcha)
  return es_cx_marcha_;
}
 void equip_evento_telemetria::set_es_cx_marcha(::google::protobuf::int32 value) {
  set_has_es_cx_marcha();
  es_cx_marcha_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_cx_marcha)
}

// optional int32 es_freio_motor = 16;
bool equip_evento_telemetria::has_es_freio_motor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void equip_evento_telemetria::set_has_es_freio_motor() {
  _has_bits_[0] |= 0x00008000u;
}
void equip_evento_telemetria::clear_has_es_freio_motor() {
  _has_bits_[0] &= ~0x00008000u;
}
void equip_evento_telemetria::clear_es_freio_motor() {
  es_freio_motor_ = 0;
  clear_has_es_freio_motor();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_freio_motor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_freio_motor)
  return es_freio_motor_;
}
 void equip_evento_telemetria::set_es_freio_motor(::google::protobuf::int32 value) {
  set_has_es_freio_motor();
  es_freio_motor_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_freio_motor)
}

// optional int32 es_saida_fet = 17;
bool equip_evento_telemetria::has_es_saida_fet() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void equip_evento_telemetria::set_has_es_saida_fet() {
  _has_bits_[0] |= 0x00010000u;
}
void equip_evento_telemetria::clear_has_es_saida_fet() {
  _has_bits_[0] &= ~0x00010000u;
}
void equip_evento_telemetria::clear_es_saida_fet() {
  es_saida_fet_ = 0;
  clear_has_es_saida_fet();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_saida_fet() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_saida_fet)
  return es_saida_fet_;
}
 void equip_evento_telemetria::set_es_saida_fet(::google::protobuf::int32 value) {
  set_has_es_saida_fet();
  es_saida_fet_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_saida_fet)
}

// optional int32 es_a1 = 18;
bool equip_evento_telemetria::has_es_a1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void equip_evento_telemetria::set_has_es_a1() {
  _has_bits_[0] |= 0x00020000u;
}
void equip_evento_telemetria::clear_has_es_a1() {
  _has_bits_[0] &= ~0x00020000u;
}
void equip_evento_telemetria::clear_es_a1() {
  es_a1_ = 0;
  clear_has_es_a1();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_a1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_a1)
  return es_a1_;
}
 void equip_evento_telemetria::set_es_a1(::google::protobuf::int32 value) {
  set_has_es_a1();
  es_a1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_a1)
}

// optional int32 es_a2 = 19;
bool equip_evento_telemetria::has_es_a2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void equip_evento_telemetria::set_has_es_a2() {
  _has_bits_[0] |= 0x00040000u;
}
void equip_evento_telemetria::clear_has_es_a2() {
  _has_bits_[0] &= ~0x00040000u;
}
void equip_evento_telemetria::clear_es_a2() {
  es_a2_ = 0;
  clear_has_es_a2();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_a2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_a2)
  return es_a2_;
}
 void equip_evento_telemetria::set_es_a2(::google::protobuf::int32 value) {
  set_has_es_a2();
  es_a2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_a2)
}

// optional int32 es_a3 = 20;
bool equip_evento_telemetria::has_es_a3() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void equip_evento_telemetria::set_has_es_a3() {
  _has_bits_[0] |= 0x00080000u;
}
void equip_evento_telemetria::clear_has_es_a3() {
  _has_bits_[0] &= ~0x00080000u;
}
void equip_evento_telemetria::clear_es_a3() {
  es_a3_ = 0;
  clear_has_es_a3();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_a3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_a3)
  return es_a3_;
}
 void equip_evento_telemetria::set_es_a3(::google::protobuf::int32 value) {
  set_has_es_a3();
  es_a3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_a3)
}

// optional int32 es_id_evento_percurso = 21;
bool equip_evento_telemetria::has_es_id_evento_percurso() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void equip_evento_telemetria::set_has_es_id_evento_percurso() {
  _has_bits_[0] |= 0x00100000u;
}
void equip_evento_telemetria::clear_has_es_id_evento_percurso() {
  _has_bits_[0] &= ~0x00100000u;
}
void equip_evento_telemetria::clear_es_id_evento_percurso() {
  es_id_evento_percurso_ = 0;
  clear_has_es_id_evento_percurso();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_id_evento_percurso() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_id_evento_percurso)
  return es_id_evento_percurso_;
}
 void equip_evento_telemetria::set_es_id_evento_percurso(::google::protobuf::int32 value) {
  set_has_es_id_evento_percurso();
  es_id_evento_percurso_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_id_evento_percurso)
}

// optional int32 es_pct_evento = 22;
bool equip_evento_telemetria::has_es_pct_evento() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void equip_evento_telemetria::set_has_es_pct_evento() {
  _has_bits_[0] |= 0x00200000u;
}
void equip_evento_telemetria::clear_has_es_pct_evento() {
  _has_bits_[0] &= ~0x00200000u;
}
void equip_evento_telemetria::clear_es_pct_evento() {
  es_pct_evento_ = 0;
  clear_has_es_pct_evento();
}
 ::google::protobuf::int32 equip_evento_telemetria::es_pct_evento() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.es_pct_evento)
  return es_pct_evento_;
}
 void equip_evento_telemetria::set_es_pct_evento(::google::protobuf::int32 value) {
  set_has_es_pct_evento();
  es_pct_evento_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.es_pct_evento)
}

// optional int32 ev_vel_max_alcancada = 23;
bool equip_evento_telemetria::has_ev_vel_max_alcancada() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_max_alcancada() {
  _has_bits_[0] |= 0x00400000u;
}
void equip_evento_telemetria::clear_has_ev_vel_max_alcancada() {
  _has_bits_[0] &= ~0x00400000u;
}
void equip_evento_telemetria::clear_ev_vel_max_alcancada() {
  ev_vel_max_alcancada_ = 0;
  clear_has_ev_vel_max_alcancada();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_max_alcancada() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_max_alcancada)
  return ev_vel_max_alcancada_;
}
 void equip_evento_telemetria::set_ev_vel_max_alcancada(::google::protobuf::int32 value) {
  set_has_ev_vel_max_alcancada();
  ev_vel_max_alcancada_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_max_alcancada)
}

// optional int32 ev_vel_media = 24;
bool equip_evento_telemetria::has_ev_vel_media() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_media() {
  _has_bits_[0] |= 0x00800000u;
}
void equip_evento_telemetria::clear_has_ev_vel_media() {
  _has_bits_[0] &= ~0x00800000u;
}
void equip_evento_telemetria::clear_ev_vel_media() {
  ev_vel_media_ = 0;
  clear_has_ev_vel_media();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_media() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_media)
  return ev_vel_media_;
}
 void equip_evento_telemetria::set_ev_vel_media(::google::protobuf::int32 value) {
  set_has_ev_vel_media();
  ev_vel_media_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_media)
}

// optional int32 ev_rot_maxima = 25;
bool equip_evento_telemetria::has_ev_rot_maxima() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_rot_maxima() {
  _has_bits_[0] |= 0x01000000u;
}
void equip_evento_telemetria::clear_has_ev_rot_maxima() {
  _has_bits_[0] &= ~0x01000000u;
}
void equip_evento_telemetria::clear_ev_rot_maxima() {
  ev_rot_maxima_ = 0;
  clear_has_ev_rot_maxima();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_rot_maxima() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_rot_maxima)
  return ev_rot_maxima_;
}
 void equip_evento_telemetria::set_ev_rot_maxima(::google::protobuf::int32 value) {
  set_has_ev_rot_maxima();
  ev_rot_maxima_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_rot_maxima)
}

// optional int32 ev_embre_kmrodado = 26;
bool equip_evento_telemetria::has_ev_embre_kmrodado() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_embre_kmrodado() {
  _has_bits_[0] |= 0x02000000u;
}
void equip_evento_telemetria::clear_has_ev_embre_kmrodado() {
  _has_bits_[0] &= ~0x02000000u;
}
void equip_evento_telemetria::clear_ev_embre_kmrodado() {
  ev_embre_kmrodado_ = 0;
  clear_has_ev_embre_kmrodado();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_embre_kmrodado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_embre_kmrodado)
  return ev_embre_kmrodado_;
}
 void equip_evento_telemetria::set_ev_embre_kmrodado(::google::protobuf::int32 value) {
  set_has_ev_embre_kmrodado();
  ev_embre_kmrodado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_embre_kmrodado)
}

// optional int32 ev_freio_kmrodado = 27;
bool equip_evento_telemetria::has_ev_freio_kmrodado() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_freio_kmrodado() {
  _has_bits_[0] |= 0x04000000u;
}
void equip_evento_telemetria::clear_has_ev_freio_kmrodado() {
  _has_bits_[0] &= ~0x04000000u;
}
void equip_evento_telemetria::clear_ev_freio_kmrodado() {
  ev_freio_kmrodado_ = 0;
  clear_has_ev_freio_kmrodado();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_freio_kmrodado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_freio_kmrodado)
  return ev_freio_kmrodado_;
}
 void equip_evento_telemetria::set_ev_freio_kmrodado(::google::protobuf::int32 value) {
  set_has_ev_freio_kmrodado();
  ev_freio_kmrodado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_freio_kmrodado)
}

// optional int32 ev_tempo_freiomotor = 28;
bool equip_evento_telemetria::has_ev_tempo_freiomotor() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_tempo_freiomotor() {
  _has_bits_[0] |= 0x08000000u;
}
void equip_evento_telemetria::clear_has_ev_tempo_freiomotor() {
  _has_bits_[0] &= ~0x08000000u;
}
void equip_evento_telemetria::clear_ev_tempo_freiomotor() {
  ev_tempo_freiomotor_ = 0;
  clear_has_ev_tempo_freiomotor();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_tempo_freiomotor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_tempo_freiomotor)
  return ev_tempo_freiomotor_;
}
 void equip_evento_telemetria::set_ev_tempo_freiomotor(::google::protobuf::int32 value) {
  set_has_ev_tempo_freiomotor();
  ev_tempo_freiomotor_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_tempo_freiomotor)
}

// optional int32 ev_vel_lib_embre = 29;
bool equip_evento_telemetria::has_ev_vel_lib_embre() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_lib_embre() {
  _has_bits_[0] |= 0x10000000u;
}
void equip_evento_telemetria::clear_has_ev_vel_lib_embre() {
  _has_bits_[0] &= ~0x10000000u;
}
void equip_evento_telemetria::clear_ev_vel_lib_embre() {
  ev_vel_lib_embre_ = 0;
  clear_has_ev_vel_lib_embre();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_lib_embre() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_lib_embre)
  return ev_vel_lib_embre_;
}
 void equip_evento_telemetria::set_ev_vel_lib_embre(::google::protobuf::int32 value) {
  set_has_ev_vel_lib_embre();
  ev_vel_lib_embre_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_lib_embre)
}

// optional int32 ev_rot_embre = 30;
bool equip_evento_telemetria::has_ev_rot_embre() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_rot_embre() {
  _has_bits_[0] |= 0x20000000u;
}
void equip_evento_telemetria::clear_has_ev_rot_embre() {
  _has_bits_[0] &= ~0x20000000u;
}
void equip_evento_telemetria::clear_ev_rot_embre() {
  ev_rot_embre_ = 0;
  clear_has_ev_rot_embre();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_rot_embre() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_rot_embre)
  return ev_rot_embre_;
}
 void equip_evento_telemetria::set_ev_rot_embre(::google::protobuf::int32 value) {
  set_has_ev_rot_embre();
  ev_rot_embre_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_rot_embre)
}

// optional int32 ev_tempo_duracao = 31;
bool equip_evento_telemetria::has_ev_tempo_duracao() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_tempo_duracao() {
  _has_bits_[0] |= 0x40000000u;
}
void equip_evento_telemetria::clear_has_ev_tempo_duracao() {
  _has_bits_[0] &= ~0x40000000u;
}
void equip_evento_telemetria::clear_ev_tempo_duracao() {
  ev_tempo_duracao_ = 0;
  clear_has_ev_tempo_duracao();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_tempo_duracao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_tempo_duracao)
  return ev_tempo_duracao_;
}
 void equip_evento_telemetria::set_ev_tempo_duracao(::google::protobuf::int32 value) {
  set_has_ev_tempo_duracao();
  ev_tempo_duracao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_tempo_duracao)
}

// optional int32 ev_vel_referencia = 32;
bool equip_evento_telemetria::has_ev_vel_referencia() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_referencia() {
  _has_bits_[0] |= 0x80000000u;
}
void equip_evento_telemetria::clear_has_ev_vel_referencia() {
  _has_bits_[0] &= ~0x80000000u;
}
void equip_evento_telemetria::clear_ev_vel_referencia() {
  ev_vel_referencia_ = 0;
  clear_has_ev_vel_referencia();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_referencia() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_referencia)
  return ev_vel_referencia_;
}
 void equip_evento_telemetria::set_ev_vel_referencia(::google::protobuf::int32 value) {
  set_has_ev_vel_referencia();
  ev_vel_referencia_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_referencia)
}

// optional int32 ev_vel_inicial = 33;
bool equip_evento_telemetria::has_ev_vel_inicial() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_inicial() {
  _has_bits_[1] |= 0x00000001u;
}
void equip_evento_telemetria::clear_has_ev_vel_inicial() {
  _has_bits_[1] &= ~0x00000001u;
}
void equip_evento_telemetria::clear_ev_vel_inicial() {
  ev_vel_inicial_ = 0;
  clear_has_ev_vel_inicial();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_inicial() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_inicial)
  return ev_vel_inicial_;
}
 void equip_evento_telemetria::set_ev_vel_inicial(::google::protobuf::int32 value) {
  set_has_ev_vel_inicial();
  ev_vel_inicial_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_inicial)
}

// optional int32 ev_vel_final = 34;
bool equip_evento_telemetria::has_ev_vel_final() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_final() {
  _has_bits_[1] |= 0x00000002u;
}
void equip_evento_telemetria::clear_has_ev_vel_final() {
  _has_bits_[1] &= ~0x00000002u;
}
void equip_evento_telemetria::clear_ev_vel_final() {
  ev_vel_final_ = 0;
  clear_has_ev_vel_final();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_final() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_final)
  return ev_vel_final_;
}
 void equip_evento_telemetria::set_ev_vel_final(::google::protobuf::int32 value) {
  set_has_ev_vel_final();
  ev_vel_final_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_final)
}

// optional int32 ev_vel_max_evento = 35;
bool equip_evento_telemetria::has_ev_vel_max_evento() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void equip_evento_telemetria::set_has_ev_vel_max_evento() {
  _has_bits_[1] |= 0x00000004u;
}
void equip_evento_telemetria::clear_has_ev_vel_max_evento() {
  _has_bits_[1] &= ~0x00000004u;
}
void equip_evento_telemetria::clear_ev_vel_max_evento() {
  ev_vel_max_evento_ = 0;
  clear_has_ev_vel_max_evento();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_vel_max_evento() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_vel_max_evento)
  return ev_vel_max_evento_;
}
 void equip_evento_telemetria::set_ev_vel_max_evento(::google::protobuf::int32 value) {
  set_has_ev_vel_max_evento();
  ev_vel_max_evento_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_vel_max_evento)
}

// optional int32 ev_temp_max_01v = 36;
bool equip_evento_telemetria::has_ev_temp_max_01v() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void equip_evento_telemetria::set_has_ev_temp_max_01v() {
  _has_bits_[1] |= 0x00000008u;
}
void equip_evento_telemetria::clear_has_ev_temp_max_01v() {
  _has_bits_[1] &= ~0x00000008u;
}
void equip_evento_telemetria::clear_ev_temp_max_01v() {
  ev_temp_max_01v_ = 0;
  clear_has_ev_temp_max_01v();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_temp_max_01v() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_temp_max_01v)
  return ev_temp_max_01v_;
}
 void equip_evento_telemetria::set_ev_temp_max_01v(::google::protobuf::int32 value) {
  set_has_ev_temp_max_01v();
  ev_temp_max_01v_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_temp_max_01v)
}

// optional int32 ev_tensao_01v = 37;
bool equip_evento_telemetria::has_ev_tensao_01v() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void equip_evento_telemetria::set_has_ev_tensao_01v() {
  _has_bits_[1] |= 0x00000010u;
}
void equip_evento_telemetria::clear_has_ev_tensao_01v() {
  _has_bits_[1] &= ~0x00000010u;
}
void equip_evento_telemetria::clear_ev_tensao_01v() {
  ev_tensao_01v_ = 0;
  clear_has_ev_tensao_01v();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_tensao_01v() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_tensao_01v)
  return ev_tensao_01v_;
}
 void equip_evento_telemetria::set_ev_tensao_01v(::google::protobuf::int32 value) {
  set_has_ev_tensao_01v();
  ev_tensao_01v_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_tensao_01v)
}

// optional int32 ev_rot_permitido = 38;
bool equip_evento_telemetria::has_ev_rot_permitido() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void equip_evento_telemetria::set_has_ev_rot_permitido() {
  _has_bits_[1] |= 0x00000020u;
}
void equip_evento_telemetria::clear_has_ev_rot_permitido() {
  _has_bits_[1] &= ~0x00000020u;
}
void equip_evento_telemetria::clear_ev_rot_permitido() {
  ev_rot_permitido_ = 0;
  clear_has_ev_rot_permitido();
}
 ::google::protobuf::int32 equip_evento_telemetria::ev_rot_permitido() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_evento_telemetria.ev_rot_permitido)
  return ev_rot_permitido_;
}
 void equip_evento_telemetria::set_ev_rot_permitido(::google::protobuf::int32 value) {
  set_has_ev_rot_permitido();
  ev_rot_permitido_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_evento_telemetria.ev_rot_permitido)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_flags::kBloqueioFieldNumber;
const int equip_flags::kAlertaIntFieldNumber;
const int equip_flags::kSomentePosicaoFieldNumber;
const int equip_flags::kEntradaPontoFieldNumber;
const int equip_flags::kSaidaPontoFieldNumber;
const int equip_flags::kAlertaBatFieldNumber;
const int equip_flags::kPad1FieldNumber;
const int equip_flags::kPerifericoFieldNumber;
const int equip_flags::kCodPerifericoFieldNumber;
const int equip_flags::kPad2FieldNumber;
const int equip_flags::kViagemAbertaFieldNumber;
const int equip_flags::kViagemFechadaFieldNumber;
const int equip_flags::kFugaCercaFieldNumber;
const int equip_flags::kPontoDeRefFieldNumber;
const int equip_flags::kIgnicaoFieldNumber;
const int equip_flags::kTemMensagemFieldNumber;
const int equip_flags::kAntiTheftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_flags::equip_flags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_flags)
}

void equip_flags::InitAsDefaultInstance() {
}

equip_flags::equip_flags(const equip_flags& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_flags)
}

void equip_flags::SharedCtor() {
  _cached_size_ = 0;
  bloqueio_ = 0;
  alerta_int_ = 0;
  somente_posicao_ = 0;
  entrada_ponto_ = 0;
  saida_ponto_ = 0;
  alerta_bat_ = 0;
  pad1_ = 0;
  periferico_ = 0;
  cod_periferico_ = 0;
  pad2_ = 0;
  viagem_aberta_ = 0;
  viagem_fechada_ = 0;
  fuga_cerca_ = 0;
  ponto_de_ref_ = 0;
  ignicao_ = 0;
  tem_mensagem_ = 0;
  anti_theft_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_flags::~equip_flags() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_flags)
  SharedDtor();
}

void equip_flags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_flags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_flags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_flags_descriptor_;
}

const equip_flags& equip_flags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_flags* equip_flags::default_instance_ = NULL;

equip_flags* equip_flags::New(::google::protobuf::Arena* arena) const {
  equip_flags* n = new equip_flags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_flags::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_flags*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(bloqueio_, periferico_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(cod_periferico_, tem_mensagem_);
  }
  anti_theft_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_flags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_flags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bloqueio = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bloqueio_)));
          set_has_bloqueio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_alerta_int;
        break;
      }

      // optional int32 alerta_int = 2;
      case 2: {
        if (tag == 16) {
         parse_alerta_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alerta_int_)));
          set_has_alerta_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_somente_posicao;
        break;
      }

      // optional int32 somente_posicao = 3;
      case 3: {
        if (tag == 24) {
         parse_somente_posicao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &somente_posicao_)));
          set_has_somente_posicao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_entrada_ponto;
        break;
      }

      // optional int32 entrada_ponto = 4;
      case 4: {
        if (tag == 32) {
         parse_entrada_ponto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entrada_ponto_)));
          set_has_entrada_ponto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_saida_ponto;
        break;
      }

      // optional int32 saida_ponto = 5;
      case 5: {
        if (tag == 40) {
         parse_saida_ponto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saida_ponto_)));
          set_has_saida_ponto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_alerta_bat;
        break;
      }

      // optional int32 alerta_bat = 6;
      case 6: {
        if (tag == 48) {
         parse_alerta_bat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alerta_bat_)));
          set_has_alerta_bat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pad1;
        break;
      }

      // optional int32 pad1 = 7;
      case 7: {
        if (tag == 56) {
         parse_pad1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad1_)));
          set_has_pad1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_periferico;
        break;
      }

      // optional int32 periferico = 8;
      case 8: {
        if (tag == 64) {
         parse_periferico:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &periferico_)));
          set_has_periferico();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cod_periferico;
        break;
      }

      // optional int32 cod_periferico = 9;
      case 9: {
        if (tag == 72) {
         parse_cod_periferico:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cod_periferico_)));
          set_has_cod_periferico();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pad2;
        break;
      }

      // optional int32 pad2 = 10;
      case 10: {
        if (tag == 80) {
         parse_pad2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad2_)));
          set_has_pad2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_viagem_aberta;
        break;
      }

      // optional int32 viagem_aberta = 11;
      case 11: {
        if (tag == 88) {
         parse_viagem_aberta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viagem_aberta_)));
          set_has_viagem_aberta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_viagem_fechada;
        break;
      }

      // optional int32 viagem_fechada = 12;
      case 12: {
        if (tag == 96) {
         parse_viagem_fechada:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viagem_fechada_)));
          set_has_viagem_fechada();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fuga_cerca;
        break;
      }

      // optional int32 fuga_cerca = 13;
      case 13: {
        if (tag == 104) {
         parse_fuga_cerca:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuga_cerca_)));
          set_has_fuga_cerca();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ponto_de_ref;
        break;
      }

      // optional int32 ponto_de_ref = 14;
      case 14: {
        if (tag == 112) {
         parse_ponto_de_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ponto_de_ref_)));
          set_has_ponto_de_ref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ignicao;
        break;
      }

      // optional int32 ignicao = 15;
      case 15: {
        if (tag == 120) {
         parse_ignicao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignicao_)));
          set_has_ignicao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_tem_mensagem;
        break;
      }

      // optional int32 tem_mensagem = 16;
      case 16: {
        if (tag == 128) {
         parse_tem_mensagem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tem_mensagem_)));
          set_has_tem_mensagem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_anti_theft;
        break;
      }

      // optional int32 anti_theft = 17;
      case 17: {
        if (tag == 136) {
         parse_anti_theft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_theft_)));
          set_has_anti_theft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_flags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_flags)
  return false;
#undef DO_
}

void equip_flags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_flags)
  // optional int32 bloqueio = 1;
  if (has_bloqueio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bloqueio(), output);
  }

  // optional int32 alerta_int = 2;
  if (has_alerta_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alerta_int(), output);
  }

  // optional int32 somente_posicao = 3;
  if (has_somente_posicao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->somente_posicao(), output);
  }

  // optional int32 entrada_ponto = 4;
  if (has_entrada_ponto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entrada_ponto(), output);
  }

  // optional int32 saida_ponto = 5;
  if (has_saida_ponto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->saida_ponto(), output);
  }

  // optional int32 alerta_bat = 6;
  if (has_alerta_bat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->alerta_bat(), output);
  }

  // optional int32 pad1 = 7;
  if (has_pad1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pad1(), output);
  }

  // optional int32 periferico = 8;
  if (has_periferico()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->periferico(), output);
  }

  // optional int32 cod_periferico = 9;
  if (has_cod_periferico()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cod_periferico(), output);
  }

  // optional int32 pad2 = 10;
  if (has_pad2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pad2(), output);
  }

  // optional int32 viagem_aberta = 11;
  if (has_viagem_aberta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->viagem_aberta(), output);
  }

  // optional int32 viagem_fechada = 12;
  if (has_viagem_fechada()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->viagem_fechada(), output);
  }

  // optional int32 fuga_cerca = 13;
  if (has_fuga_cerca()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fuga_cerca(), output);
  }

  // optional int32 ponto_de_ref = 14;
  if (has_ponto_de_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ponto_de_ref(), output);
  }

  // optional int32 ignicao = 15;
  if (has_ignicao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ignicao(), output);
  }

  // optional int32 tem_mensagem = 16;
  if (has_tem_mensagem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tem_mensagem(), output);
  }

  // optional int32 anti_theft = 17;
  if (has_anti_theft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->anti_theft(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_flags)
}

::google::protobuf::uint8* equip_flags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_flags)
  // optional int32 bloqueio = 1;
  if (has_bloqueio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bloqueio(), target);
  }

  // optional int32 alerta_int = 2;
  if (has_alerta_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alerta_int(), target);
  }

  // optional int32 somente_posicao = 3;
  if (has_somente_posicao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->somente_posicao(), target);
  }

  // optional int32 entrada_ponto = 4;
  if (has_entrada_ponto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entrada_ponto(), target);
  }

  // optional int32 saida_ponto = 5;
  if (has_saida_ponto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->saida_ponto(), target);
  }

  // optional int32 alerta_bat = 6;
  if (has_alerta_bat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->alerta_bat(), target);
  }

  // optional int32 pad1 = 7;
  if (has_pad1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pad1(), target);
  }

  // optional int32 periferico = 8;
  if (has_periferico()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->periferico(), target);
  }

  // optional int32 cod_periferico = 9;
  if (has_cod_periferico()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cod_periferico(), target);
  }

  // optional int32 pad2 = 10;
  if (has_pad2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pad2(), target);
  }

  // optional int32 viagem_aberta = 11;
  if (has_viagem_aberta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->viagem_aberta(), target);
  }

  // optional int32 viagem_fechada = 12;
  if (has_viagem_fechada()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->viagem_fechada(), target);
  }

  // optional int32 fuga_cerca = 13;
  if (has_fuga_cerca()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fuga_cerca(), target);
  }

  // optional int32 ponto_de_ref = 14;
  if (has_ponto_de_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ponto_de_ref(), target);
  }

  // optional int32 ignicao = 15;
  if (has_ignicao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ignicao(), target);
  }

  // optional int32 tem_mensagem = 16;
  if (has_tem_mensagem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tem_mensagem(), target);
  }

  // optional int32 anti_theft = 17;
  if (has_anti_theft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->anti_theft(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_flags)
  return target;
}

int equip_flags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 bloqueio = 1;
    if (has_bloqueio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bloqueio());
    }

    // optional int32 alerta_int = 2;
    if (has_alerta_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alerta_int());
    }

    // optional int32 somente_posicao = 3;
    if (has_somente_posicao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->somente_posicao());
    }

    // optional int32 entrada_ponto = 4;
    if (has_entrada_ponto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entrada_ponto());
    }

    // optional int32 saida_ponto = 5;
    if (has_saida_ponto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saida_ponto());
    }

    // optional int32 alerta_bat = 6;
    if (has_alerta_bat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alerta_bat());
    }

    // optional int32 pad1 = 7;
    if (has_pad1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad1());
    }

    // optional int32 periferico = 8;
    if (has_periferico()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->periferico());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 cod_periferico = 9;
    if (has_cod_periferico()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cod_periferico());
    }

    // optional int32 pad2 = 10;
    if (has_pad2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad2());
    }

    // optional int32 viagem_aberta = 11;
    if (has_viagem_aberta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viagem_aberta());
    }

    // optional int32 viagem_fechada = 12;
    if (has_viagem_fechada()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viagem_fechada());
    }

    // optional int32 fuga_cerca = 13;
    if (has_fuga_cerca()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuga_cerca());
    }

    // optional int32 ponto_de_ref = 14;
    if (has_ponto_de_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ponto_de_ref());
    }

    // optional int32 ignicao = 15;
    if (has_ignicao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignicao());
    }

    // optional int32 tem_mensagem = 16;
    if (has_tem_mensagem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tem_mensagem());
    }

  }
  // optional int32 anti_theft = 17;
  if (has_anti_theft()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->anti_theft());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_flags::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_flags* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_flags>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_flags::MergeFrom(const equip_flags& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bloqueio()) {
      set_bloqueio(from.bloqueio());
    }
    if (from.has_alerta_int()) {
      set_alerta_int(from.alerta_int());
    }
    if (from.has_somente_posicao()) {
      set_somente_posicao(from.somente_posicao());
    }
    if (from.has_entrada_ponto()) {
      set_entrada_ponto(from.entrada_ponto());
    }
    if (from.has_saida_ponto()) {
      set_saida_ponto(from.saida_ponto());
    }
    if (from.has_alerta_bat()) {
      set_alerta_bat(from.alerta_bat());
    }
    if (from.has_pad1()) {
      set_pad1(from.pad1());
    }
    if (from.has_periferico()) {
      set_periferico(from.periferico());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cod_periferico()) {
      set_cod_periferico(from.cod_periferico());
    }
    if (from.has_pad2()) {
      set_pad2(from.pad2());
    }
    if (from.has_viagem_aberta()) {
      set_viagem_aberta(from.viagem_aberta());
    }
    if (from.has_viagem_fechada()) {
      set_viagem_fechada(from.viagem_fechada());
    }
    if (from.has_fuga_cerca()) {
      set_fuga_cerca(from.fuga_cerca());
    }
    if (from.has_ponto_de_ref()) {
      set_ponto_de_ref(from.ponto_de_ref());
    }
    if (from.has_ignicao()) {
      set_ignicao(from.ignicao());
    }
    if (from.has_tem_mensagem()) {
      set_tem_mensagem(from.tem_mensagem());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_anti_theft()) {
      set_anti_theft(from.anti_theft());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_flags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_flags::CopyFrom(const equip_flags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_flags::IsInitialized() const {

  return true;
}

void equip_flags::Swap(equip_flags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_flags::InternalSwap(equip_flags* other) {
  std::swap(bloqueio_, other->bloqueio_);
  std::swap(alerta_int_, other->alerta_int_);
  std::swap(somente_posicao_, other->somente_posicao_);
  std::swap(entrada_ponto_, other->entrada_ponto_);
  std::swap(saida_ponto_, other->saida_ponto_);
  std::swap(alerta_bat_, other->alerta_bat_);
  std::swap(pad1_, other->pad1_);
  std::swap(periferico_, other->periferico_);
  std::swap(cod_periferico_, other->cod_periferico_);
  std::swap(pad2_, other->pad2_);
  std::swap(viagem_aberta_, other->viagem_aberta_);
  std::swap(viagem_fechada_, other->viagem_fechada_);
  std::swap(fuga_cerca_, other->fuga_cerca_);
  std::swap(ponto_de_ref_, other->ponto_de_ref_);
  std::swap(ignicao_, other->ignicao_);
  std::swap(tem_mensagem_, other->tem_mensagem_);
  std::swap(anti_theft_, other->anti_theft_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_flags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_flags_descriptor_;
  metadata.reflection = equip_flags_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_flags

// optional int32 bloqueio = 1;
bool equip_flags::has_bloqueio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_flags::set_has_bloqueio() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_flags::clear_has_bloqueio() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_flags::clear_bloqueio() {
  bloqueio_ = 0;
  clear_has_bloqueio();
}
 ::google::protobuf::int32 equip_flags::bloqueio() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.bloqueio)
  return bloqueio_;
}
 void equip_flags::set_bloqueio(::google::protobuf::int32 value) {
  set_has_bloqueio();
  bloqueio_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.bloqueio)
}

// optional int32 alerta_int = 2;
bool equip_flags::has_alerta_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_flags::set_has_alerta_int() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_flags::clear_has_alerta_int() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_flags::clear_alerta_int() {
  alerta_int_ = 0;
  clear_has_alerta_int();
}
 ::google::protobuf::int32 equip_flags::alerta_int() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.alerta_int)
  return alerta_int_;
}
 void equip_flags::set_alerta_int(::google::protobuf::int32 value) {
  set_has_alerta_int();
  alerta_int_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.alerta_int)
}

// optional int32 somente_posicao = 3;
bool equip_flags::has_somente_posicao() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void equip_flags::set_has_somente_posicao() {
  _has_bits_[0] |= 0x00000004u;
}
void equip_flags::clear_has_somente_posicao() {
  _has_bits_[0] &= ~0x00000004u;
}
void equip_flags::clear_somente_posicao() {
  somente_posicao_ = 0;
  clear_has_somente_posicao();
}
 ::google::protobuf::int32 equip_flags::somente_posicao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.somente_posicao)
  return somente_posicao_;
}
 void equip_flags::set_somente_posicao(::google::protobuf::int32 value) {
  set_has_somente_posicao();
  somente_posicao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.somente_posicao)
}

// optional int32 entrada_ponto = 4;
bool equip_flags::has_entrada_ponto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void equip_flags::set_has_entrada_ponto() {
  _has_bits_[0] |= 0x00000008u;
}
void equip_flags::clear_has_entrada_ponto() {
  _has_bits_[0] &= ~0x00000008u;
}
void equip_flags::clear_entrada_ponto() {
  entrada_ponto_ = 0;
  clear_has_entrada_ponto();
}
 ::google::protobuf::int32 equip_flags::entrada_ponto() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.entrada_ponto)
  return entrada_ponto_;
}
 void equip_flags::set_entrada_ponto(::google::protobuf::int32 value) {
  set_has_entrada_ponto();
  entrada_ponto_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.entrada_ponto)
}

// optional int32 saida_ponto = 5;
bool equip_flags::has_saida_ponto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void equip_flags::set_has_saida_ponto() {
  _has_bits_[0] |= 0x00000010u;
}
void equip_flags::clear_has_saida_ponto() {
  _has_bits_[0] &= ~0x00000010u;
}
void equip_flags::clear_saida_ponto() {
  saida_ponto_ = 0;
  clear_has_saida_ponto();
}
 ::google::protobuf::int32 equip_flags::saida_ponto() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.saida_ponto)
  return saida_ponto_;
}
 void equip_flags::set_saida_ponto(::google::protobuf::int32 value) {
  set_has_saida_ponto();
  saida_ponto_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.saida_ponto)
}

// optional int32 alerta_bat = 6;
bool equip_flags::has_alerta_bat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void equip_flags::set_has_alerta_bat() {
  _has_bits_[0] |= 0x00000020u;
}
void equip_flags::clear_has_alerta_bat() {
  _has_bits_[0] &= ~0x00000020u;
}
void equip_flags::clear_alerta_bat() {
  alerta_bat_ = 0;
  clear_has_alerta_bat();
}
 ::google::protobuf::int32 equip_flags::alerta_bat() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.alerta_bat)
  return alerta_bat_;
}
 void equip_flags::set_alerta_bat(::google::protobuf::int32 value) {
  set_has_alerta_bat();
  alerta_bat_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.alerta_bat)
}

// optional int32 pad1 = 7;
bool equip_flags::has_pad1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void equip_flags::set_has_pad1() {
  _has_bits_[0] |= 0x00000040u;
}
void equip_flags::clear_has_pad1() {
  _has_bits_[0] &= ~0x00000040u;
}
void equip_flags::clear_pad1() {
  pad1_ = 0;
  clear_has_pad1();
}
 ::google::protobuf::int32 equip_flags::pad1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.pad1)
  return pad1_;
}
 void equip_flags::set_pad1(::google::protobuf::int32 value) {
  set_has_pad1();
  pad1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.pad1)
}

// optional int32 periferico = 8;
bool equip_flags::has_periferico() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void equip_flags::set_has_periferico() {
  _has_bits_[0] |= 0x00000080u;
}
void equip_flags::clear_has_periferico() {
  _has_bits_[0] &= ~0x00000080u;
}
void equip_flags::clear_periferico() {
  periferico_ = 0;
  clear_has_periferico();
}
 ::google::protobuf::int32 equip_flags::periferico() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.periferico)
  return periferico_;
}
 void equip_flags::set_periferico(::google::protobuf::int32 value) {
  set_has_periferico();
  periferico_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.periferico)
}

// optional int32 cod_periferico = 9;
bool equip_flags::has_cod_periferico() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void equip_flags::set_has_cod_periferico() {
  _has_bits_[0] |= 0x00000100u;
}
void equip_flags::clear_has_cod_periferico() {
  _has_bits_[0] &= ~0x00000100u;
}
void equip_flags::clear_cod_periferico() {
  cod_periferico_ = 0;
  clear_has_cod_periferico();
}
 ::google::protobuf::int32 equip_flags::cod_periferico() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.cod_periferico)
  return cod_periferico_;
}
 void equip_flags::set_cod_periferico(::google::protobuf::int32 value) {
  set_has_cod_periferico();
  cod_periferico_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.cod_periferico)
}

// optional int32 pad2 = 10;
bool equip_flags::has_pad2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void equip_flags::set_has_pad2() {
  _has_bits_[0] |= 0x00000200u;
}
void equip_flags::clear_has_pad2() {
  _has_bits_[0] &= ~0x00000200u;
}
void equip_flags::clear_pad2() {
  pad2_ = 0;
  clear_has_pad2();
}
 ::google::protobuf::int32 equip_flags::pad2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.pad2)
  return pad2_;
}
 void equip_flags::set_pad2(::google::protobuf::int32 value) {
  set_has_pad2();
  pad2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.pad2)
}

// optional int32 viagem_aberta = 11;
bool equip_flags::has_viagem_aberta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void equip_flags::set_has_viagem_aberta() {
  _has_bits_[0] |= 0x00000400u;
}
void equip_flags::clear_has_viagem_aberta() {
  _has_bits_[0] &= ~0x00000400u;
}
void equip_flags::clear_viagem_aberta() {
  viagem_aberta_ = 0;
  clear_has_viagem_aberta();
}
 ::google::protobuf::int32 equip_flags::viagem_aberta() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.viagem_aberta)
  return viagem_aberta_;
}
 void equip_flags::set_viagem_aberta(::google::protobuf::int32 value) {
  set_has_viagem_aberta();
  viagem_aberta_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.viagem_aberta)
}

// optional int32 viagem_fechada = 12;
bool equip_flags::has_viagem_fechada() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void equip_flags::set_has_viagem_fechada() {
  _has_bits_[0] |= 0x00000800u;
}
void equip_flags::clear_has_viagem_fechada() {
  _has_bits_[0] &= ~0x00000800u;
}
void equip_flags::clear_viagem_fechada() {
  viagem_fechada_ = 0;
  clear_has_viagem_fechada();
}
 ::google::protobuf::int32 equip_flags::viagem_fechada() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.viagem_fechada)
  return viagem_fechada_;
}
 void equip_flags::set_viagem_fechada(::google::protobuf::int32 value) {
  set_has_viagem_fechada();
  viagem_fechada_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.viagem_fechada)
}

// optional int32 fuga_cerca = 13;
bool equip_flags::has_fuga_cerca() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void equip_flags::set_has_fuga_cerca() {
  _has_bits_[0] |= 0x00001000u;
}
void equip_flags::clear_has_fuga_cerca() {
  _has_bits_[0] &= ~0x00001000u;
}
void equip_flags::clear_fuga_cerca() {
  fuga_cerca_ = 0;
  clear_has_fuga_cerca();
}
 ::google::protobuf::int32 equip_flags::fuga_cerca() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.fuga_cerca)
  return fuga_cerca_;
}
 void equip_flags::set_fuga_cerca(::google::protobuf::int32 value) {
  set_has_fuga_cerca();
  fuga_cerca_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.fuga_cerca)
}

// optional int32 ponto_de_ref = 14;
bool equip_flags::has_ponto_de_ref() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void equip_flags::set_has_ponto_de_ref() {
  _has_bits_[0] |= 0x00002000u;
}
void equip_flags::clear_has_ponto_de_ref() {
  _has_bits_[0] &= ~0x00002000u;
}
void equip_flags::clear_ponto_de_ref() {
  ponto_de_ref_ = 0;
  clear_has_ponto_de_ref();
}
 ::google::protobuf::int32 equip_flags::ponto_de_ref() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.ponto_de_ref)
  return ponto_de_ref_;
}
 void equip_flags::set_ponto_de_ref(::google::protobuf::int32 value) {
  set_has_ponto_de_ref();
  ponto_de_ref_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.ponto_de_ref)
}

// optional int32 ignicao = 15;
bool equip_flags::has_ignicao() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void equip_flags::set_has_ignicao() {
  _has_bits_[0] |= 0x00004000u;
}
void equip_flags::clear_has_ignicao() {
  _has_bits_[0] &= ~0x00004000u;
}
void equip_flags::clear_ignicao() {
  ignicao_ = 0;
  clear_has_ignicao();
}
 ::google::protobuf::int32 equip_flags::ignicao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.ignicao)
  return ignicao_;
}
 void equip_flags::set_ignicao(::google::protobuf::int32 value) {
  set_has_ignicao();
  ignicao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.ignicao)
}

// optional int32 tem_mensagem = 16;
bool equip_flags::has_tem_mensagem() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void equip_flags::set_has_tem_mensagem() {
  _has_bits_[0] |= 0x00008000u;
}
void equip_flags::clear_has_tem_mensagem() {
  _has_bits_[0] &= ~0x00008000u;
}
void equip_flags::clear_tem_mensagem() {
  tem_mensagem_ = 0;
  clear_has_tem_mensagem();
}
 ::google::protobuf::int32 equip_flags::tem_mensagem() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.tem_mensagem)
  return tem_mensagem_;
}
 void equip_flags::set_tem_mensagem(::google::protobuf::int32 value) {
  set_has_tem_mensagem();
  tem_mensagem_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.tem_mensagem)
}

// optional int32 anti_theft = 17;
bool equip_flags::has_anti_theft() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void equip_flags::set_has_anti_theft() {
  _has_bits_[0] |= 0x00010000u;
}
void equip_flags::clear_has_anti_theft() {
  _has_bits_[0] &= ~0x00010000u;
}
void equip_flags::clear_anti_theft() {
  anti_theft_ = 0;
  clear_has_anti_theft();
}
 ::google::protobuf::int32 equip_flags::anti_theft() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_flags.anti_theft)
  return anti_theft_;
}
 void equip_flags::set_anti_theft(::google::protobuf::int32 value) {
  set_has_anti_theft();
  anti_theft_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_flags.anti_theft)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_contrato::kEsnFieldNumber;
const int equip_contrato::kClioidFieldNumber;
const int equip_contrato::kGerenciadoraFieldNumber;
const int equip_contrato::kConnumeroFieldNumber;
const int equip_contrato::kVeioidFieldNumber;
const int equip_contrato::kTipoContratoFieldNumber;
const int equip_contrato::kClasseFieldNumber;
const int equip_contrato::kProtocoloFieldNumber;
const int equip_contrato::kSerialFieldNumber;
const int equip_contrato::kPortaPanicoFieldNumber;
const int equip_contrato::kPortaBloqueioFieldNumber;
const int equip_contrato::kIdFieldNumber;
const int equip_contrato::kIsSasgcFieldNumber;
const int equip_contrato::kTipoVeiculoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_contrato::equip_contrato()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_contrato)
}

void equip_contrato::InitAsDefaultInstance() {
}

equip_contrato::equip_contrato(const equip_contrato& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_contrato)
}

void equip_contrato::SharedCtor() {
  _cached_size_ = 0;
  esn_ = GOOGLE_LONGLONG(0);
  clioid_ = 0;
  connumero_ = 0;
  veioid_ = 0;
  tipo_contrato_ = 0;
  classe_ = 0;
  protocolo_ = 0;
  serial_ = 0;
  porta_panico_ = 0;
  porta_bloqueio_ = 0;
  id_ = 0;
  is_sasgc_ = 0;
  tipo_veiculo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_contrato::~equip_contrato() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_contrato)
  SharedDtor();
}

void equip_contrato::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equip_contrato::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_contrato::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_contrato_descriptor_;
}

const equip_contrato& equip_contrato::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_contrato* equip_contrato::default_instance_ = NULL;

equip_contrato* equip_contrato::New(::google::protobuf::Arena* arena) const {
  equip_contrato* n = new equip_contrato;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_contrato::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_contrato*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(clioid_, protocolo_);
    esn_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(serial_, tipo_veiculo_);
  }

#undef ZR_HELPER_
#undef ZR_

  gerenciadora_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_contrato::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_contrato)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 esn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &esn_)));
          set_has_esn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_clioid;
        break;
      }

      // optional int32 clioid = 2;
      case 2: {
        if (tag == 16) {
         parse_clioid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clioid_)));
          set_has_clioid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gerenciadora;
        break;
      }

      // repeated int32 gerenciadora = 3;
      case 3: {
        if (tag == 24) {
         parse_gerenciadora:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_gerenciadora())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gerenciadora())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gerenciadora;
        if (input->ExpectTag(32)) goto parse_connumero;
        break;
      }

      // optional int32 connumero = 4;
      case 4: {
        if (tag == 32) {
         parse_connumero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connumero_)));
          set_has_connumero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_veioid;
        break;
      }

      // optional int32 veioid = 5;
      case 5: {
        if (tag == 40) {
         parse_veioid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &veioid_)));
          set_has_veioid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tipo_contrato;
        break;
      }

      // optional int32 tipo_contrato = 6;
      case 6: {
        if (tag == 48) {
         parse_tipo_contrato:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipo_contrato_)));
          set_has_tipo_contrato();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_classe;
        break;
      }

      // optional int32 classe = 7;
      case 7: {
        if (tag == 56) {
         parse_classe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classe_)));
          set_has_classe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_protocolo;
        break;
      }

      // optional int32 protocolo = 8;
      case 8: {
        if (tag == 64) {
         parse_protocolo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolo_)));
          set_has_protocolo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_serial;
        break;
      }

      // optional int32 serial = 9;
      case 9: {
        if (tag == 72) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_porta_panico;
        break;
      }

      // optional int32 porta_panico = 10;
      case 10: {
        if (tag == 80) {
         parse_porta_panico:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &porta_panico_)));
          set_has_porta_panico();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_porta_bloqueio;
        break;
      }

      // optional int32 porta_bloqueio = 11;
      case 11: {
        if (tag == 88) {
         parse_porta_bloqueio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &porta_bloqueio_)));
          set_has_porta_bloqueio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_id;
        break;
      }

      // optional int32 id = 12;
      case 12: {
        if (tag == 96) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_sasgc;
        break;
      }

      // optional int32 is_sasgc = 13;
      case 13: {
        if (tag == 104) {
         parse_is_sasgc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sasgc_)));
          set_has_is_sasgc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tipo_veiculo;
        break;
      }

      // optional int32 tipo_veiculo = 14;
      case 14: {
        if (tag == 112) {
         parse_tipo_veiculo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipo_veiculo_)));
          set_has_tipo_veiculo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_contrato)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_contrato)
  return false;
#undef DO_
}

void equip_contrato::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_contrato)
  // optional int64 esn = 1;
  if (has_esn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->esn(), output);
  }

  // optional int32 clioid = 2;
  if (has_clioid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clioid(), output);
  }

  // repeated int32 gerenciadora = 3;
  for (int i = 0; i < this->gerenciadora_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->gerenciadora(i), output);
  }

  // optional int32 connumero = 4;
  if (has_connumero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connumero(), output);
  }

  // optional int32 veioid = 5;
  if (has_veioid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->veioid(), output);
  }

  // optional int32 tipo_contrato = 6;
  if (has_tipo_contrato()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tipo_contrato(), output);
  }

  // optional int32 classe = 7;
  if (has_classe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->classe(), output);
  }

  // optional int32 protocolo = 8;
  if (has_protocolo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->protocolo(), output);
  }

  // optional int32 serial = 9;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->serial(), output);
  }

  // optional int32 porta_panico = 10;
  if (has_porta_panico()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->porta_panico(), output);
  }

  // optional int32 porta_bloqueio = 11;
  if (has_porta_bloqueio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->porta_bloqueio(), output);
  }

  // optional int32 id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->id(), output);
  }

  // optional int32 is_sasgc = 13;
  if (has_is_sasgc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->is_sasgc(), output);
  }

  // optional int32 tipo_veiculo = 14;
  if (has_tipo_veiculo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tipo_veiculo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_contrato)
}

::google::protobuf::uint8* equip_contrato::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_contrato)
  // optional int64 esn = 1;
  if (has_esn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->esn(), target);
  }

  // optional int32 clioid = 2;
  if (has_clioid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clioid(), target);
  }

  // repeated int32 gerenciadora = 3;
  for (int i = 0; i < this->gerenciadora_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->gerenciadora(i), target);
  }

  // optional int32 connumero = 4;
  if (has_connumero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connumero(), target);
  }

  // optional int32 veioid = 5;
  if (has_veioid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->veioid(), target);
  }

  // optional int32 tipo_contrato = 6;
  if (has_tipo_contrato()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tipo_contrato(), target);
  }

  // optional int32 classe = 7;
  if (has_classe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->classe(), target);
  }

  // optional int32 protocolo = 8;
  if (has_protocolo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->protocolo(), target);
  }

  // optional int32 serial = 9;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->serial(), target);
  }

  // optional int32 porta_panico = 10;
  if (has_porta_panico()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->porta_panico(), target);
  }

  // optional int32 porta_bloqueio = 11;
  if (has_porta_bloqueio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->porta_bloqueio(), target);
  }

  // optional int32 id = 12;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->id(), target);
  }

  // optional int32 is_sasgc = 13;
  if (has_is_sasgc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->is_sasgc(), target);
  }

  // optional int32 tipo_veiculo = 14;
  if (has_tipo_veiculo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tipo_veiculo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_contrato)
  return target;
}

int equip_contrato::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 251u) {
    // optional int64 esn = 1;
    if (has_esn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->esn());
    }

    // optional int32 clioid = 2;
    if (has_clioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clioid());
    }

    // optional int32 connumero = 4;
    if (has_connumero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connumero());
    }

    // optional int32 veioid = 5;
    if (has_veioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->veioid());
    }

    // optional int32 tipo_contrato = 6;
    if (has_tipo_contrato()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tipo_contrato());
    }

    // optional int32 classe = 7;
    if (has_classe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classe());
    }

    // optional int32 protocolo = 8;
    if (has_protocolo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolo());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 serial = 9;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

    // optional int32 porta_panico = 10;
    if (has_porta_panico()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->porta_panico());
    }

    // optional int32 porta_bloqueio = 11;
    if (has_porta_bloqueio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->porta_bloqueio());
    }

    // optional int32 id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 is_sasgc = 13;
    if (has_is_sasgc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sasgc());
    }

    // optional int32 tipo_veiculo = 14;
    if (has_tipo_veiculo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tipo_veiculo());
    }

  }
  // repeated int32 gerenciadora = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gerenciadora_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gerenciadora(i));
    }
    total_size += 1 * this->gerenciadora_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_contrato::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_contrato* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_contrato>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_contrato::MergeFrom(const equip_contrato& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  gerenciadora_.MergeFrom(from.gerenciadora_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_esn()) {
      set_esn(from.esn());
    }
    if (from.has_clioid()) {
      set_clioid(from.clioid());
    }
    if (from.has_connumero()) {
      set_connumero(from.connumero());
    }
    if (from.has_veioid()) {
      set_veioid(from.veioid());
    }
    if (from.has_tipo_contrato()) {
      set_tipo_contrato(from.tipo_contrato());
    }
    if (from.has_classe()) {
      set_classe(from.classe());
    }
    if (from.has_protocolo()) {
      set_protocolo(from.protocolo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_porta_panico()) {
      set_porta_panico(from.porta_panico());
    }
    if (from.has_porta_bloqueio()) {
      set_porta_bloqueio(from.porta_bloqueio());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_sasgc()) {
      set_is_sasgc(from.is_sasgc());
    }
    if (from.has_tipo_veiculo()) {
      set_tipo_veiculo(from.tipo_veiculo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_contrato::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_contrato::CopyFrom(const equip_contrato& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_contrato::IsInitialized() const {

  return true;
}

void equip_contrato::Swap(equip_contrato* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_contrato::InternalSwap(equip_contrato* other) {
  std::swap(esn_, other->esn_);
  std::swap(clioid_, other->clioid_);
  gerenciadora_.UnsafeArenaSwap(&other->gerenciadora_);
  std::swap(connumero_, other->connumero_);
  std::swap(veioid_, other->veioid_);
  std::swap(tipo_contrato_, other->tipo_contrato_);
  std::swap(classe_, other->classe_);
  std::swap(protocolo_, other->protocolo_);
  std::swap(serial_, other->serial_);
  std::swap(porta_panico_, other->porta_panico_);
  std::swap(porta_bloqueio_, other->porta_bloqueio_);
  std::swap(id_, other->id_);
  std::swap(is_sasgc_, other->is_sasgc_);
  std::swap(tipo_veiculo_, other->tipo_veiculo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_contrato::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_contrato_descriptor_;
  metadata.reflection = equip_contrato_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_contrato

// optional int64 esn = 1;
bool equip_contrato::has_esn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_contrato::set_has_esn() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_contrato::clear_has_esn() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_contrato::clear_esn() {
  esn_ = GOOGLE_LONGLONG(0);
  clear_has_esn();
}
 ::google::protobuf::int64 equip_contrato::esn() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.esn)
  return esn_;
}
 void equip_contrato::set_esn(::google::protobuf::int64 value) {
  set_has_esn();
  esn_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.esn)
}

// optional int32 clioid = 2;
bool equip_contrato::has_clioid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_contrato::set_has_clioid() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_contrato::clear_has_clioid() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_contrato::clear_clioid() {
  clioid_ = 0;
  clear_has_clioid();
}
 ::google::protobuf::int32 equip_contrato::clioid() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.clioid)
  return clioid_;
}
 void equip_contrato::set_clioid(::google::protobuf::int32 value) {
  set_has_clioid();
  clioid_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.clioid)
}

// repeated int32 gerenciadora = 3;
int equip_contrato::gerenciadora_size() const {
  return gerenciadora_.size();
}
void equip_contrato::clear_gerenciadora() {
  gerenciadora_.Clear();
}
 ::google::protobuf::int32 equip_contrato::gerenciadora(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.gerenciadora)
  return gerenciadora_.Get(index);
}
 void equip_contrato::set_gerenciadora(int index, ::google::protobuf::int32 value) {
  gerenciadora_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.gerenciadora)
}
 void equip_contrato::add_gerenciadora(::google::protobuf::int32 value) {
  gerenciadora_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_contrato.gerenciadora)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_contrato::gerenciadora() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_contrato.gerenciadora)
  return gerenciadora_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_contrato::mutable_gerenciadora() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_contrato.gerenciadora)
  return &gerenciadora_;
}

// optional int32 connumero = 4;
bool equip_contrato::has_connumero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void equip_contrato::set_has_connumero() {
  _has_bits_[0] |= 0x00000008u;
}
void equip_contrato::clear_has_connumero() {
  _has_bits_[0] &= ~0x00000008u;
}
void equip_contrato::clear_connumero() {
  connumero_ = 0;
  clear_has_connumero();
}
 ::google::protobuf::int32 equip_contrato::connumero() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.connumero)
  return connumero_;
}
 void equip_contrato::set_connumero(::google::protobuf::int32 value) {
  set_has_connumero();
  connumero_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.connumero)
}

// optional int32 veioid = 5;
bool equip_contrato::has_veioid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void equip_contrato::set_has_veioid() {
  _has_bits_[0] |= 0x00000010u;
}
void equip_contrato::clear_has_veioid() {
  _has_bits_[0] &= ~0x00000010u;
}
void equip_contrato::clear_veioid() {
  veioid_ = 0;
  clear_has_veioid();
}
 ::google::protobuf::int32 equip_contrato::veioid() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.veioid)
  return veioid_;
}
 void equip_contrato::set_veioid(::google::protobuf::int32 value) {
  set_has_veioid();
  veioid_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.veioid)
}

// optional int32 tipo_contrato = 6;
bool equip_contrato::has_tipo_contrato() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void equip_contrato::set_has_tipo_contrato() {
  _has_bits_[0] |= 0x00000020u;
}
void equip_contrato::clear_has_tipo_contrato() {
  _has_bits_[0] &= ~0x00000020u;
}
void equip_contrato::clear_tipo_contrato() {
  tipo_contrato_ = 0;
  clear_has_tipo_contrato();
}
 ::google::protobuf::int32 equip_contrato::tipo_contrato() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.tipo_contrato)
  return tipo_contrato_;
}
 void equip_contrato::set_tipo_contrato(::google::protobuf::int32 value) {
  set_has_tipo_contrato();
  tipo_contrato_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.tipo_contrato)
}

// optional int32 classe = 7;
bool equip_contrato::has_classe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void equip_contrato::set_has_classe() {
  _has_bits_[0] |= 0x00000040u;
}
void equip_contrato::clear_has_classe() {
  _has_bits_[0] &= ~0x00000040u;
}
void equip_contrato::clear_classe() {
  classe_ = 0;
  clear_has_classe();
}
 ::google::protobuf::int32 equip_contrato::classe() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.classe)
  return classe_;
}
 void equip_contrato::set_classe(::google::protobuf::int32 value) {
  set_has_classe();
  classe_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.classe)
}

// optional int32 protocolo = 8;
bool equip_contrato::has_protocolo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void equip_contrato::set_has_protocolo() {
  _has_bits_[0] |= 0x00000080u;
}
void equip_contrato::clear_has_protocolo() {
  _has_bits_[0] &= ~0x00000080u;
}
void equip_contrato::clear_protocolo() {
  protocolo_ = 0;
  clear_has_protocolo();
}
 ::google::protobuf::int32 equip_contrato::protocolo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.protocolo)
  return protocolo_;
}
 void equip_contrato::set_protocolo(::google::protobuf::int32 value) {
  set_has_protocolo();
  protocolo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.protocolo)
}

// optional int32 serial = 9;
bool equip_contrato::has_serial() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void equip_contrato::set_has_serial() {
  _has_bits_[0] |= 0x00000100u;
}
void equip_contrato::clear_has_serial() {
  _has_bits_[0] &= ~0x00000100u;
}
void equip_contrato::clear_serial() {
  serial_ = 0;
  clear_has_serial();
}
 ::google::protobuf::int32 equip_contrato::serial() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.serial)
  return serial_;
}
 void equip_contrato::set_serial(::google::protobuf::int32 value) {
  set_has_serial();
  serial_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.serial)
}

// optional int32 porta_panico = 10;
bool equip_contrato::has_porta_panico() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void equip_contrato::set_has_porta_panico() {
  _has_bits_[0] |= 0x00000200u;
}
void equip_contrato::clear_has_porta_panico() {
  _has_bits_[0] &= ~0x00000200u;
}
void equip_contrato::clear_porta_panico() {
  porta_panico_ = 0;
  clear_has_porta_panico();
}
 ::google::protobuf::int32 equip_contrato::porta_panico() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.porta_panico)
  return porta_panico_;
}
 void equip_contrato::set_porta_panico(::google::protobuf::int32 value) {
  set_has_porta_panico();
  porta_panico_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.porta_panico)
}

// optional int32 porta_bloqueio = 11;
bool equip_contrato::has_porta_bloqueio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void equip_contrato::set_has_porta_bloqueio() {
  _has_bits_[0] |= 0x00000400u;
}
void equip_contrato::clear_has_porta_bloqueio() {
  _has_bits_[0] &= ~0x00000400u;
}
void equip_contrato::clear_porta_bloqueio() {
  porta_bloqueio_ = 0;
  clear_has_porta_bloqueio();
}
 ::google::protobuf::int32 equip_contrato::porta_bloqueio() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.porta_bloqueio)
  return porta_bloqueio_;
}
 void equip_contrato::set_porta_bloqueio(::google::protobuf::int32 value) {
  set_has_porta_bloqueio();
  porta_bloqueio_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.porta_bloqueio)
}

// optional int32 id = 12;
bool equip_contrato::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void equip_contrato::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
void equip_contrato::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void equip_contrato::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 equip_contrato::id() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.id)
  return id_;
}
 void equip_contrato::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.id)
}

// optional int32 is_sasgc = 13;
bool equip_contrato::has_is_sasgc() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void equip_contrato::set_has_is_sasgc() {
  _has_bits_[0] |= 0x00001000u;
}
void equip_contrato::clear_has_is_sasgc() {
  _has_bits_[0] &= ~0x00001000u;
}
void equip_contrato::clear_is_sasgc() {
  is_sasgc_ = 0;
  clear_has_is_sasgc();
}
 ::google::protobuf::int32 equip_contrato::is_sasgc() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.is_sasgc)
  return is_sasgc_;
}
 void equip_contrato::set_is_sasgc(::google::protobuf::int32 value) {
  set_has_is_sasgc();
  is_sasgc_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.is_sasgc)
}

// optional int32 tipo_veiculo = 14;
bool equip_contrato::has_tipo_veiculo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void equip_contrato::set_has_tipo_veiculo() {
  _has_bits_[0] |= 0x00002000u;
}
void equip_contrato::clear_has_tipo_veiculo() {
  _has_bits_[0] &= ~0x00002000u;
}
void equip_contrato::clear_tipo_veiculo() {
  tipo_veiculo_ = 0;
  clear_has_tipo_veiculo();
}
 ::google::protobuf::int32 equip_contrato::tipo_veiculo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_contrato.tipo_veiculo)
  return tipo_veiculo_;
}
 void equip_contrato::set_tipo_veiculo(::google::protobuf::int32 value) {
  set_has_tipo_veiculo();
  tipo_veiculo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_contrato.tipo_veiculo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int equip_posicao::kDatahoraFieldNumber;
const int equip_posicao::kDatachegadaFieldNumber;
const int equip_posicao::kEntradaFieldNumber;
const int equip_posicao::kSaidaFieldNumber;
const int equip_posicao::kLat2FieldNumber;
const int equip_posicao::kLong2FieldNumber;
const int equip_posicao::kOdoVelGpsFieldNumber;
const int equip_posicao::kIdPontoFieldNumber;
const int equip_posicao::kFlagsFieldNumber;
const int equip_posicao::kCsqIdRotaFieldNumber;
const int equip_posicao::kSaidaCfgFieldNumber;
const int equip_posicao::kEntradaGpsInfoFieldNumber;
const int equip_posicao::kIndicePosicaoFieldNumber;
const int equip_posicao::kGpsAltitudeFieldNumber;
const int equip_posicao::kInfMotoristaFieldNumber;
const int equip_posicao::kInfoHorimetroFieldNumber;
const int equip_posicao::kTmpUltValFieldNumber;
const int equip_posicao::kAd1FieldNumber;
const int equip_posicao::kAd2FieldNumber;
const int equip_posicao::kAd3FieldNumber;
const int equip_posicao::kAd4FieldNumber;
const int equip_posicao::kEstadoSegurancaSaidasFieldNumber;
const int equip_posicao::kEstadoSegurancaEntradasFieldNumber;
const int equip_posicao::kVccAlimFieldNumber;
const int equip_posicao::kIdAreaFieldNumber;
const int equip_posicao::kInfoTelemetriaFieldNumber;
const int equip_posicao::kTipoFieldNumber;
const int equip_posicao::kOrigemFieldNumber;
const int equip_posicao::kPontoRefFieldNumber;
const int equip_posicao::kDistRefFieldNumber;
const int equip_posicao::kAngRefFieldNumber;
const int equip_posicao::kRotaFieldNumber;
const int equip_posicao::kOperacaoFieldNumber;
const int equip_posicao::kEventoflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

equip_posicao::equip_posicao()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.equip_posicao)
}

void equip_posicao::InitAsDefaultInstance() {
  odo_vel_gps_ = const_cast< ::pacote_posicao::t32_odo_vel*>(&::pacote_posicao::t32_odo_vel::default_instance());
  flags_ = const_cast< ::pacote_posicao::t32_flags*>(&::pacote_posicao::t32_flags::default_instance());
  csq_id_rota_ = const_cast< ::pacote_posicao::t32_csq_rot*>(&::pacote_posicao::t32_csq_rot::default_instance());
  saida_cfg_ = const_cast< ::pacote_posicao::t32_sai_cfg*>(&::pacote_posicao::t32_sai_cfg::default_instance());
  entrada_gps_info_ = const_cast< ::pacote_posicao::t32_ent_gpsi*>(&::pacote_posicao::t32_ent_gpsi::default_instance());
  inf_motorista_ = const_cast< ::pacote_posicao::t32_inf_mot*>(&::pacote_posicao::t32_inf_mot::default_instance());
  info_horimetro_ = const_cast< ::pacote_posicao::t32_horimetro*>(&::pacote_posicao::t32_horimetro::default_instance());
  info_telemetria_ = const_cast< ::pacote_posicao::t_telemetria*>(&::pacote_posicao::t_telemetria::default_instance());
  eventoflag_ = const_cast< ::pacote_posicao::equip_flags*>(&::pacote_posicao::equip_flags::default_instance());
}

equip_posicao::equip_posicao(const equip_posicao& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.equip_posicao)
}

void equip_posicao::SharedCtor() {
  _cached_size_ = 0;
  datahora_ = 0;
  datachegada_ = 0;
  lat2_ = 0;
  long2_ = 0;
  odo_vel_gps_ = NULL;
  id_ponto_ = 0;
  flags_ = NULL;
  csq_id_rota_ = NULL;
  saida_cfg_ = NULL;
  entrada_gps_info_ = NULL;
  indice_posicao_ = 0;
  gps_altitude_ = 0;
  inf_motorista_ = NULL;
  info_horimetro_ = NULL;
  tmp_ult_val_ = 0;
  ad1_ = 0;
  ad2_ = 0;
  ad3_ = 0;
  ad4_ = 0;
  estado_seguranca_saidas_ = 0;
  estado_seguranca_entradas_ = 0;
  vcc_alim_ = 0;
  id_area_ = 0;
  info_telemetria_ = NULL;
  tipo_ = 0;
  origem_ = 0;
  eventoflag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equip_posicao::~equip_posicao() {
  // @@protoc_insertion_point(destructor:pacote_posicao.equip_posicao)
  SharedDtor();
}

void equip_posicao::SharedDtor() {
  if (this != default_instance_) {
    delete odo_vel_gps_;
    delete flags_;
    delete csq_id_rota_;
    delete saida_cfg_;
    delete entrada_gps_info_;
    delete inf_motorista_;
    delete info_horimetro_;
    delete info_telemetria_;
    delete eventoflag_;
  }
}

void equip_posicao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equip_posicao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equip_posicao_descriptor_;
}

const equip_posicao& equip_posicao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

equip_posicao* equip_posicao::default_instance_ = NULL;

equip_posicao* equip_posicao::New(::google::protobuf::Arena* arena) const {
  equip_posicao* n = new equip_posicao;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void equip_posicao::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<equip_posicao*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 243u) {
    ZR_(datahora_, datachegada_);
    ZR_(lat2_, long2_);
    if (has_odo_vel_gps()) {
      if (odo_vel_gps_ != NULL) odo_vel_gps_->::pacote_posicao::t32_odo_vel::Clear();
    }
    id_ponto_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_flags()) {
      if (flags_ != NULL) flags_->::pacote_posicao::t32_flags::Clear();
    }
    if (has_csq_id_rota()) {
      if (csq_id_rota_ != NULL) csq_id_rota_->::pacote_posicao::t32_csq_rot::Clear();
    }
    if (has_saida_cfg()) {
      if (saida_cfg_ != NULL) saida_cfg_->::pacote_posicao::t32_sai_cfg::Clear();
    }
    if (has_entrada_gps_info()) {
      if (entrada_gps_info_ != NULL) entrada_gps_info_->::pacote_posicao::t32_ent_gpsi::Clear();
    }
    indice_posicao_ = 0;
    gps_altitude_ = 0;
    if (has_inf_motorista()) {
      if (inf_motorista_ != NULL) inf_motorista_->::pacote_posicao::t32_inf_mot::Clear();
    }
    if (has_info_horimetro()) {
      if (info_horimetro_ != NULL) info_horimetro_->::pacote_posicao::t32_horimetro::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(ad1_, vcc_alim_);
    tmp_ult_val_ = 0;
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    ZR_(tipo_, origem_);
    id_area_ = 0;
    if (has_info_telemetria()) {
      if (info_telemetria_ != NULL) info_telemetria_->::pacote_posicao::t_telemetria::Clear();
    }
  }
  if (has_eventoflag()) {
    if (eventoflag_ != NULL) eventoflag_->::pacote_posicao::equip_flags::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  entrada_.Clear();
  saida_.Clear();
  ponto_ref_.Clear();
  dist_ref_.Clear();
  ang_ref_.Clear();
  rota_.Clear();
  operacao_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool equip_posicao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.equip_posicao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 datahora = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datahora_)));
          set_has_datahora();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_datachegada;
        break;
      }

      // optional int32 datachegada = 2;
      case 2: {
        if (tag == 16) {
         parse_datachegada:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datachegada_)));
          set_has_datachegada();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entrada;
        break;
      }

      // repeated int32 entrada = 3;
      case 3: {
        if (tag == 24) {
         parse_entrada:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_entrada())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entrada())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entrada;
        if (input->ExpectTag(32)) goto parse_saida;
        break;
      }

      // repeated int32 saida = 4;
      case 4: {
        if (tag == 32) {
         parse_saida:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_saida())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_saida())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_saida;
        if (input->ExpectTag(41)) goto parse_lat2;
        break;
      }

      // optional double lat2 = 5;
      case 5: {
        if (tag == 41) {
         parse_lat2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat2_)));
          set_has_lat2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_long2;
        break;
      }

      // optional double long2 = 6;
      case 6: {
        if (tag == 49) {
         parse_long2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long2_)));
          set_has_long2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_odo_vel_gps;
        break;
      }

      // optional .pacote_posicao.t32_odo_vel odo_vel_gps = 7;
      case 7: {
        if (tag == 58) {
         parse_odo_vel_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odo_vel_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_id_ponto;
        break;
      }

      // optional int32 id_ponto = 8;
      case 8: {
        if (tag == 64) {
         parse_id_ponto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_ponto_)));
          set_has_id_ponto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_flags;
        break;
      }

      // optional .pacote_posicao.t32_flags flags = 9;
      case 9: {
        if (tag == 74) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_csq_id_rota;
        break;
      }

      // optional .pacote_posicao.t32_csq_rot csq_id_rota = 10;
      case 10: {
        if (tag == 82) {
         parse_csq_id_rota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csq_id_rota()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_saida_cfg;
        break;
      }

      // optional .pacote_posicao.t32_sai_cfg saida_cfg = 11;
      case 11: {
        if (tag == 90) {
         parse_saida_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saida_cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_entrada_gps_info;
        break;
      }

      // optional .pacote_posicao.t32_ent_gpsi entrada_gps_info = 12;
      case 12: {
        if (tag == 98) {
         parse_entrada_gps_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entrada_gps_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_indice_posicao;
        break;
      }

      // optional int32 indice_posicao = 13;
      case 13: {
        if (tag == 104) {
         parse_indice_posicao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indice_posicao_)));
          set_has_indice_posicao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gps_altitude;
        break;
      }

      // optional int32 gps_altitude = 14;
      case 14: {
        if (tag == 112) {
         parse_gps_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_altitude_)));
          set_has_gps_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_inf_motorista;
        break;
      }

      // optional .pacote_posicao.t32_inf_mot inf_motorista = 15;
      case 15: {
        if (tag == 122) {
         parse_inf_motorista:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inf_motorista()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_info_horimetro;
        break;
      }

      // optional .pacote_posicao.t32_horimetro info_horimetro = 16;
      case 16: {
        if (tag == 130) {
         parse_info_horimetro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_horimetro()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tmp_ult_val;
        break;
      }

      // optional int32 tmp_ult_val = 17;
      case 17: {
        if (tag == 136) {
         parse_tmp_ult_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmp_ult_val_)));
          set_has_tmp_ult_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ad1;
        break;
      }

      // optional int32 ad1 = 18;
      case 18: {
        if (tag == 144) {
         parse_ad1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad1_)));
          set_has_ad1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ad2;
        break;
      }

      // optional int32 ad2 = 19;
      case 19: {
        if (tag == 152) {
         parse_ad2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad2_)));
          set_has_ad2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ad3;
        break;
      }

      // optional int32 ad3 = 20;
      case 20: {
        if (tag == 160) {
         parse_ad3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad3_)));
          set_has_ad3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ad4;
        break;
      }

      // optional int32 ad4 = 21;
      case 21: {
        if (tag == 168) {
         parse_ad4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad4_)));
          set_has_ad4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_estado_seguranca_saidas;
        break;
      }

      // optional int32 estado_seguranca_saidas = 22;
      case 22: {
        if (tag == 176) {
         parse_estado_seguranca_saidas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estado_seguranca_saidas_)));
          set_has_estado_seguranca_saidas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_estado_seguranca_entradas;
        break;
      }

      // optional int32 estado_seguranca_entradas = 23;
      case 23: {
        if (tag == 184) {
         parse_estado_seguranca_entradas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estado_seguranca_entradas_)));
          set_has_estado_seguranca_entradas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_vcc_alim;
        break;
      }

      // optional int32 vcc_alim = 24;
      case 24: {
        if (tag == 192) {
         parse_vcc_alim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcc_alim_)));
          set_has_vcc_alim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_id_area;
        break;
      }

      // optional int32 id_area = 25;
      case 25: {
        if (tag == 200) {
         parse_id_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_area_)));
          set_has_id_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_info_telemetria;
        break;
      }

      // optional .pacote_posicao.t_telemetria info_telemetria = 26;
      case 26: {
        if (tag == 210) {
         parse_info_telemetria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_telemetria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_tipo;
        break;
      }

      // optional int32 tipo = 27;
      case 27: {
        if (tag == 216) {
         parse_tipo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipo_)));
          set_has_tipo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_origem;
        break;
      }

      // optional int32 origem = 28;
      case 28: {
        if (tag == 224) {
         parse_origem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origem_)));
          set_has_origem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_ponto_ref;
        break;
      }

      // repeated int32 ponto_ref = 29;
      case 29: {
        if (tag == 232) {
         parse_ponto_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 232, input, this->mutable_ponto_ref())));
        } else if (tag == 234) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ponto_ref())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_ponto_ref;
        if (input->ExpectTag(240)) goto parse_dist_ref;
        break;
      }

      // repeated int32 dist_ref = 30;
      case 30: {
        if (tag == 240) {
         parse_dist_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_dist_ref())));
        } else if (tag == 242) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dist_ref())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_dist_ref;
        if (input->ExpectTag(248)) goto parse_ang_ref;
        break;
      }

      // repeated int32 ang_ref = 31;
      case 31: {
        if (tag == 248) {
         parse_ang_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 248, input, this->mutable_ang_ref())));
        } else if (tag == 250) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ang_ref())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_ang_ref;
        if (input->ExpectTag(256)) goto parse_rota;
        break;
      }

      // repeated int32 rota = 32;
      case 32: {
        if (tag == 256) {
         parse_rota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256, input, this->mutable_rota())));
        } else if (tag == 258) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rota())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_rota;
        if (input->ExpectTag(264)) goto parse_operacao;
        break;
      }

      // repeated int32 operacao = 33;
      case 33: {
        if (tag == 264) {
         parse_operacao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 264, input, this->mutable_operacao())));
        } else if (tag == 266) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_operacao())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_operacao;
        if (input->ExpectTag(274)) goto parse_eventoflag;
        break;
      }

      // optional .pacote_posicao.equip_flags eventoflag = 34;
      case 34: {
        if (tag == 274) {
         parse_eventoflag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventoflag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.equip_posicao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.equip_posicao)
  return false;
#undef DO_
}

void equip_posicao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.equip_posicao)
  // optional int32 datahora = 1;
  if (has_datahora()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datahora(), output);
  }

  // optional int32 datachegada = 2;
  if (has_datachegada()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datachegada(), output);
  }

  // repeated int32 entrada = 3;
  for (int i = 0; i < this->entrada_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->entrada(i), output);
  }

  // repeated int32 saida = 4;
  for (int i = 0; i < this->saida_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->saida(i), output);
  }

  // optional double lat2 = 5;
  if (has_lat2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lat2(), output);
  }

  // optional double long2 = 6;
  if (has_long2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->long2(), output);
  }

  // optional .pacote_posicao.t32_odo_vel odo_vel_gps = 7;
  if (has_odo_vel_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->odo_vel_gps_, output);
  }

  // optional int32 id_ponto = 8;
  if (has_id_ponto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id_ponto(), output);
  }

  // optional .pacote_posicao.t32_flags flags = 9;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->flags_, output);
  }

  // optional .pacote_posicao.t32_csq_rot csq_id_rota = 10;
  if (has_csq_id_rota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->csq_id_rota_, output);
  }

  // optional .pacote_posicao.t32_sai_cfg saida_cfg = 11;
  if (has_saida_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->saida_cfg_, output);
  }

  // optional .pacote_posicao.t32_ent_gpsi entrada_gps_info = 12;
  if (has_entrada_gps_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->entrada_gps_info_, output);
  }

  // optional int32 indice_posicao = 13;
  if (has_indice_posicao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->indice_posicao(), output);
  }

  // optional int32 gps_altitude = 14;
  if (has_gps_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gps_altitude(), output);
  }

  // optional .pacote_posicao.t32_inf_mot inf_motorista = 15;
  if (has_inf_motorista()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->inf_motorista_, output);
  }

  // optional .pacote_posicao.t32_horimetro info_horimetro = 16;
  if (has_info_horimetro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->info_horimetro_, output);
  }

  // optional int32 tmp_ult_val = 17;
  if (has_tmp_ult_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tmp_ult_val(), output);
  }

  // optional int32 ad1 = 18;
  if (has_ad1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ad1(), output);
  }

  // optional int32 ad2 = 19;
  if (has_ad2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ad2(), output);
  }

  // optional int32 ad3 = 20;
  if (has_ad3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ad3(), output);
  }

  // optional int32 ad4 = 21;
  if (has_ad4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->ad4(), output);
  }

  // optional int32 estado_seguranca_saidas = 22;
  if (has_estado_seguranca_saidas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->estado_seguranca_saidas(), output);
  }

  // optional int32 estado_seguranca_entradas = 23;
  if (has_estado_seguranca_entradas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->estado_seguranca_entradas(), output);
  }

  // optional int32 vcc_alim = 24;
  if (has_vcc_alim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->vcc_alim(), output);
  }

  // optional int32 id_area = 25;
  if (has_id_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->id_area(), output);
  }

  // optional .pacote_posicao.t_telemetria info_telemetria = 26;
  if (has_info_telemetria()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->info_telemetria_, output);
  }

  // optional int32 tipo = 27;
  if (has_tipo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->tipo(), output);
  }

  // optional int32 origem = 28;
  if (has_origem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->origem(), output);
  }

  // repeated int32 ponto_ref = 29;
  for (int i = 0; i < this->ponto_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      29, this->ponto_ref(i), output);
  }

  // repeated int32 dist_ref = 30;
  for (int i = 0; i < this->dist_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->dist_ref(i), output);
  }

  // repeated int32 ang_ref = 31;
  for (int i = 0; i < this->ang_ref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      31, this->ang_ref(i), output);
  }

  // repeated int32 rota = 32;
  for (int i = 0; i < this->rota_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->rota(i), output);
  }

  // repeated int32 operacao = 33;
  for (int i = 0; i < this->operacao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      33, this->operacao(i), output);
  }

  // optional .pacote_posicao.equip_flags eventoflag = 34;
  if (has_eventoflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->eventoflag_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.equip_posicao)
}

::google::protobuf::uint8* equip_posicao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.equip_posicao)
  // optional int32 datahora = 1;
  if (has_datahora()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->datahora(), target);
  }

  // optional int32 datachegada = 2;
  if (has_datachegada()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datachegada(), target);
  }

  // repeated int32 entrada = 3;
  for (int i = 0; i < this->entrada_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->entrada(i), target);
  }

  // repeated int32 saida = 4;
  for (int i = 0; i < this->saida_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->saida(i), target);
  }

  // optional double lat2 = 5;
  if (has_lat2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lat2(), target);
  }

  // optional double long2 = 6;
  if (has_long2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->long2(), target);
  }

  // optional .pacote_posicao.t32_odo_vel odo_vel_gps = 7;
  if (has_odo_vel_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->odo_vel_gps_, target);
  }

  // optional int32 id_ponto = 8;
  if (has_id_ponto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id_ponto(), target);
  }

  // optional .pacote_posicao.t32_flags flags = 9;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->flags_, target);
  }

  // optional .pacote_posicao.t32_csq_rot csq_id_rota = 10;
  if (has_csq_id_rota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->csq_id_rota_, target);
  }

  // optional .pacote_posicao.t32_sai_cfg saida_cfg = 11;
  if (has_saida_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->saida_cfg_, target);
  }

  // optional .pacote_posicao.t32_ent_gpsi entrada_gps_info = 12;
  if (has_entrada_gps_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->entrada_gps_info_, target);
  }

  // optional int32 indice_posicao = 13;
  if (has_indice_posicao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->indice_posicao(), target);
  }

  // optional int32 gps_altitude = 14;
  if (has_gps_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gps_altitude(), target);
  }

  // optional .pacote_posicao.t32_inf_mot inf_motorista = 15;
  if (has_inf_motorista()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->inf_motorista_, target);
  }

  // optional .pacote_posicao.t32_horimetro info_horimetro = 16;
  if (has_info_horimetro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->info_horimetro_, target);
  }

  // optional int32 tmp_ult_val = 17;
  if (has_tmp_ult_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tmp_ult_val(), target);
  }

  // optional int32 ad1 = 18;
  if (has_ad1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ad1(), target);
  }

  // optional int32 ad2 = 19;
  if (has_ad2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ad2(), target);
  }

  // optional int32 ad3 = 20;
  if (has_ad3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ad3(), target);
  }

  // optional int32 ad4 = 21;
  if (has_ad4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->ad4(), target);
  }

  // optional int32 estado_seguranca_saidas = 22;
  if (has_estado_seguranca_saidas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->estado_seguranca_saidas(), target);
  }

  // optional int32 estado_seguranca_entradas = 23;
  if (has_estado_seguranca_entradas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->estado_seguranca_entradas(), target);
  }

  // optional int32 vcc_alim = 24;
  if (has_vcc_alim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->vcc_alim(), target);
  }

  // optional int32 id_area = 25;
  if (has_id_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->id_area(), target);
  }

  // optional .pacote_posicao.t_telemetria info_telemetria = 26;
  if (has_info_telemetria()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, *this->info_telemetria_, target);
  }

  // optional int32 tipo = 27;
  if (has_tipo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->tipo(), target);
  }

  // optional int32 origem = 28;
  if (has_origem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->origem(), target);
  }

  // repeated int32 ponto_ref = 29;
  for (int i = 0; i < this->ponto_ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(29, this->ponto_ref(i), target);
  }

  // repeated int32 dist_ref = 30;
  for (int i = 0; i < this->dist_ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->dist_ref(i), target);
  }

  // repeated int32 ang_ref = 31;
  for (int i = 0; i < this->ang_ref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(31, this->ang_ref(i), target);
  }

  // repeated int32 rota = 32;
  for (int i = 0; i < this->rota_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(32, this->rota(i), target);
  }

  // repeated int32 operacao = 33;
  for (int i = 0; i < this->operacao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(33, this->operacao(i), target);
  }

  // optional .pacote_posicao.equip_flags eventoflag = 34;
  if (has_eventoflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, *this->eventoflag_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.equip_posicao)
  return target;
}

int equip_posicao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 243u) {
    // optional int32 datahora = 1;
    if (has_datahora()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datahora());
    }

    // optional int32 datachegada = 2;
    if (has_datachegada()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datachegada());
    }

    // optional double lat2 = 5;
    if (has_lat2()) {
      total_size += 1 + 8;
    }

    // optional double long2 = 6;
    if (has_long2()) {
      total_size += 1 + 8;
    }

    // optional .pacote_posicao.t32_odo_vel odo_vel_gps = 7;
    if (has_odo_vel_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->odo_vel_gps_);
    }

    // optional int32 id_ponto = 8;
    if (has_id_ponto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_ponto());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .pacote_posicao.t32_flags flags = 9;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flags_);
    }

    // optional .pacote_posicao.t32_csq_rot csq_id_rota = 10;
    if (has_csq_id_rota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->csq_id_rota_);
    }

    // optional .pacote_posicao.t32_sai_cfg saida_cfg = 11;
    if (has_saida_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->saida_cfg_);
    }

    // optional .pacote_posicao.t32_ent_gpsi entrada_gps_info = 12;
    if (has_entrada_gps_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->entrada_gps_info_);
    }

    // optional int32 indice_posicao = 13;
    if (has_indice_posicao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indice_posicao());
    }

    // optional int32 gps_altitude = 14;
    if (has_gps_altitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_altitude());
    }

    // optional .pacote_posicao.t32_inf_mot inf_motorista = 15;
    if (has_inf_motorista()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inf_motorista_);
    }

    // optional .pacote_posicao.t32_horimetro info_horimetro = 16;
    if (has_info_horimetro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_horimetro_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 tmp_ult_val = 17;
    if (has_tmp_ult_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmp_ult_val());
    }

    // optional int32 ad1 = 18;
    if (has_ad1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad1());
    }

    // optional int32 ad2 = 19;
    if (has_ad2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad2());
    }

    // optional int32 ad3 = 20;
    if (has_ad3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad3());
    }

    // optional int32 ad4 = 21;
    if (has_ad4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad4());
    }

    // optional int32 estado_seguranca_saidas = 22;
    if (has_estado_seguranca_saidas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estado_seguranca_saidas());
    }

    // optional int32 estado_seguranca_entradas = 23;
    if (has_estado_seguranca_entradas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estado_seguranca_entradas());
    }

    // optional int32 vcc_alim = 24;
    if (has_vcc_alim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vcc_alim());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional int32 id_area = 25;
    if (has_id_area()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_area());
    }

    // optional .pacote_posicao.t_telemetria info_telemetria = 26;
    if (has_info_telemetria()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_telemetria_);
    }

    // optional int32 tipo = 27;
    if (has_tipo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tipo());
    }

    // optional int32 origem = 28;
    if (has_origem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origem());
    }

  }
  // optional .pacote_posicao.equip_flags eventoflag = 34;
  if (has_eventoflag()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eventoflag_);
  }

  // repeated int32 entrada = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->entrada_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->entrada(i));
    }
    total_size += 1 * this->entrada_size() + data_size;
  }

  // repeated int32 saida = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->saida_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->saida(i));
    }
    total_size += 1 * this->saida_size() + data_size;
  }

  // repeated int32 ponto_ref = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->ponto_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ponto_ref(i));
    }
    total_size += 2 * this->ponto_ref_size() + data_size;
  }

  // repeated int32 dist_ref = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->dist_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dist_ref(i));
    }
    total_size += 2 * this->dist_ref_size() + data_size;
  }

  // repeated int32 ang_ref = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->ang_ref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ang_ref(i));
    }
    total_size += 2 * this->ang_ref_size() + data_size;
  }

  // repeated int32 rota = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->rota_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rota(i));
    }
    total_size += 2 * this->rota_size() + data_size;
  }

  // repeated int32 operacao = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->operacao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->operacao(i));
    }
    total_size += 2 * this->operacao_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equip_posicao::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const equip_posicao* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const equip_posicao>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equip_posicao::MergeFrom(const equip_posicao& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entrada_.MergeFrom(from.entrada_);
  saida_.MergeFrom(from.saida_);
  ponto_ref_.MergeFrom(from.ponto_ref_);
  dist_ref_.MergeFrom(from.dist_ref_);
  ang_ref_.MergeFrom(from.ang_ref_);
  rota_.MergeFrom(from.rota_);
  operacao_.MergeFrom(from.operacao_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datahora()) {
      set_datahora(from.datahora());
    }
    if (from.has_datachegada()) {
      set_datachegada(from.datachegada());
    }
    if (from.has_lat2()) {
      set_lat2(from.lat2());
    }
    if (from.has_long2()) {
      set_long2(from.long2());
    }
    if (from.has_odo_vel_gps()) {
      mutable_odo_vel_gps()->::pacote_posicao::t32_odo_vel::MergeFrom(from.odo_vel_gps());
    }
    if (from.has_id_ponto()) {
      set_id_ponto(from.id_ponto());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flags()) {
      mutable_flags()->::pacote_posicao::t32_flags::MergeFrom(from.flags());
    }
    if (from.has_csq_id_rota()) {
      mutable_csq_id_rota()->::pacote_posicao::t32_csq_rot::MergeFrom(from.csq_id_rota());
    }
    if (from.has_saida_cfg()) {
      mutable_saida_cfg()->::pacote_posicao::t32_sai_cfg::MergeFrom(from.saida_cfg());
    }
    if (from.has_entrada_gps_info()) {
      mutable_entrada_gps_info()->::pacote_posicao::t32_ent_gpsi::MergeFrom(from.entrada_gps_info());
    }
    if (from.has_indice_posicao()) {
      set_indice_posicao(from.indice_posicao());
    }
    if (from.has_gps_altitude()) {
      set_gps_altitude(from.gps_altitude());
    }
    if (from.has_inf_motorista()) {
      mutable_inf_motorista()->::pacote_posicao::t32_inf_mot::MergeFrom(from.inf_motorista());
    }
    if (from.has_info_horimetro()) {
      mutable_info_horimetro()->::pacote_posicao::t32_horimetro::MergeFrom(from.info_horimetro());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tmp_ult_val()) {
      set_tmp_ult_val(from.tmp_ult_val());
    }
    if (from.has_ad1()) {
      set_ad1(from.ad1());
    }
    if (from.has_ad2()) {
      set_ad2(from.ad2());
    }
    if (from.has_ad3()) {
      set_ad3(from.ad3());
    }
    if (from.has_ad4()) {
      set_ad4(from.ad4());
    }
    if (from.has_estado_seguranca_saidas()) {
      set_estado_seguranca_saidas(from.estado_seguranca_saidas());
    }
    if (from.has_estado_seguranca_entradas()) {
      set_estado_seguranca_entradas(from.estado_seguranca_entradas());
    }
    if (from.has_vcc_alim()) {
      set_vcc_alim(from.vcc_alim());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_id_area()) {
      set_id_area(from.id_area());
    }
    if (from.has_info_telemetria()) {
      mutable_info_telemetria()->::pacote_posicao::t_telemetria::MergeFrom(from.info_telemetria());
    }
    if (from.has_tipo()) {
      set_tipo(from.tipo());
    }
    if (from.has_origem()) {
      set_origem(from.origem());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_eventoflag()) {
      mutable_eventoflag()->::pacote_posicao::equip_flags::MergeFrom(from.eventoflag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void equip_posicao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equip_posicao::CopyFrom(const equip_posicao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equip_posicao::IsInitialized() const {

  return true;
}

void equip_posicao::Swap(equip_posicao* other) {
  if (other == this) return;
  InternalSwap(other);
}
void equip_posicao::InternalSwap(equip_posicao* other) {
  std::swap(datahora_, other->datahora_);
  std::swap(datachegada_, other->datachegada_);
  entrada_.UnsafeArenaSwap(&other->entrada_);
  saida_.UnsafeArenaSwap(&other->saida_);
  std::swap(lat2_, other->lat2_);
  std::swap(long2_, other->long2_);
  std::swap(odo_vel_gps_, other->odo_vel_gps_);
  std::swap(id_ponto_, other->id_ponto_);
  std::swap(flags_, other->flags_);
  std::swap(csq_id_rota_, other->csq_id_rota_);
  std::swap(saida_cfg_, other->saida_cfg_);
  std::swap(entrada_gps_info_, other->entrada_gps_info_);
  std::swap(indice_posicao_, other->indice_posicao_);
  std::swap(gps_altitude_, other->gps_altitude_);
  std::swap(inf_motorista_, other->inf_motorista_);
  std::swap(info_horimetro_, other->info_horimetro_);
  std::swap(tmp_ult_val_, other->tmp_ult_val_);
  std::swap(ad1_, other->ad1_);
  std::swap(ad2_, other->ad2_);
  std::swap(ad3_, other->ad3_);
  std::swap(ad4_, other->ad4_);
  std::swap(estado_seguranca_saidas_, other->estado_seguranca_saidas_);
  std::swap(estado_seguranca_entradas_, other->estado_seguranca_entradas_);
  std::swap(vcc_alim_, other->vcc_alim_);
  std::swap(id_area_, other->id_area_);
  std::swap(info_telemetria_, other->info_telemetria_);
  std::swap(tipo_, other->tipo_);
  std::swap(origem_, other->origem_);
  ponto_ref_.UnsafeArenaSwap(&other->ponto_ref_);
  dist_ref_.UnsafeArenaSwap(&other->dist_ref_);
  ang_ref_.UnsafeArenaSwap(&other->ang_ref_);
  rota_.UnsafeArenaSwap(&other->rota_);
  operacao_.UnsafeArenaSwap(&other->operacao_);
  std::swap(eventoflag_, other->eventoflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata equip_posicao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equip_posicao_descriptor_;
  metadata.reflection = equip_posicao_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// equip_posicao

// optional int32 datahora = 1;
bool equip_posicao::has_datahora() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void equip_posicao::set_has_datahora() {
  _has_bits_[0] |= 0x00000001u;
}
void equip_posicao::clear_has_datahora() {
  _has_bits_[0] &= ~0x00000001u;
}
void equip_posicao::clear_datahora() {
  datahora_ = 0;
  clear_has_datahora();
}
 ::google::protobuf::int32 equip_posicao::datahora() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.datahora)
  return datahora_;
}
 void equip_posicao::set_datahora(::google::protobuf::int32 value) {
  set_has_datahora();
  datahora_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.datahora)
}

// optional int32 datachegada = 2;
bool equip_posicao::has_datachegada() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void equip_posicao::set_has_datachegada() {
  _has_bits_[0] |= 0x00000002u;
}
void equip_posicao::clear_has_datachegada() {
  _has_bits_[0] &= ~0x00000002u;
}
void equip_posicao::clear_datachegada() {
  datachegada_ = 0;
  clear_has_datachegada();
}
 ::google::protobuf::int32 equip_posicao::datachegada() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.datachegada)
  return datachegada_;
}
 void equip_posicao::set_datachegada(::google::protobuf::int32 value) {
  set_has_datachegada();
  datachegada_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.datachegada)
}

// repeated int32 entrada = 3;
int equip_posicao::entrada_size() const {
  return entrada_.size();
}
void equip_posicao::clear_entrada() {
  entrada_.Clear();
}
 ::google::protobuf::int32 equip_posicao::entrada(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.entrada)
  return entrada_.Get(index);
}
 void equip_posicao::set_entrada(int index, ::google::protobuf::int32 value) {
  entrada_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.entrada)
}
 void equip_posicao::add_entrada(::google::protobuf::int32 value) {
  entrada_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.entrada)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::entrada() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.entrada)
  return entrada_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_entrada() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.entrada)
  return &entrada_;
}

// repeated int32 saida = 4;
int equip_posicao::saida_size() const {
  return saida_.size();
}
void equip_posicao::clear_saida() {
  saida_.Clear();
}
 ::google::protobuf::int32 equip_posicao::saida(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.saida)
  return saida_.Get(index);
}
 void equip_posicao::set_saida(int index, ::google::protobuf::int32 value) {
  saida_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.saida)
}
 void equip_posicao::add_saida(::google::protobuf::int32 value) {
  saida_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.saida)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::saida() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.saida)
  return saida_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_saida() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.saida)
  return &saida_;
}

// optional double lat2 = 5;
bool equip_posicao::has_lat2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void equip_posicao::set_has_lat2() {
  _has_bits_[0] |= 0x00000010u;
}
void equip_posicao::clear_has_lat2() {
  _has_bits_[0] &= ~0x00000010u;
}
void equip_posicao::clear_lat2() {
  lat2_ = 0;
  clear_has_lat2();
}
 double equip_posicao::lat2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.lat2)
  return lat2_;
}
 void equip_posicao::set_lat2(double value) {
  set_has_lat2();
  lat2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.lat2)
}

// optional double long2 = 6;
bool equip_posicao::has_long2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void equip_posicao::set_has_long2() {
  _has_bits_[0] |= 0x00000020u;
}
void equip_posicao::clear_has_long2() {
  _has_bits_[0] &= ~0x00000020u;
}
void equip_posicao::clear_long2() {
  long2_ = 0;
  clear_has_long2();
}
 double equip_posicao::long2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.long2)
  return long2_;
}
 void equip_posicao::set_long2(double value) {
  set_has_long2();
  long2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.long2)
}

// optional .pacote_posicao.t32_odo_vel odo_vel_gps = 7;
bool equip_posicao::has_odo_vel_gps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void equip_posicao::set_has_odo_vel_gps() {
  _has_bits_[0] |= 0x00000040u;
}
void equip_posicao::clear_has_odo_vel_gps() {
  _has_bits_[0] &= ~0x00000040u;
}
void equip_posicao::clear_odo_vel_gps() {
  if (odo_vel_gps_ != NULL) odo_vel_gps_->::pacote_posicao::t32_odo_vel::Clear();
  clear_has_odo_vel_gps();
}
const ::pacote_posicao::t32_odo_vel& equip_posicao::odo_vel_gps() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.odo_vel_gps)
  return odo_vel_gps_ != NULL ? *odo_vel_gps_ : *default_instance_->odo_vel_gps_;
}
::pacote_posicao::t32_odo_vel* equip_posicao::mutable_odo_vel_gps() {
  set_has_odo_vel_gps();
  if (odo_vel_gps_ == NULL) {
    odo_vel_gps_ = new ::pacote_posicao::t32_odo_vel;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.odo_vel_gps)
  return odo_vel_gps_;
}
::pacote_posicao::t32_odo_vel* equip_posicao::release_odo_vel_gps() {
  clear_has_odo_vel_gps();
  ::pacote_posicao::t32_odo_vel* temp = odo_vel_gps_;
  odo_vel_gps_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_odo_vel_gps(::pacote_posicao::t32_odo_vel* odo_vel_gps) {
  delete odo_vel_gps_;
  odo_vel_gps_ = odo_vel_gps;
  if (odo_vel_gps) {
    set_has_odo_vel_gps();
  } else {
    clear_has_odo_vel_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.odo_vel_gps)
}

// optional int32 id_ponto = 8;
bool equip_posicao::has_id_ponto() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void equip_posicao::set_has_id_ponto() {
  _has_bits_[0] |= 0x00000080u;
}
void equip_posicao::clear_has_id_ponto() {
  _has_bits_[0] &= ~0x00000080u;
}
void equip_posicao::clear_id_ponto() {
  id_ponto_ = 0;
  clear_has_id_ponto();
}
 ::google::protobuf::int32 equip_posicao::id_ponto() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.id_ponto)
  return id_ponto_;
}
 void equip_posicao::set_id_ponto(::google::protobuf::int32 value) {
  set_has_id_ponto();
  id_ponto_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.id_ponto)
}

// optional .pacote_posicao.t32_flags flags = 9;
bool equip_posicao::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void equip_posicao::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
void equip_posicao::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
void equip_posicao::clear_flags() {
  if (flags_ != NULL) flags_->::pacote_posicao::t32_flags::Clear();
  clear_has_flags();
}
const ::pacote_posicao::t32_flags& equip_posicao::flags() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.flags)
  return flags_ != NULL ? *flags_ : *default_instance_->flags_;
}
::pacote_posicao::t32_flags* equip_posicao::mutable_flags() {
  set_has_flags();
  if (flags_ == NULL) {
    flags_ = new ::pacote_posicao::t32_flags;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.flags)
  return flags_;
}
::pacote_posicao::t32_flags* equip_posicao::release_flags() {
  clear_has_flags();
  ::pacote_posicao::t32_flags* temp = flags_;
  flags_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_flags(::pacote_posicao::t32_flags* flags) {
  delete flags_;
  flags_ = flags;
  if (flags) {
    set_has_flags();
  } else {
    clear_has_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.flags)
}

// optional .pacote_posicao.t32_csq_rot csq_id_rota = 10;
bool equip_posicao::has_csq_id_rota() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void equip_posicao::set_has_csq_id_rota() {
  _has_bits_[0] |= 0x00000200u;
}
void equip_posicao::clear_has_csq_id_rota() {
  _has_bits_[0] &= ~0x00000200u;
}
void equip_posicao::clear_csq_id_rota() {
  if (csq_id_rota_ != NULL) csq_id_rota_->::pacote_posicao::t32_csq_rot::Clear();
  clear_has_csq_id_rota();
}
const ::pacote_posicao::t32_csq_rot& equip_posicao::csq_id_rota() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.csq_id_rota)
  return csq_id_rota_ != NULL ? *csq_id_rota_ : *default_instance_->csq_id_rota_;
}
::pacote_posicao::t32_csq_rot* equip_posicao::mutable_csq_id_rota() {
  set_has_csq_id_rota();
  if (csq_id_rota_ == NULL) {
    csq_id_rota_ = new ::pacote_posicao::t32_csq_rot;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.csq_id_rota)
  return csq_id_rota_;
}
::pacote_posicao::t32_csq_rot* equip_posicao::release_csq_id_rota() {
  clear_has_csq_id_rota();
  ::pacote_posicao::t32_csq_rot* temp = csq_id_rota_;
  csq_id_rota_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_csq_id_rota(::pacote_posicao::t32_csq_rot* csq_id_rota) {
  delete csq_id_rota_;
  csq_id_rota_ = csq_id_rota;
  if (csq_id_rota) {
    set_has_csq_id_rota();
  } else {
    clear_has_csq_id_rota();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.csq_id_rota)
}

// optional .pacote_posicao.t32_sai_cfg saida_cfg = 11;
bool equip_posicao::has_saida_cfg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void equip_posicao::set_has_saida_cfg() {
  _has_bits_[0] |= 0x00000400u;
}
void equip_posicao::clear_has_saida_cfg() {
  _has_bits_[0] &= ~0x00000400u;
}
void equip_posicao::clear_saida_cfg() {
  if (saida_cfg_ != NULL) saida_cfg_->::pacote_posicao::t32_sai_cfg::Clear();
  clear_has_saida_cfg();
}
const ::pacote_posicao::t32_sai_cfg& equip_posicao::saida_cfg() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.saida_cfg)
  return saida_cfg_ != NULL ? *saida_cfg_ : *default_instance_->saida_cfg_;
}
::pacote_posicao::t32_sai_cfg* equip_posicao::mutable_saida_cfg() {
  set_has_saida_cfg();
  if (saida_cfg_ == NULL) {
    saida_cfg_ = new ::pacote_posicao::t32_sai_cfg;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.saida_cfg)
  return saida_cfg_;
}
::pacote_posicao::t32_sai_cfg* equip_posicao::release_saida_cfg() {
  clear_has_saida_cfg();
  ::pacote_posicao::t32_sai_cfg* temp = saida_cfg_;
  saida_cfg_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_saida_cfg(::pacote_posicao::t32_sai_cfg* saida_cfg) {
  delete saida_cfg_;
  saida_cfg_ = saida_cfg;
  if (saida_cfg) {
    set_has_saida_cfg();
  } else {
    clear_has_saida_cfg();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.saida_cfg)
}

// optional .pacote_posicao.t32_ent_gpsi entrada_gps_info = 12;
bool equip_posicao::has_entrada_gps_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void equip_posicao::set_has_entrada_gps_info() {
  _has_bits_[0] |= 0x00000800u;
}
void equip_posicao::clear_has_entrada_gps_info() {
  _has_bits_[0] &= ~0x00000800u;
}
void equip_posicao::clear_entrada_gps_info() {
  if (entrada_gps_info_ != NULL) entrada_gps_info_->::pacote_posicao::t32_ent_gpsi::Clear();
  clear_has_entrada_gps_info();
}
const ::pacote_posicao::t32_ent_gpsi& equip_posicao::entrada_gps_info() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.entrada_gps_info)
  return entrada_gps_info_ != NULL ? *entrada_gps_info_ : *default_instance_->entrada_gps_info_;
}
::pacote_posicao::t32_ent_gpsi* equip_posicao::mutable_entrada_gps_info() {
  set_has_entrada_gps_info();
  if (entrada_gps_info_ == NULL) {
    entrada_gps_info_ = new ::pacote_posicao::t32_ent_gpsi;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.entrada_gps_info)
  return entrada_gps_info_;
}
::pacote_posicao::t32_ent_gpsi* equip_posicao::release_entrada_gps_info() {
  clear_has_entrada_gps_info();
  ::pacote_posicao::t32_ent_gpsi* temp = entrada_gps_info_;
  entrada_gps_info_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_entrada_gps_info(::pacote_posicao::t32_ent_gpsi* entrada_gps_info) {
  delete entrada_gps_info_;
  entrada_gps_info_ = entrada_gps_info;
  if (entrada_gps_info) {
    set_has_entrada_gps_info();
  } else {
    clear_has_entrada_gps_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.entrada_gps_info)
}

// optional int32 indice_posicao = 13;
bool equip_posicao::has_indice_posicao() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void equip_posicao::set_has_indice_posicao() {
  _has_bits_[0] |= 0x00001000u;
}
void equip_posicao::clear_has_indice_posicao() {
  _has_bits_[0] &= ~0x00001000u;
}
void equip_posicao::clear_indice_posicao() {
  indice_posicao_ = 0;
  clear_has_indice_posicao();
}
 ::google::protobuf::int32 equip_posicao::indice_posicao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.indice_posicao)
  return indice_posicao_;
}
 void equip_posicao::set_indice_posicao(::google::protobuf::int32 value) {
  set_has_indice_posicao();
  indice_posicao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.indice_posicao)
}

// optional int32 gps_altitude = 14;
bool equip_posicao::has_gps_altitude() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void equip_posicao::set_has_gps_altitude() {
  _has_bits_[0] |= 0x00002000u;
}
void equip_posicao::clear_has_gps_altitude() {
  _has_bits_[0] &= ~0x00002000u;
}
void equip_posicao::clear_gps_altitude() {
  gps_altitude_ = 0;
  clear_has_gps_altitude();
}
 ::google::protobuf::int32 equip_posicao::gps_altitude() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.gps_altitude)
  return gps_altitude_;
}
 void equip_posicao::set_gps_altitude(::google::protobuf::int32 value) {
  set_has_gps_altitude();
  gps_altitude_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.gps_altitude)
}

// optional .pacote_posicao.t32_inf_mot inf_motorista = 15;
bool equip_posicao::has_inf_motorista() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void equip_posicao::set_has_inf_motorista() {
  _has_bits_[0] |= 0x00004000u;
}
void equip_posicao::clear_has_inf_motorista() {
  _has_bits_[0] &= ~0x00004000u;
}
void equip_posicao::clear_inf_motorista() {
  if (inf_motorista_ != NULL) inf_motorista_->::pacote_posicao::t32_inf_mot::Clear();
  clear_has_inf_motorista();
}
const ::pacote_posicao::t32_inf_mot& equip_posicao::inf_motorista() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.inf_motorista)
  return inf_motorista_ != NULL ? *inf_motorista_ : *default_instance_->inf_motorista_;
}
::pacote_posicao::t32_inf_mot* equip_posicao::mutable_inf_motorista() {
  set_has_inf_motorista();
  if (inf_motorista_ == NULL) {
    inf_motorista_ = new ::pacote_posicao::t32_inf_mot;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.inf_motorista)
  return inf_motorista_;
}
::pacote_posicao::t32_inf_mot* equip_posicao::release_inf_motorista() {
  clear_has_inf_motorista();
  ::pacote_posicao::t32_inf_mot* temp = inf_motorista_;
  inf_motorista_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_inf_motorista(::pacote_posicao::t32_inf_mot* inf_motorista) {
  delete inf_motorista_;
  inf_motorista_ = inf_motorista;
  if (inf_motorista) {
    set_has_inf_motorista();
  } else {
    clear_has_inf_motorista();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.inf_motorista)
}

// optional .pacote_posicao.t32_horimetro info_horimetro = 16;
bool equip_posicao::has_info_horimetro() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void equip_posicao::set_has_info_horimetro() {
  _has_bits_[0] |= 0x00008000u;
}
void equip_posicao::clear_has_info_horimetro() {
  _has_bits_[0] &= ~0x00008000u;
}
void equip_posicao::clear_info_horimetro() {
  if (info_horimetro_ != NULL) info_horimetro_->::pacote_posicao::t32_horimetro::Clear();
  clear_has_info_horimetro();
}
const ::pacote_posicao::t32_horimetro& equip_posicao::info_horimetro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.info_horimetro)
  return info_horimetro_ != NULL ? *info_horimetro_ : *default_instance_->info_horimetro_;
}
::pacote_posicao::t32_horimetro* equip_posicao::mutable_info_horimetro() {
  set_has_info_horimetro();
  if (info_horimetro_ == NULL) {
    info_horimetro_ = new ::pacote_posicao::t32_horimetro;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.info_horimetro)
  return info_horimetro_;
}
::pacote_posicao::t32_horimetro* equip_posicao::release_info_horimetro() {
  clear_has_info_horimetro();
  ::pacote_posicao::t32_horimetro* temp = info_horimetro_;
  info_horimetro_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_info_horimetro(::pacote_posicao::t32_horimetro* info_horimetro) {
  delete info_horimetro_;
  info_horimetro_ = info_horimetro;
  if (info_horimetro) {
    set_has_info_horimetro();
  } else {
    clear_has_info_horimetro();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.info_horimetro)
}

// optional int32 tmp_ult_val = 17;
bool equip_posicao::has_tmp_ult_val() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void equip_posicao::set_has_tmp_ult_val() {
  _has_bits_[0] |= 0x00010000u;
}
void equip_posicao::clear_has_tmp_ult_val() {
  _has_bits_[0] &= ~0x00010000u;
}
void equip_posicao::clear_tmp_ult_val() {
  tmp_ult_val_ = 0;
  clear_has_tmp_ult_val();
}
 ::google::protobuf::int32 equip_posicao::tmp_ult_val() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.tmp_ult_val)
  return tmp_ult_val_;
}
 void equip_posicao::set_tmp_ult_val(::google::protobuf::int32 value) {
  set_has_tmp_ult_val();
  tmp_ult_val_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.tmp_ult_val)
}

// optional int32 ad1 = 18;
bool equip_posicao::has_ad1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void equip_posicao::set_has_ad1() {
  _has_bits_[0] |= 0x00020000u;
}
void equip_posicao::clear_has_ad1() {
  _has_bits_[0] &= ~0x00020000u;
}
void equip_posicao::clear_ad1() {
  ad1_ = 0;
  clear_has_ad1();
}
 ::google::protobuf::int32 equip_posicao::ad1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.ad1)
  return ad1_;
}
 void equip_posicao::set_ad1(::google::protobuf::int32 value) {
  set_has_ad1();
  ad1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.ad1)
}

// optional int32 ad2 = 19;
bool equip_posicao::has_ad2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void equip_posicao::set_has_ad2() {
  _has_bits_[0] |= 0x00040000u;
}
void equip_posicao::clear_has_ad2() {
  _has_bits_[0] &= ~0x00040000u;
}
void equip_posicao::clear_ad2() {
  ad2_ = 0;
  clear_has_ad2();
}
 ::google::protobuf::int32 equip_posicao::ad2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.ad2)
  return ad2_;
}
 void equip_posicao::set_ad2(::google::protobuf::int32 value) {
  set_has_ad2();
  ad2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.ad2)
}

// optional int32 ad3 = 20;
bool equip_posicao::has_ad3() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void equip_posicao::set_has_ad3() {
  _has_bits_[0] |= 0x00080000u;
}
void equip_posicao::clear_has_ad3() {
  _has_bits_[0] &= ~0x00080000u;
}
void equip_posicao::clear_ad3() {
  ad3_ = 0;
  clear_has_ad3();
}
 ::google::protobuf::int32 equip_posicao::ad3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.ad3)
  return ad3_;
}
 void equip_posicao::set_ad3(::google::protobuf::int32 value) {
  set_has_ad3();
  ad3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.ad3)
}

// optional int32 ad4 = 21;
bool equip_posicao::has_ad4() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void equip_posicao::set_has_ad4() {
  _has_bits_[0] |= 0x00100000u;
}
void equip_posicao::clear_has_ad4() {
  _has_bits_[0] &= ~0x00100000u;
}
void equip_posicao::clear_ad4() {
  ad4_ = 0;
  clear_has_ad4();
}
 ::google::protobuf::int32 equip_posicao::ad4() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.ad4)
  return ad4_;
}
 void equip_posicao::set_ad4(::google::protobuf::int32 value) {
  set_has_ad4();
  ad4_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.ad4)
}

// optional int32 estado_seguranca_saidas = 22;
bool equip_posicao::has_estado_seguranca_saidas() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void equip_posicao::set_has_estado_seguranca_saidas() {
  _has_bits_[0] |= 0x00200000u;
}
void equip_posicao::clear_has_estado_seguranca_saidas() {
  _has_bits_[0] &= ~0x00200000u;
}
void equip_posicao::clear_estado_seguranca_saidas() {
  estado_seguranca_saidas_ = 0;
  clear_has_estado_seguranca_saidas();
}
 ::google::protobuf::int32 equip_posicao::estado_seguranca_saidas() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.estado_seguranca_saidas)
  return estado_seguranca_saidas_;
}
 void equip_posicao::set_estado_seguranca_saidas(::google::protobuf::int32 value) {
  set_has_estado_seguranca_saidas();
  estado_seguranca_saidas_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.estado_seguranca_saidas)
}

// optional int32 estado_seguranca_entradas = 23;
bool equip_posicao::has_estado_seguranca_entradas() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void equip_posicao::set_has_estado_seguranca_entradas() {
  _has_bits_[0] |= 0x00400000u;
}
void equip_posicao::clear_has_estado_seguranca_entradas() {
  _has_bits_[0] &= ~0x00400000u;
}
void equip_posicao::clear_estado_seguranca_entradas() {
  estado_seguranca_entradas_ = 0;
  clear_has_estado_seguranca_entradas();
}
 ::google::protobuf::int32 equip_posicao::estado_seguranca_entradas() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.estado_seguranca_entradas)
  return estado_seguranca_entradas_;
}
 void equip_posicao::set_estado_seguranca_entradas(::google::protobuf::int32 value) {
  set_has_estado_seguranca_entradas();
  estado_seguranca_entradas_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.estado_seguranca_entradas)
}

// optional int32 vcc_alim = 24;
bool equip_posicao::has_vcc_alim() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void equip_posicao::set_has_vcc_alim() {
  _has_bits_[0] |= 0x00800000u;
}
void equip_posicao::clear_has_vcc_alim() {
  _has_bits_[0] &= ~0x00800000u;
}
void equip_posicao::clear_vcc_alim() {
  vcc_alim_ = 0;
  clear_has_vcc_alim();
}
 ::google::protobuf::int32 equip_posicao::vcc_alim() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.vcc_alim)
  return vcc_alim_;
}
 void equip_posicao::set_vcc_alim(::google::protobuf::int32 value) {
  set_has_vcc_alim();
  vcc_alim_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.vcc_alim)
}

// optional int32 id_area = 25;
bool equip_posicao::has_id_area() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void equip_posicao::set_has_id_area() {
  _has_bits_[0] |= 0x01000000u;
}
void equip_posicao::clear_has_id_area() {
  _has_bits_[0] &= ~0x01000000u;
}
void equip_posicao::clear_id_area() {
  id_area_ = 0;
  clear_has_id_area();
}
 ::google::protobuf::int32 equip_posicao::id_area() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.id_area)
  return id_area_;
}
 void equip_posicao::set_id_area(::google::protobuf::int32 value) {
  set_has_id_area();
  id_area_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.id_area)
}

// optional .pacote_posicao.t_telemetria info_telemetria = 26;
bool equip_posicao::has_info_telemetria() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void equip_posicao::set_has_info_telemetria() {
  _has_bits_[0] |= 0x02000000u;
}
void equip_posicao::clear_has_info_telemetria() {
  _has_bits_[0] &= ~0x02000000u;
}
void equip_posicao::clear_info_telemetria() {
  if (info_telemetria_ != NULL) info_telemetria_->::pacote_posicao::t_telemetria::Clear();
  clear_has_info_telemetria();
}
const ::pacote_posicao::t_telemetria& equip_posicao::info_telemetria() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.info_telemetria)
  return info_telemetria_ != NULL ? *info_telemetria_ : *default_instance_->info_telemetria_;
}
::pacote_posicao::t_telemetria* equip_posicao::mutable_info_telemetria() {
  set_has_info_telemetria();
  if (info_telemetria_ == NULL) {
    info_telemetria_ = new ::pacote_posicao::t_telemetria;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.info_telemetria)
  return info_telemetria_;
}
::pacote_posicao::t_telemetria* equip_posicao::release_info_telemetria() {
  clear_has_info_telemetria();
  ::pacote_posicao::t_telemetria* temp = info_telemetria_;
  info_telemetria_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_info_telemetria(::pacote_posicao::t_telemetria* info_telemetria) {
  delete info_telemetria_;
  info_telemetria_ = info_telemetria;
  if (info_telemetria) {
    set_has_info_telemetria();
  } else {
    clear_has_info_telemetria();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.info_telemetria)
}

// optional int32 tipo = 27;
bool equip_posicao::has_tipo() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void equip_posicao::set_has_tipo() {
  _has_bits_[0] |= 0x04000000u;
}
void equip_posicao::clear_has_tipo() {
  _has_bits_[0] &= ~0x04000000u;
}
void equip_posicao::clear_tipo() {
  tipo_ = 0;
  clear_has_tipo();
}
 ::google::protobuf::int32 equip_posicao::tipo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.tipo)
  return tipo_;
}
 void equip_posicao::set_tipo(::google::protobuf::int32 value) {
  set_has_tipo();
  tipo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.tipo)
}

// optional int32 origem = 28;
bool equip_posicao::has_origem() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void equip_posicao::set_has_origem() {
  _has_bits_[0] |= 0x08000000u;
}
void equip_posicao::clear_has_origem() {
  _has_bits_[0] &= ~0x08000000u;
}
void equip_posicao::clear_origem() {
  origem_ = 0;
  clear_has_origem();
}
 ::google::protobuf::int32 equip_posicao::origem() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.origem)
  return origem_;
}
 void equip_posicao::set_origem(::google::protobuf::int32 value) {
  set_has_origem();
  origem_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.origem)
}

// repeated int32 ponto_ref = 29;
int equip_posicao::ponto_ref_size() const {
  return ponto_ref_.size();
}
void equip_posicao::clear_ponto_ref() {
  ponto_ref_.Clear();
}
 ::google::protobuf::int32 equip_posicao::ponto_ref(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.ponto_ref)
  return ponto_ref_.Get(index);
}
 void equip_posicao::set_ponto_ref(int index, ::google::protobuf::int32 value) {
  ponto_ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.ponto_ref)
}
 void equip_posicao::add_ponto_ref(::google::protobuf::int32 value) {
  ponto_ref_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.ponto_ref)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::ponto_ref() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.ponto_ref)
  return ponto_ref_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_ponto_ref() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.ponto_ref)
  return &ponto_ref_;
}

// repeated int32 dist_ref = 30;
int equip_posicao::dist_ref_size() const {
  return dist_ref_.size();
}
void equip_posicao::clear_dist_ref() {
  dist_ref_.Clear();
}
 ::google::protobuf::int32 equip_posicao::dist_ref(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.dist_ref)
  return dist_ref_.Get(index);
}
 void equip_posicao::set_dist_ref(int index, ::google::protobuf::int32 value) {
  dist_ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.dist_ref)
}
 void equip_posicao::add_dist_ref(::google::protobuf::int32 value) {
  dist_ref_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.dist_ref)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::dist_ref() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.dist_ref)
  return dist_ref_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_dist_ref() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.dist_ref)
  return &dist_ref_;
}

// repeated int32 ang_ref = 31;
int equip_posicao::ang_ref_size() const {
  return ang_ref_.size();
}
void equip_posicao::clear_ang_ref() {
  ang_ref_.Clear();
}
 ::google::protobuf::int32 equip_posicao::ang_ref(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.ang_ref)
  return ang_ref_.Get(index);
}
 void equip_posicao::set_ang_ref(int index, ::google::protobuf::int32 value) {
  ang_ref_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.ang_ref)
}
 void equip_posicao::add_ang_ref(::google::protobuf::int32 value) {
  ang_ref_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.ang_ref)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::ang_ref() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.ang_ref)
  return ang_ref_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_ang_ref() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.ang_ref)
  return &ang_ref_;
}

// repeated int32 rota = 32;
int equip_posicao::rota_size() const {
  return rota_.size();
}
void equip_posicao::clear_rota() {
  rota_.Clear();
}
 ::google::protobuf::int32 equip_posicao::rota(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.rota)
  return rota_.Get(index);
}
 void equip_posicao::set_rota(int index, ::google::protobuf::int32 value) {
  rota_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.rota)
}
 void equip_posicao::add_rota(::google::protobuf::int32 value) {
  rota_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.rota)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::rota() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.rota)
  return rota_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_rota() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.rota)
  return &rota_;
}

// repeated int32 operacao = 33;
int equip_posicao::operacao_size() const {
  return operacao_.size();
}
void equip_posicao::clear_operacao() {
  operacao_.Clear();
}
 ::google::protobuf::int32 equip_posicao::operacao(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.operacao)
  return operacao_.Get(index);
}
 void equip_posicao::set_operacao(int index, ::google::protobuf::int32 value) {
  operacao_.Set(index, value);
  // @@protoc_insertion_point(field_set:pacote_posicao.equip_posicao.operacao)
}
 void equip_posicao::add_operacao(::google::protobuf::int32 value) {
  operacao_.Add(value);
  // @@protoc_insertion_point(field_add:pacote_posicao.equip_posicao.operacao)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
equip_posicao::operacao() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.equip_posicao.operacao)
  return operacao_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
equip_posicao::mutable_operacao() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.equip_posicao.operacao)
  return &operacao_;
}

// optional .pacote_posicao.equip_flags eventoflag = 34;
bool equip_posicao::has_eventoflag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void equip_posicao::set_has_eventoflag() {
  _has_bits_[1] |= 0x00000002u;
}
void equip_posicao::clear_has_eventoflag() {
  _has_bits_[1] &= ~0x00000002u;
}
void equip_posicao::clear_eventoflag() {
  if (eventoflag_ != NULL) eventoflag_->::pacote_posicao::equip_flags::Clear();
  clear_has_eventoflag();
}
const ::pacote_posicao::equip_flags& equip_posicao::eventoflag() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.equip_posicao.eventoflag)
  return eventoflag_ != NULL ? *eventoflag_ : *default_instance_->eventoflag_;
}
::pacote_posicao::equip_flags* equip_posicao::mutable_eventoflag() {
  set_has_eventoflag();
  if (eventoflag_ == NULL) {
    eventoflag_ = new ::pacote_posicao::equip_flags;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.equip_posicao.eventoflag)
  return eventoflag_;
}
::pacote_posicao::equip_flags* equip_posicao::release_eventoflag() {
  clear_has_eventoflag();
  ::pacote_posicao::equip_flags* temp = eventoflag_;
  eventoflag_ = NULL;
  return temp;
}
void equip_posicao::set_allocated_eventoflag(::pacote_posicao::equip_flags* eventoflag) {
  delete eventoflag_;
  eventoflag_ = eventoflag;
  if (eventoflag) {
    set_has_eventoflag();
  } else {
    clear_has_eventoflag();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.equip_posicao.eventoflag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_flags::kAltSetupFieldNumber;
const int t32_flags::kPosMemoriaFieldNumber;
const int t32_flags::kGpsValidoFieldNumber;
const int t32_flags::kGpsFalhaAntFieldNumber;
const int t32_flags::kGpsDrFieldNumber;
const int t32_flags::kVelExcedidaFieldNumber;
const int t32_flags::kExcTmpParadoFieldNumber;
const int t32_flags::kBaixoConsumoFieldNumber;
const int t32_flags::kCfcFieldNumber;
const int t32_flags::kTipoLoginFieldNumber;
const int t32_flags::kChamadaVozFieldNumber;
const int t32_flags::kSatelitalFieldNumber;
const int t32_flags::kOperacaoFieldNumber;
const int t32_flags::kForcarGprsFieldNumber;
const int t32_flags::kSleepFieldNumber;
const int t32_flags::kUrbRodovFieldNumber;
const int t32_flags::kAcoesEmbClienteFieldNumber;
const int t32_flags::kAnalisePontoFieldNumber;
const int t32_flags::kAnaliseAreaFieldNumber;
const int t32_flags::kAnaliseCercaFieldNumber;
const int t32_flags::kAlarmeFieldNumber;
const int t32_flags::kAcaoLoginFieldNumber;
const int t32_flags::kAncoraFieldNumber;
const int t32_flags::kAd2FilterEnableFieldNumber;
const int t32_flags::kAd3FilterEnableFieldNumber;
const int t32_flags::kAd4FilterEnableFieldNumber;
const int t32_flags::kFirmwareStoredFieldNumber;
const int t32_flags::kJammingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_flags::t32_flags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_flags)
}

void t32_flags::InitAsDefaultInstance() {
}

t32_flags::t32_flags(const t32_flags& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_flags)
}

void t32_flags::SharedCtor() {
  _cached_size_ = 0;
  alt_setup_ = 0;
  pos_memoria_ = 0;
  gps_valido_ = 0;
  gps_falha_ant_ = 0;
  gps_dr_ = 0;
  vel_excedida_ = 0;
  exc_tmp_parado_ = 0;
  baixo_consumo_ = 0;
  cfc_ = 0;
  tipo_login_ = 0;
  chamada_voz_ = 0;
  satelital_ = 0;
  operacao_ = 0;
  forcar_gprs_ = 0;
  sleep_ = 0;
  urb_rodov_ = 0;
  acoes_emb_cliente_ = 0;
  analise_ponto_ = 0;
  analise_area_ = 0;
  analise_cerca_ = 0;
  alarme_ = 0;
  acao_login_ = 0;
  ancora_ = 0;
  ad2_filter_enable_ = 0;
  ad3_filter_enable_ = 0;
  ad4_filter_enable_ = 0;
  firmware_stored_ = 0;
  jamming_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_flags::~t32_flags() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_flags)
  SharedDtor();
}

void t32_flags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_flags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_flags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_flags_descriptor_;
}

const t32_flags& t32_flags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_flags* t32_flags::default_instance_ = NULL;

t32_flags* t32_flags::New(::google::protobuf::Arena* arena) const {
  t32_flags* n = new t32_flags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_flags::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_flags*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(alt_setup_, baixo_consumo_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(cfc_, urb_rodov_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(acoes_emb_cliente_, ad2_filter_enable_);
  }
  ZR_(ad3_filter_enable_, jamming_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_flags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_flags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 alt_setup = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alt_setup_)));
          set_has_alt_setup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_memoria;
        break;
      }

      // optional int32 pos_memoria = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_memoria:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_memoria_)));
          set_has_pos_memoria();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gps_valido;
        break;
      }

      // optional int32 gps_valido = 3;
      case 3: {
        if (tag == 24) {
         parse_gps_valido:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_valido_)));
          set_has_gps_valido();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gps_falha_ant;
        break;
      }

      // optional int32 gps_falha_ant = 4;
      case 4: {
        if (tag == 32) {
         parse_gps_falha_ant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_falha_ant_)));
          set_has_gps_falha_ant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gps_dr;
        break;
      }

      // optional int32 gps_dr = 5;
      case 5: {
        if (tag == 40) {
         parse_gps_dr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_dr_)));
          set_has_gps_dr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vel_excedida;
        break;
      }

      // optional int32 vel_excedida = 6;
      case 6: {
        if (tag == 48) {
         parse_vel_excedida:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vel_excedida_)));
          set_has_vel_excedida();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exc_tmp_parado;
        break;
      }

      // optional int32 exc_tmp_parado = 7;
      case 7: {
        if (tag == 56) {
         parse_exc_tmp_parado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exc_tmp_parado_)));
          set_has_exc_tmp_parado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_baixo_consumo;
        break;
      }

      // optional int32 baixo_consumo = 8;
      case 8: {
        if (tag == 64) {
         parse_baixo_consumo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baixo_consumo_)));
          set_has_baixo_consumo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cfc;
        break;
      }

      // optional int32 cfc = 9;
      case 9: {
        if (tag == 72) {
         parse_cfc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfc_)));
          set_has_cfc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tipo_login;
        break;
      }

      // optional int32 tipo_login = 10;
      case 10: {
        if (tag == 80) {
         parse_tipo_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipo_login_)));
          set_has_tipo_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_chamada_voz;
        break;
      }

      // optional int32 chamada_voz = 11;
      case 11: {
        if (tag == 88) {
         parse_chamada_voz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chamada_voz_)));
          set_has_chamada_voz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_satelital;
        break;
      }

      // optional int32 satelital = 12;
      case 12: {
        if (tag == 96) {
         parse_satelital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satelital_)));
          set_has_satelital();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_operacao;
        break;
      }

      // optional int32 operacao = 13;
      case 13: {
        if (tag == 104) {
         parse_operacao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operacao_)));
          set_has_operacao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_forcar_gprs;
        break;
      }

      // optional int32 forcar_gprs = 14;
      case 14: {
        if (tag == 112) {
         parse_forcar_gprs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forcar_gprs_)));
          set_has_forcar_gprs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_sleep;
        break;
      }

      // optional int32 sleep = 15;
      case 15: {
        if (tag == 120) {
         parse_sleep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sleep_)));
          set_has_sleep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_urb_rodov;
        break;
      }

      // optional int32 urb_rodov = 16;
      case 16: {
        if (tag == 128) {
         parse_urb_rodov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urb_rodov_)));
          set_has_urb_rodov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_acoes_emb_cliente;
        break;
      }

      // optional int32 acoes_emb_cliente = 17;
      case 17: {
        if (tag == 136) {
         parse_acoes_emb_cliente:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acoes_emb_cliente_)));
          set_has_acoes_emb_cliente();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_analise_ponto;
        break;
      }

      // optional int32 analise_ponto = 18;
      case 18: {
        if (tag == 144) {
         parse_analise_ponto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analise_ponto_)));
          set_has_analise_ponto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_analise_area;
        break;
      }

      // optional int32 analise_area = 19;
      case 19: {
        if (tag == 152) {
         parse_analise_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analise_area_)));
          set_has_analise_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_analise_cerca;
        break;
      }

      // optional int32 analise_cerca = 20;
      case 20: {
        if (tag == 160) {
         parse_analise_cerca:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &analise_cerca_)));
          set_has_analise_cerca();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_alarme;
        break;
      }

      // optional int32 alarme = 21;
      case 21: {
        if (tag == 168) {
         parse_alarme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarme_)));
          set_has_alarme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_acao_login;
        break;
      }

      // optional int32 acao_login = 22;
      case 22: {
        if (tag == 176) {
         parse_acao_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acao_login_)));
          set_has_acao_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ancora;
        break;
      }

      // optional int32 ancora = 23;
      case 23: {
        if (tag == 184) {
         parse_ancora:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ancora_)));
          set_has_ancora();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_ad2_filter_enable;
        break;
      }

      // optional int32 ad2_filter_enable = 24;
      case 24: {
        if (tag == 192) {
         parse_ad2_filter_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad2_filter_enable_)));
          set_has_ad2_filter_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_ad3_filter_enable;
        break;
      }

      // optional int32 ad3_filter_enable = 25;
      case 25: {
        if (tag == 200) {
         parse_ad3_filter_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad3_filter_enable_)));
          set_has_ad3_filter_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_ad4_filter_enable;
        break;
      }

      // optional int32 ad4_filter_enable = 26;
      case 26: {
        if (tag == 208) {
         parse_ad4_filter_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad4_filter_enable_)));
          set_has_ad4_filter_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_firmware_stored;
        break;
      }

      // optional int32 firmware_stored = 27;
      case 27: {
        if (tag == 216) {
         parse_firmware_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firmware_stored_)));
          set_has_firmware_stored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_jamming;
        break;
      }

      // optional int32 jamming = 28;
      case 28: {
        if (tag == 224) {
         parse_jamming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jamming_)));
          set_has_jamming();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_flags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_flags)
  return false;
#undef DO_
}

void t32_flags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_flags)
  // optional int32 alt_setup = 1;
  if (has_alt_setup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alt_setup(), output);
  }

  // optional int32 pos_memoria = 2;
  if (has_pos_memoria()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_memoria(), output);
  }

  // optional int32 gps_valido = 3;
  if (has_gps_valido()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gps_valido(), output);
  }

  // optional int32 gps_falha_ant = 4;
  if (has_gps_falha_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gps_falha_ant(), output);
  }

  // optional int32 gps_dr = 5;
  if (has_gps_dr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gps_dr(), output);
  }

  // optional int32 vel_excedida = 6;
  if (has_vel_excedida()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vel_excedida(), output);
  }

  // optional int32 exc_tmp_parado = 7;
  if (has_exc_tmp_parado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exc_tmp_parado(), output);
  }

  // optional int32 baixo_consumo = 8;
  if (has_baixo_consumo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->baixo_consumo(), output);
  }

  // optional int32 cfc = 9;
  if (has_cfc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cfc(), output);
  }

  // optional int32 tipo_login = 10;
  if (has_tipo_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tipo_login(), output);
  }

  // optional int32 chamada_voz = 11;
  if (has_chamada_voz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->chamada_voz(), output);
  }

  // optional int32 satelital = 12;
  if (has_satelital()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->satelital(), output);
  }

  // optional int32 operacao = 13;
  if (has_operacao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->operacao(), output);
  }

  // optional int32 forcar_gprs = 14;
  if (has_forcar_gprs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->forcar_gprs(), output);
  }

  // optional int32 sleep = 15;
  if (has_sleep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sleep(), output);
  }

  // optional int32 urb_rodov = 16;
  if (has_urb_rodov()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->urb_rodov(), output);
  }

  // optional int32 acoes_emb_cliente = 17;
  if (has_acoes_emb_cliente()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->acoes_emb_cliente(), output);
  }

  // optional int32 analise_ponto = 18;
  if (has_analise_ponto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->analise_ponto(), output);
  }

  // optional int32 analise_area = 19;
  if (has_analise_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->analise_area(), output);
  }

  // optional int32 analise_cerca = 20;
  if (has_analise_cerca()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->analise_cerca(), output);
  }

  // optional int32 alarme = 21;
  if (has_alarme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->alarme(), output);
  }

  // optional int32 acao_login = 22;
  if (has_acao_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->acao_login(), output);
  }

  // optional int32 ancora = 23;
  if (has_ancora()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ancora(), output);
  }

  // optional int32 ad2_filter_enable = 24;
  if (has_ad2_filter_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ad2_filter_enable(), output);
  }

  // optional int32 ad3_filter_enable = 25;
  if (has_ad3_filter_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ad3_filter_enable(), output);
  }

  // optional int32 ad4_filter_enable = 26;
  if (has_ad4_filter_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ad4_filter_enable(), output);
  }

  // optional int32 firmware_stored = 27;
  if (has_firmware_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->firmware_stored(), output);
  }

  // optional int32 jamming = 28;
  if (has_jamming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->jamming(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_flags)
}

::google::protobuf::uint8* t32_flags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_flags)
  // optional int32 alt_setup = 1;
  if (has_alt_setup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alt_setup(), target);
  }

  // optional int32 pos_memoria = 2;
  if (has_pos_memoria()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_memoria(), target);
  }

  // optional int32 gps_valido = 3;
  if (has_gps_valido()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gps_valido(), target);
  }

  // optional int32 gps_falha_ant = 4;
  if (has_gps_falha_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gps_falha_ant(), target);
  }

  // optional int32 gps_dr = 5;
  if (has_gps_dr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gps_dr(), target);
  }

  // optional int32 vel_excedida = 6;
  if (has_vel_excedida()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vel_excedida(), target);
  }

  // optional int32 exc_tmp_parado = 7;
  if (has_exc_tmp_parado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exc_tmp_parado(), target);
  }

  // optional int32 baixo_consumo = 8;
  if (has_baixo_consumo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->baixo_consumo(), target);
  }

  // optional int32 cfc = 9;
  if (has_cfc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cfc(), target);
  }

  // optional int32 tipo_login = 10;
  if (has_tipo_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tipo_login(), target);
  }

  // optional int32 chamada_voz = 11;
  if (has_chamada_voz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->chamada_voz(), target);
  }

  // optional int32 satelital = 12;
  if (has_satelital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->satelital(), target);
  }

  // optional int32 operacao = 13;
  if (has_operacao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->operacao(), target);
  }

  // optional int32 forcar_gprs = 14;
  if (has_forcar_gprs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->forcar_gprs(), target);
  }

  // optional int32 sleep = 15;
  if (has_sleep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sleep(), target);
  }

  // optional int32 urb_rodov = 16;
  if (has_urb_rodov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->urb_rodov(), target);
  }

  // optional int32 acoes_emb_cliente = 17;
  if (has_acoes_emb_cliente()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->acoes_emb_cliente(), target);
  }

  // optional int32 analise_ponto = 18;
  if (has_analise_ponto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->analise_ponto(), target);
  }

  // optional int32 analise_area = 19;
  if (has_analise_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->analise_area(), target);
  }

  // optional int32 analise_cerca = 20;
  if (has_analise_cerca()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->analise_cerca(), target);
  }

  // optional int32 alarme = 21;
  if (has_alarme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->alarme(), target);
  }

  // optional int32 acao_login = 22;
  if (has_acao_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->acao_login(), target);
  }

  // optional int32 ancora = 23;
  if (has_ancora()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ancora(), target);
  }

  // optional int32 ad2_filter_enable = 24;
  if (has_ad2_filter_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->ad2_filter_enable(), target);
  }

  // optional int32 ad3_filter_enable = 25;
  if (has_ad3_filter_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ad3_filter_enable(), target);
  }

  // optional int32 ad4_filter_enable = 26;
  if (has_ad4_filter_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ad4_filter_enable(), target);
  }

  // optional int32 firmware_stored = 27;
  if (has_firmware_stored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->firmware_stored(), target);
  }

  // optional int32 jamming = 28;
  if (has_jamming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->jamming(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_flags)
  return target;
}

int t32_flags::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 alt_setup = 1;
    if (has_alt_setup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alt_setup());
    }

    // optional int32 pos_memoria = 2;
    if (has_pos_memoria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_memoria());
    }

    // optional int32 gps_valido = 3;
    if (has_gps_valido()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_valido());
    }

    // optional int32 gps_falha_ant = 4;
    if (has_gps_falha_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_falha_ant());
    }

    // optional int32 gps_dr = 5;
    if (has_gps_dr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_dr());
    }

    // optional int32 vel_excedida = 6;
    if (has_vel_excedida()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vel_excedida());
    }

    // optional int32 exc_tmp_parado = 7;
    if (has_exc_tmp_parado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exc_tmp_parado());
    }

    // optional int32 baixo_consumo = 8;
    if (has_baixo_consumo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baixo_consumo());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 cfc = 9;
    if (has_cfc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfc());
    }

    // optional int32 tipo_login = 10;
    if (has_tipo_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tipo_login());
    }

    // optional int32 chamada_voz = 11;
    if (has_chamada_voz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chamada_voz());
    }

    // optional int32 satelital = 12;
    if (has_satelital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satelital());
    }

    // optional int32 operacao = 13;
    if (has_operacao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operacao());
    }

    // optional int32 forcar_gprs = 14;
    if (has_forcar_gprs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forcar_gprs());
    }

    // optional int32 sleep = 15;
    if (has_sleep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sleep());
    }

    // optional int32 urb_rodov = 16;
    if (has_urb_rodov()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urb_rodov());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 acoes_emb_cliente = 17;
    if (has_acoes_emb_cliente()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acoes_emb_cliente());
    }

    // optional int32 analise_ponto = 18;
    if (has_analise_ponto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analise_ponto());
    }

    // optional int32 analise_area = 19;
    if (has_analise_area()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analise_area());
    }

    // optional int32 analise_cerca = 20;
    if (has_analise_cerca()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->analise_cerca());
    }

    // optional int32 alarme = 21;
    if (has_alarme()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarme());
    }

    // optional int32 acao_login = 22;
    if (has_acao_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acao_login());
    }

    // optional int32 ancora = 23;
    if (has_ancora()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ancora());
    }

    // optional int32 ad2_filter_enable = 24;
    if (has_ad2_filter_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad2_filter_enable());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional int32 ad3_filter_enable = 25;
    if (has_ad3_filter_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad3_filter_enable());
    }

    // optional int32 ad4_filter_enable = 26;
    if (has_ad4_filter_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad4_filter_enable());
    }

    // optional int32 firmware_stored = 27;
    if (has_firmware_stored()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firmware_stored());
    }

    // optional int32 jamming = 28;
    if (has_jamming()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jamming());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_flags::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_flags* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_flags>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_flags::MergeFrom(const t32_flags& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alt_setup()) {
      set_alt_setup(from.alt_setup());
    }
    if (from.has_pos_memoria()) {
      set_pos_memoria(from.pos_memoria());
    }
    if (from.has_gps_valido()) {
      set_gps_valido(from.gps_valido());
    }
    if (from.has_gps_falha_ant()) {
      set_gps_falha_ant(from.gps_falha_ant());
    }
    if (from.has_gps_dr()) {
      set_gps_dr(from.gps_dr());
    }
    if (from.has_vel_excedida()) {
      set_vel_excedida(from.vel_excedida());
    }
    if (from.has_exc_tmp_parado()) {
      set_exc_tmp_parado(from.exc_tmp_parado());
    }
    if (from.has_baixo_consumo()) {
      set_baixo_consumo(from.baixo_consumo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cfc()) {
      set_cfc(from.cfc());
    }
    if (from.has_tipo_login()) {
      set_tipo_login(from.tipo_login());
    }
    if (from.has_chamada_voz()) {
      set_chamada_voz(from.chamada_voz());
    }
    if (from.has_satelital()) {
      set_satelital(from.satelital());
    }
    if (from.has_operacao()) {
      set_operacao(from.operacao());
    }
    if (from.has_forcar_gprs()) {
      set_forcar_gprs(from.forcar_gprs());
    }
    if (from.has_sleep()) {
      set_sleep(from.sleep());
    }
    if (from.has_urb_rodov()) {
      set_urb_rodov(from.urb_rodov());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_acoes_emb_cliente()) {
      set_acoes_emb_cliente(from.acoes_emb_cliente());
    }
    if (from.has_analise_ponto()) {
      set_analise_ponto(from.analise_ponto());
    }
    if (from.has_analise_area()) {
      set_analise_area(from.analise_area());
    }
    if (from.has_analise_cerca()) {
      set_analise_cerca(from.analise_cerca());
    }
    if (from.has_alarme()) {
      set_alarme(from.alarme());
    }
    if (from.has_acao_login()) {
      set_acao_login(from.acao_login());
    }
    if (from.has_ancora()) {
      set_ancora(from.ancora());
    }
    if (from.has_ad2_filter_enable()) {
      set_ad2_filter_enable(from.ad2_filter_enable());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ad3_filter_enable()) {
      set_ad3_filter_enable(from.ad3_filter_enable());
    }
    if (from.has_ad4_filter_enable()) {
      set_ad4_filter_enable(from.ad4_filter_enable());
    }
    if (from.has_firmware_stored()) {
      set_firmware_stored(from.firmware_stored());
    }
    if (from.has_jamming()) {
      set_jamming(from.jamming());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_flags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_flags::CopyFrom(const t32_flags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_flags::IsInitialized() const {

  return true;
}

void t32_flags::Swap(t32_flags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_flags::InternalSwap(t32_flags* other) {
  std::swap(alt_setup_, other->alt_setup_);
  std::swap(pos_memoria_, other->pos_memoria_);
  std::swap(gps_valido_, other->gps_valido_);
  std::swap(gps_falha_ant_, other->gps_falha_ant_);
  std::swap(gps_dr_, other->gps_dr_);
  std::swap(vel_excedida_, other->vel_excedida_);
  std::swap(exc_tmp_parado_, other->exc_tmp_parado_);
  std::swap(baixo_consumo_, other->baixo_consumo_);
  std::swap(cfc_, other->cfc_);
  std::swap(tipo_login_, other->tipo_login_);
  std::swap(chamada_voz_, other->chamada_voz_);
  std::swap(satelital_, other->satelital_);
  std::swap(operacao_, other->operacao_);
  std::swap(forcar_gprs_, other->forcar_gprs_);
  std::swap(sleep_, other->sleep_);
  std::swap(urb_rodov_, other->urb_rodov_);
  std::swap(acoes_emb_cliente_, other->acoes_emb_cliente_);
  std::swap(analise_ponto_, other->analise_ponto_);
  std::swap(analise_area_, other->analise_area_);
  std::swap(analise_cerca_, other->analise_cerca_);
  std::swap(alarme_, other->alarme_);
  std::swap(acao_login_, other->acao_login_);
  std::swap(ancora_, other->ancora_);
  std::swap(ad2_filter_enable_, other->ad2_filter_enable_);
  std::swap(ad3_filter_enable_, other->ad3_filter_enable_);
  std::swap(ad4_filter_enable_, other->ad4_filter_enable_);
  std::swap(firmware_stored_, other->firmware_stored_);
  std::swap(jamming_, other->jamming_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_flags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_flags_descriptor_;
  metadata.reflection = t32_flags_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_flags

// optional int32 alt_setup = 1;
bool t32_flags::has_alt_setup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_flags::set_has_alt_setup() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_flags::clear_has_alt_setup() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_flags::clear_alt_setup() {
  alt_setup_ = 0;
  clear_has_alt_setup();
}
 ::google::protobuf::int32 t32_flags::alt_setup() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.alt_setup)
  return alt_setup_;
}
 void t32_flags::set_alt_setup(::google::protobuf::int32 value) {
  set_has_alt_setup();
  alt_setup_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.alt_setup)
}

// optional int32 pos_memoria = 2;
bool t32_flags::has_pos_memoria() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_flags::set_has_pos_memoria() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_flags::clear_has_pos_memoria() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_flags::clear_pos_memoria() {
  pos_memoria_ = 0;
  clear_has_pos_memoria();
}
 ::google::protobuf::int32 t32_flags::pos_memoria() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.pos_memoria)
  return pos_memoria_;
}
 void t32_flags::set_pos_memoria(::google::protobuf::int32 value) {
  set_has_pos_memoria();
  pos_memoria_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.pos_memoria)
}

// optional int32 gps_valido = 3;
bool t32_flags::has_gps_valido() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t32_flags::set_has_gps_valido() {
  _has_bits_[0] |= 0x00000004u;
}
void t32_flags::clear_has_gps_valido() {
  _has_bits_[0] &= ~0x00000004u;
}
void t32_flags::clear_gps_valido() {
  gps_valido_ = 0;
  clear_has_gps_valido();
}
 ::google::protobuf::int32 t32_flags::gps_valido() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.gps_valido)
  return gps_valido_;
}
 void t32_flags::set_gps_valido(::google::protobuf::int32 value) {
  set_has_gps_valido();
  gps_valido_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.gps_valido)
}

// optional int32 gps_falha_ant = 4;
bool t32_flags::has_gps_falha_ant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t32_flags::set_has_gps_falha_ant() {
  _has_bits_[0] |= 0x00000008u;
}
void t32_flags::clear_has_gps_falha_ant() {
  _has_bits_[0] &= ~0x00000008u;
}
void t32_flags::clear_gps_falha_ant() {
  gps_falha_ant_ = 0;
  clear_has_gps_falha_ant();
}
 ::google::protobuf::int32 t32_flags::gps_falha_ant() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.gps_falha_ant)
  return gps_falha_ant_;
}
 void t32_flags::set_gps_falha_ant(::google::protobuf::int32 value) {
  set_has_gps_falha_ant();
  gps_falha_ant_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.gps_falha_ant)
}

// optional int32 gps_dr = 5;
bool t32_flags::has_gps_dr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t32_flags::set_has_gps_dr() {
  _has_bits_[0] |= 0x00000010u;
}
void t32_flags::clear_has_gps_dr() {
  _has_bits_[0] &= ~0x00000010u;
}
void t32_flags::clear_gps_dr() {
  gps_dr_ = 0;
  clear_has_gps_dr();
}
 ::google::protobuf::int32 t32_flags::gps_dr() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.gps_dr)
  return gps_dr_;
}
 void t32_flags::set_gps_dr(::google::protobuf::int32 value) {
  set_has_gps_dr();
  gps_dr_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.gps_dr)
}

// optional int32 vel_excedida = 6;
bool t32_flags::has_vel_excedida() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void t32_flags::set_has_vel_excedida() {
  _has_bits_[0] |= 0x00000020u;
}
void t32_flags::clear_has_vel_excedida() {
  _has_bits_[0] &= ~0x00000020u;
}
void t32_flags::clear_vel_excedida() {
  vel_excedida_ = 0;
  clear_has_vel_excedida();
}
 ::google::protobuf::int32 t32_flags::vel_excedida() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.vel_excedida)
  return vel_excedida_;
}
 void t32_flags::set_vel_excedida(::google::protobuf::int32 value) {
  set_has_vel_excedida();
  vel_excedida_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.vel_excedida)
}

// optional int32 exc_tmp_parado = 7;
bool t32_flags::has_exc_tmp_parado() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void t32_flags::set_has_exc_tmp_parado() {
  _has_bits_[0] |= 0x00000040u;
}
void t32_flags::clear_has_exc_tmp_parado() {
  _has_bits_[0] &= ~0x00000040u;
}
void t32_flags::clear_exc_tmp_parado() {
  exc_tmp_parado_ = 0;
  clear_has_exc_tmp_parado();
}
 ::google::protobuf::int32 t32_flags::exc_tmp_parado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.exc_tmp_parado)
  return exc_tmp_parado_;
}
 void t32_flags::set_exc_tmp_parado(::google::protobuf::int32 value) {
  set_has_exc_tmp_parado();
  exc_tmp_parado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.exc_tmp_parado)
}

// optional int32 baixo_consumo = 8;
bool t32_flags::has_baixo_consumo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void t32_flags::set_has_baixo_consumo() {
  _has_bits_[0] |= 0x00000080u;
}
void t32_flags::clear_has_baixo_consumo() {
  _has_bits_[0] &= ~0x00000080u;
}
void t32_flags::clear_baixo_consumo() {
  baixo_consumo_ = 0;
  clear_has_baixo_consumo();
}
 ::google::protobuf::int32 t32_flags::baixo_consumo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.baixo_consumo)
  return baixo_consumo_;
}
 void t32_flags::set_baixo_consumo(::google::protobuf::int32 value) {
  set_has_baixo_consumo();
  baixo_consumo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.baixo_consumo)
}

// optional int32 cfc = 9;
bool t32_flags::has_cfc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void t32_flags::set_has_cfc() {
  _has_bits_[0] |= 0x00000100u;
}
void t32_flags::clear_has_cfc() {
  _has_bits_[0] &= ~0x00000100u;
}
void t32_flags::clear_cfc() {
  cfc_ = 0;
  clear_has_cfc();
}
 ::google::protobuf::int32 t32_flags::cfc() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.cfc)
  return cfc_;
}
 void t32_flags::set_cfc(::google::protobuf::int32 value) {
  set_has_cfc();
  cfc_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.cfc)
}

// optional int32 tipo_login = 10;
bool t32_flags::has_tipo_login() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void t32_flags::set_has_tipo_login() {
  _has_bits_[0] |= 0x00000200u;
}
void t32_flags::clear_has_tipo_login() {
  _has_bits_[0] &= ~0x00000200u;
}
void t32_flags::clear_tipo_login() {
  tipo_login_ = 0;
  clear_has_tipo_login();
}
 ::google::protobuf::int32 t32_flags::tipo_login() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.tipo_login)
  return tipo_login_;
}
 void t32_flags::set_tipo_login(::google::protobuf::int32 value) {
  set_has_tipo_login();
  tipo_login_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.tipo_login)
}

// optional int32 chamada_voz = 11;
bool t32_flags::has_chamada_voz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void t32_flags::set_has_chamada_voz() {
  _has_bits_[0] |= 0x00000400u;
}
void t32_flags::clear_has_chamada_voz() {
  _has_bits_[0] &= ~0x00000400u;
}
void t32_flags::clear_chamada_voz() {
  chamada_voz_ = 0;
  clear_has_chamada_voz();
}
 ::google::protobuf::int32 t32_flags::chamada_voz() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.chamada_voz)
  return chamada_voz_;
}
 void t32_flags::set_chamada_voz(::google::protobuf::int32 value) {
  set_has_chamada_voz();
  chamada_voz_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.chamada_voz)
}

// optional int32 satelital = 12;
bool t32_flags::has_satelital() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void t32_flags::set_has_satelital() {
  _has_bits_[0] |= 0x00000800u;
}
void t32_flags::clear_has_satelital() {
  _has_bits_[0] &= ~0x00000800u;
}
void t32_flags::clear_satelital() {
  satelital_ = 0;
  clear_has_satelital();
}
 ::google::protobuf::int32 t32_flags::satelital() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.satelital)
  return satelital_;
}
 void t32_flags::set_satelital(::google::protobuf::int32 value) {
  set_has_satelital();
  satelital_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.satelital)
}

// optional int32 operacao = 13;
bool t32_flags::has_operacao() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void t32_flags::set_has_operacao() {
  _has_bits_[0] |= 0x00001000u;
}
void t32_flags::clear_has_operacao() {
  _has_bits_[0] &= ~0x00001000u;
}
void t32_flags::clear_operacao() {
  operacao_ = 0;
  clear_has_operacao();
}
 ::google::protobuf::int32 t32_flags::operacao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.operacao)
  return operacao_;
}
 void t32_flags::set_operacao(::google::protobuf::int32 value) {
  set_has_operacao();
  operacao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.operacao)
}

// optional int32 forcar_gprs = 14;
bool t32_flags::has_forcar_gprs() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void t32_flags::set_has_forcar_gprs() {
  _has_bits_[0] |= 0x00002000u;
}
void t32_flags::clear_has_forcar_gprs() {
  _has_bits_[0] &= ~0x00002000u;
}
void t32_flags::clear_forcar_gprs() {
  forcar_gprs_ = 0;
  clear_has_forcar_gprs();
}
 ::google::protobuf::int32 t32_flags::forcar_gprs() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.forcar_gprs)
  return forcar_gprs_;
}
 void t32_flags::set_forcar_gprs(::google::protobuf::int32 value) {
  set_has_forcar_gprs();
  forcar_gprs_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.forcar_gprs)
}

// optional int32 sleep = 15;
bool t32_flags::has_sleep() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void t32_flags::set_has_sleep() {
  _has_bits_[0] |= 0x00004000u;
}
void t32_flags::clear_has_sleep() {
  _has_bits_[0] &= ~0x00004000u;
}
void t32_flags::clear_sleep() {
  sleep_ = 0;
  clear_has_sleep();
}
 ::google::protobuf::int32 t32_flags::sleep() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.sleep)
  return sleep_;
}
 void t32_flags::set_sleep(::google::protobuf::int32 value) {
  set_has_sleep();
  sleep_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.sleep)
}

// optional int32 urb_rodov = 16;
bool t32_flags::has_urb_rodov() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void t32_flags::set_has_urb_rodov() {
  _has_bits_[0] |= 0x00008000u;
}
void t32_flags::clear_has_urb_rodov() {
  _has_bits_[0] &= ~0x00008000u;
}
void t32_flags::clear_urb_rodov() {
  urb_rodov_ = 0;
  clear_has_urb_rodov();
}
 ::google::protobuf::int32 t32_flags::urb_rodov() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.urb_rodov)
  return urb_rodov_;
}
 void t32_flags::set_urb_rodov(::google::protobuf::int32 value) {
  set_has_urb_rodov();
  urb_rodov_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.urb_rodov)
}

// optional int32 acoes_emb_cliente = 17;
bool t32_flags::has_acoes_emb_cliente() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void t32_flags::set_has_acoes_emb_cliente() {
  _has_bits_[0] |= 0x00010000u;
}
void t32_flags::clear_has_acoes_emb_cliente() {
  _has_bits_[0] &= ~0x00010000u;
}
void t32_flags::clear_acoes_emb_cliente() {
  acoes_emb_cliente_ = 0;
  clear_has_acoes_emb_cliente();
}
 ::google::protobuf::int32 t32_flags::acoes_emb_cliente() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.acoes_emb_cliente)
  return acoes_emb_cliente_;
}
 void t32_flags::set_acoes_emb_cliente(::google::protobuf::int32 value) {
  set_has_acoes_emb_cliente();
  acoes_emb_cliente_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.acoes_emb_cliente)
}

// optional int32 analise_ponto = 18;
bool t32_flags::has_analise_ponto() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void t32_flags::set_has_analise_ponto() {
  _has_bits_[0] |= 0x00020000u;
}
void t32_flags::clear_has_analise_ponto() {
  _has_bits_[0] &= ~0x00020000u;
}
void t32_flags::clear_analise_ponto() {
  analise_ponto_ = 0;
  clear_has_analise_ponto();
}
 ::google::protobuf::int32 t32_flags::analise_ponto() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.analise_ponto)
  return analise_ponto_;
}
 void t32_flags::set_analise_ponto(::google::protobuf::int32 value) {
  set_has_analise_ponto();
  analise_ponto_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.analise_ponto)
}

// optional int32 analise_area = 19;
bool t32_flags::has_analise_area() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void t32_flags::set_has_analise_area() {
  _has_bits_[0] |= 0x00040000u;
}
void t32_flags::clear_has_analise_area() {
  _has_bits_[0] &= ~0x00040000u;
}
void t32_flags::clear_analise_area() {
  analise_area_ = 0;
  clear_has_analise_area();
}
 ::google::protobuf::int32 t32_flags::analise_area() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.analise_area)
  return analise_area_;
}
 void t32_flags::set_analise_area(::google::protobuf::int32 value) {
  set_has_analise_area();
  analise_area_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.analise_area)
}

// optional int32 analise_cerca = 20;
bool t32_flags::has_analise_cerca() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void t32_flags::set_has_analise_cerca() {
  _has_bits_[0] |= 0x00080000u;
}
void t32_flags::clear_has_analise_cerca() {
  _has_bits_[0] &= ~0x00080000u;
}
void t32_flags::clear_analise_cerca() {
  analise_cerca_ = 0;
  clear_has_analise_cerca();
}
 ::google::protobuf::int32 t32_flags::analise_cerca() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.analise_cerca)
  return analise_cerca_;
}
 void t32_flags::set_analise_cerca(::google::protobuf::int32 value) {
  set_has_analise_cerca();
  analise_cerca_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.analise_cerca)
}

// optional int32 alarme = 21;
bool t32_flags::has_alarme() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void t32_flags::set_has_alarme() {
  _has_bits_[0] |= 0x00100000u;
}
void t32_flags::clear_has_alarme() {
  _has_bits_[0] &= ~0x00100000u;
}
void t32_flags::clear_alarme() {
  alarme_ = 0;
  clear_has_alarme();
}
 ::google::protobuf::int32 t32_flags::alarme() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.alarme)
  return alarme_;
}
 void t32_flags::set_alarme(::google::protobuf::int32 value) {
  set_has_alarme();
  alarme_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.alarme)
}

// optional int32 acao_login = 22;
bool t32_flags::has_acao_login() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void t32_flags::set_has_acao_login() {
  _has_bits_[0] |= 0x00200000u;
}
void t32_flags::clear_has_acao_login() {
  _has_bits_[0] &= ~0x00200000u;
}
void t32_flags::clear_acao_login() {
  acao_login_ = 0;
  clear_has_acao_login();
}
 ::google::protobuf::int32 t32_flags::acao_login() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.acao_login)
  return acao_login_;
}
 void t32_flags::set_acao_login(::google::protobuf::int32 value) {
  set_has_acao_login();
  acao_login_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.acao_login)
}

// optional int32 ancora = 23;
bool t32_flags::has_ancora() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void t32_flags::set_has_ancora() {
  _has_bits_[0] |= 0x00400000u;
}
void t32_flags::clear_has_ancora() {
  _has_bits_[0] &= ~0x00400000u;
}
void t32_flags::clear_ancora() {
  ancora_ = 0;
  clear_has_ancora();
}
 ::google::protobuf::int32 t32_flags::ancora() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.ancora)
  return ancora_;
}
 void t32_flags::set_ancora(::google::protobuf::int32 value) {
  set_has_ancora();
  ancora_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.ancora)
}

// optional int32 ad2_filter_enable = 24;
bool t32_flags::has_ad2_filter_enable() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void t32_flags::set_has_ad2_filter_enable() {
  _has_bits_[0] |= 0x00800000u;
}
void t32_flags::clear_has_ad2_filter_enable() {
  _has_bits_[0] &= ~0x00800000u;
}
void t32_flags::clear_ad2_filter_enable() {
  ad2_filter_enable_ = 0;
  clear_has_ad2_filter_enable();
}
 ::google::protobuf::int32 t32_flags::ad2_filter_enable() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.ad2_filter_enable)
  return ad2_filter_enable_;
}
 void t32_flags::set_ad2_filter_enable(::google::protobuf::int32 value) {
  set_has_ad2_filter_enable();
  ad2_filter_enable_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.ad2_filter_enable)
}

// optional int32 ad3_filter_enable = 25;
bool t32_flags::has_ad3_filter_enable() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void t32_flags::set_has_ad3_filter_enable() {
  _has_bits_[0] |= 0x01000000u;
}
void t32_flags::clear_has_ad3_filter_enable() {
  _has_bits_[0] &= ~0x01000000u;
}
void t32_flags::clear_ad3_filter_enable() {
  ad3_filter_enable_ = 0;
  clear_has_ad3_filter_enable();
}
 ::google::protobuf::int32 t32_flags::ad3_filter_enable() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.ad3_filter_enable)
  return ad3_filter_enable_;
}
 void t32_flags::set_ad3_filter_enable(::google::protobuf::int32 value) {
  set_has_ad3_filter_enable();
  ad3_filter_enable_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.ad3_filter_enable)
}

// optional int32 ad4_filter_enable = 26;
bool t32_flags::has_ad4_filter_enable() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void t32_flags::set_has_ad4_filter_enable() {
  _has_bits_[0] |= 0x02000000u;
}
void t32_flags::clear_has_ad4_filter_enable() {
  _has_bits_[0] &= ~0x02000000u;
}
void t32_flags::clear_ad4_filter_enable() {
  ad4_filter_enable_ = 0;
  clear_has_ad4_filter_enable();
}
 ::google::protobuf::int32 t32_flags::ad4_filter_enable() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.ad4_filter_enable)
  return ad4_filter_enable_;
}
 void t32_flags::set_ad4_filter_enable(::google::protobuf::int32 value) {
  set_has_ad4_filter_enable();
  ad4_filter_enable_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.ad4_filter_enable)
}

// optional int32 firmware_stored = 27;
bool t32_flags::has_firmware_stored() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void t32_flags::set_has_firmware_stored() {
  _has_bits_[0] |= 0x04000000u;
}
void t32_flags::clear_has_firmware_stored() {
  _has_bits_[0] &= ~0x04000000u;
}
void t32_flags::clear_firmware_stored() {
  firmware_stored_ = 0;
  clear_has_firmware_stored();
}
 ::google::protobuf::int32 t32_flags::firmware_stored() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.firmware_stored)
  return firmware_stored_;
}
 void t32_flags::set_firmware_stored(::google::protobuf::int32 value) {
  set_has_firmware_stored();
  firmware_stored_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.firmware_stored)
}

// optional int32 jamming = 28;
bool t32_flags::has_jamming() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void t32_flags::set_has_jamming() {
  _has_bits_[0] |= 0x08000000u;
}
void t32_flags::clear_has_jamming() {
  _has_bits_[0] &= ~0x08000000u;
}
void t32_flags::clear_jamming() {
  jamming_ = 0;
  clear_has_jamming();
}
 ::google::protobuf::int32 t32_flags::jamming() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flags.jamming)
  return jamming_;
}
 void t32_flags::set_jamming(::google::protobuf::int32 value) {
  set_has_jamming();
  jamming_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flags.jamming)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_csq_rot::kCsqFieldNumber;
const int t32_csq_rot::kIdRotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_csq_rot::t32_csq_rot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_csq_rot)
}

void t32_csq_rot::InitAsDefaultInstance() {
}

t32_csq_rot::t32_csq_rot(const t32_csq_rot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_csq_rot)
}

void t32_csq_rot::SharedCtor() {
  _cached_size_ = 0;
  csq_ = 0;
  id_rota_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_csq_rot::~t32_csq_rot() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_csq_rot)
  SharedDtor();
}

void t32_csq_rot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_csq_rot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_csq_rot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_csq_rot_descriptor_;
}

const t32_csq_rot& t32_csq_rot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_csq_rot* t32_csq_rot::default_instance_ = NULL;

t32_csq_rot* t32_csq_rot::New(::google::protobuf::Arena* arena) const {
  t32_csq_rot* n = new t32_csq_rot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_csq_rot::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_csq_rot*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(csq_, id_rota_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_csq_rot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_csq_rot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 csq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &csq_)));
          set_has_csq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id_rota;
        break;
      }

      // optional int32 id_rota = 2;
      case 2: {
        if (tag == 16) {
         parse_id_rota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_rota_)));
          set_has_id_rota();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_csq_rot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_csq_rot)
  return false;
#undef DO_
}

void t32_csq_rot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_csq_rot)
  // optional int32 csq = 1;
  if (has_csq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->csq(), output);
  }

  // optional int32 id_rota = 2;
  if (has_id_rota()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id_rota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_csq_rot)
}

::google::protobuf::uint8* t32_csq_rot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_csq_rot)
  // optional int32 csq = 1;
  if (has_csq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->csq(), target);
  }

  // optional int32 id_rota = 2;
  if (has_id_rota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id_rota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_csq_rot)
  return target;
}

int t32_csq_rot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 csq = 1;
    if (has_csq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->csq());
    }

    // optional int32 id_rota = 2;
    if (has_id_rota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_rota());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_csq_rot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_csq_rot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_csq_rot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_csq_rot::MergeFrom(const t32_csq_rot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_csq()) {
      set_csq(from.csq());
    }
    if (from.has_id_rota()) {
      set_id_rota(from.id_rota());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_csq_rot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_csq_rot::CopyFrom(const t32_csq_rot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_csq_rot::IsInitialized() const {

  return true;
}

void t32_csq_rot::Swap(t32_csq_rot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_csq_rot::InternalSwap(t32_csq_rot* other) {
  std::swap(csq_, other->csq_);
  std::swap(id_rota_, other->id_rota_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_csq_rot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_csq_rot_descriptor_;
  metadata.reflection = t32_csq_rot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_csq_rot

// optional int32 csq = 1;
bool t32_csq_rot::has_csq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_csq_rot::set_has_csq() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_csq_rot::clear_has_csq() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_csq_rot::clear_csq() {
  csq_ = 0;
  clear_has_csq();
}
 ::google::protobuf::int32 t32_csq_rot::csq() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_csq_rot.csq)
  return csq_;
}
 void t32_csq_rot::set_csq(::google::protobuf::int32 value) {
  set_has_csq();
  csq_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_csq_rot.csq)
}

// optional int32 id_rota = 2;
bool t32_csq_rot::has_id_rota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_csq_rot::set_has_id_rota() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_csq_rot::clear_has_id_rota() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_csq_rot::clear_id_rota() {
  id_rota_ = 0;
  clear_has_id_rota();
}
 ::google::protobuf::int32 t32_csq_rot::id_rota() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_csq_rot.id_rota)
  return id_rota_;
}
 void t32_csq_rot::set_id_rota(::google::protobuf::int32 value) {
  set_has_id_rota();
  id_rota_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_csq_rot.id_rota)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_sai_cfg::kSaidasFieldNumber;
const int t32_sai_cfg::kCargasFieldNumber;
const int t32_sai_cfg::kCurtosFieldNumber;
const int t32_sai_cfg::kTemposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_sai_cfg::t32_sai_cfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_sai_cfg)
}

void t32_sai_cfg::InitAsDefaultInstance() {
}

t32_sai_cfg::t32_sai_cfg(const t32_sai_cfg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_sai_cfg)
}

void t32_sai_cfg::SharedCtor() {
  _cached_size_ = 0;
  saidas_ = 0;
  cargas_ = 0;
  curtos_ = 0;
  tempos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_sai_cfg::~t32_sai_cfg() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_sai_cfg)
  SharedDtor();
}

void t32_sai_cfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_sai_cfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_sai_cfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_sai_cfg_descriptor_;
}

const t32_sai_cfg& t32_sai_cfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_sai_cfg* t32_sai_cfg::default_instance_ = NULL;

t32_sai_cfg* t32_sai_cfg::New(::google::protobuf::Arena* arena) const {
  t32_sai_cfg* n = new t32_sai_cfg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_sai_cfg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_sai_cfg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(saidas_, tempos_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_sai_cfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_sai_cfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 saidas = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saidas_)));
          set_has_saidas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cargas;
        break;
      }

      // optional int32 cargas = 2;
      case 2: {
        if (tag == 16) {
         parse_cargas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargas_)));
          set_has_cargas();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curtos;
        break;
      }

      // optional int32 curtos = 3;
      case 3: {
        if (tag == 24) {
         parse_curtos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtos_)));
          set_has_curtos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tempos;
        break;
      }

      // optional int32 tempos = 4;
      case 4: {
        if (tag == 32) {
         parse_tempos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempos_)));
          set_has_tempos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_sai_cfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_sai_cfg)
  return false;
#undef DO_
}

void t32_sai_cfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_sai_cfg)
  // optional int32 saidas = 1;
  if (has_saidas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->saidas(), output);
  }

  // optional int32 cargas = 2;
  if (has_cargas()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cargas(), output);
  }

  // optional int32 curtos = 3;
  if (has_curtos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtos(), output);
  }

  // optional int32 tempos = 4;
  if (has_tempos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tempos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_sai_cfg)
}

::google::protobuf::uint8* t32_sai_cfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_sai_cfg)
  // optional int32 saidas = 1;
  if (has_saidas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->saidas(), target);
  }

  // optional int32 cargas = 2;
  if (has_cargas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cargas(), target);
  }

  // optional int32 curtos = 3;
  if (has_curtos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtos(), target);
  }

  // optional int32 tempos = 4;
  if (has_tempos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tempos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_sai_cfg)
  return target;
}

int t32_sai_cfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 saidas = 1;
    if (has_saidas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saidas());
    }

    // optional int32 cargas = 2;
    if (has_cargas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargas());
    }

    // optional int32 curtos = 3;
    if (has_curtos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtos());
    }

    // optional int32 tempos = 4;
    if (has_tempos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tempos());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_sai_cfg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_sai_cfg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_sai_cfg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_sai_cfg::MergeFrom(const t32_sai_cfg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saidas()) {
      set_saidas(from.saidas());
    }
    if (from.has_cargas()) {
      set_cargas(from.cargas());
    }
    if (from.has_curtos()) {
      set_curtos(from.curtos());
    }
    if (from.has_tempos()) {
      set_tempos(from.tempos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_sai_cfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_sai_cfg::CopyFrom(const t32_sai_cfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_sai_cfg::IsInitialized() const {

  return true;
}

void t32_sai_cfg::Swap(t32_sai_cfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_sai_cfg::InternalSwap(t32_sai_cfg* other) {
  std::swap(saidas_, other->saidas_);
  std::swap(cargas_, other->cargas_);
  std::swap(curtos_, other->curtos_);
  std::swap(tempos_, other->tempos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_sai_cfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_sai_cfg_descriptor_;
  metadata.reflection = t32_sai_cfg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_sai_cfg

// optional int32 saidas = 1;
bool t32_sai_cfg::has_saidas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_sai_cfg::set_has_saidas() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_sai_cfg::clear_has_saidas() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_sai_cfg::clear_saidas() {
  saidas_ = 0;
  clear_has_saidas();
}
 ::google::protobuf::int32 t32_sai_cfg::saidas() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_sai_cfg.saidas)
  return saidas_;
}
 void t32_sai_cfg::set_saidas(::google::protobuf::int32 value) {
  set_has_saidas();
  saidas_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_sai_cfg.saidas)
}

// optional int32 cargas = 2;
bool t32_sai_cfg::has_cargas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_sai_cfg::set_has_cargas() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_sai_cfg::clear_has_cargas() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_sai_cfg::clear_cargas() {
  cargas_ = 0;
  clear_has_cargas();
}
 ::google::protobuf::int32 t32_sai_cfg::cargas() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_sai_cfg.cargas)
  return cargas_;
}
 void t32_sai_cfg::set_cargas(::google::protobuf::int32 value) {
  set_has_cargas();
  cargas_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_sai_cfg.cargas)
}

// optional int32 curtos = 3;
bool t32_sai_cfg::has_curtos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t32_sai_cfg::set_has_curtos() {
  _has_bits_[0] |= 0x00000004u;
}
void t32_sai_cfg::clear_has_curtos() {
  _has_bits_[0] &= ~0x00000004u;
}
void t32_sai_cfg::clear_curtos() {
  curtos_ = 0;
  clear_has_curtos();
}
 ::google::protobuf::int32 t32_sai_cfg::curtos() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_sai_cfg.curtos)
  return curtos_;
}
 void t32_sai_cfg::set_curtos(::google::protobuf::int32 value) {
  set_has_curtos();
  curtos_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_sai_cfg.curtos)
}

// optional int32 tempos = 4;
bool t32_sai_cfg::has_tempos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t32_sai_cfg::set_has_tempos() {
  _has_bits_[0] |= 0x00000008u;
}
void t32_sai_cfg::clear_has_tempos() {
  _has_bits_[0] &= ~0x00000008u;
}
void t32_sai_cfg::clear_tempos() {
  tempos_ = 0;
  clear_has_tempos();
}
 ::google::protobuf::int32 t32_sai_cfg::tempos() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_sai_cfg.tempos)
  return tempos_;
}
 void t32_sai_cfg::set_tempos(::google::protobuf::int32 value) {
  set_has_tempos();
  tempos_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_sai_cfg.tempos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_odo_vel::kOdometroFieldNumber;
const int t32_odo_vel::kVelocidadeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_odo_vel::t32_odo_vel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_odo_vel)
}

void t32_odo_vel::InitAsDefaultInstance() {
}

t32_odo_vel::t32_odo_vel(const t32_odo_vel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_odo_vel)
}

void t32_odo_vel::SharedCtor() {
  _cached_size_ = 0;
  odometro_ = 0;
  velocidade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_odo_vel::~t32_odo_vel() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_odo_vel)
  SharedDtor();
}

void t32_odo_vel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_odo_vel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_odo_vel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_odo_vel_descriptor_;
}

const t32_odo_vel& t32_odo_vel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_odo_vel* t32_odo_vel::default_instance_ = NULL;

t32_odo_vel* t32_odo_vel::New(::google::protobuf::Arena* arena) const {
  t32_odo_vel* n = new t32_odo_vel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_odo_vel::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_odo_vel*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(odometro_, velocidade_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_odo_vel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_odo_vel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 odometro = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odometro_)));
          set_has_odometro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_velocidade;
        break;
      }

      // optional int32 velocidade = 2;
      case 2: {
        if (tag == 16) {
         parse_velocidade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocidade_)));
          set_has_velocidade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_odo_vel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_odo_vel)
  return false;
#undef DO_
}

void t32_odo_vel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_odo_vel)
  // optional int32 odometro = 1;
  if (has_odometro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->odometro(), output);
  }

  // optional int32 velocidade = 2;
  if (has_velocidade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->velocidade(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_odo_vel)
}

::google::protobuf::uint8* t32_odo_vel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_odo_vel)
  // optional int32 odometro = 1;
  if (has_odometro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->odometro(), target);
  }

  // optional int32 velocidade = 2;
  if (has_velocidade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->velocidade(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_odo_vel)
  return target;
}

int t32_odo_vel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 odometro = 1;
    if (has_odometro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->odometro());
    }

    // optional int32 velocidade = 2;
    if (has_velocidade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->velocidade());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_odo_vel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_odo_vel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_odo_vel>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_odo_vel::MergeFrom(const t32_odo_vel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_odometro()) {
      set_odometro(from.odometro());
    }
    if (from.has_velocidade()) {
      set_velocidade(from.velocidade());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_odo_vel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_odo_vel::CopyFrom(const t32_odo_vel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_odo_vel::IsInitialized() const {

  return true;
}

void t32_odo_vel::Swap(t32_odo_vel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_odo_vel::InternalSwap(t32_odo_vel* other) {
  std::swap(odometro_, other->odometro_);
  std::swap(velocidade_, other->velocidade_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_odo_vel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_odo_vel_descriptor_;
  metadata.reflection = t32_odo_vel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_odo_vel

// optional int32 odometro = 1;
bool t32_odo_vel::has_odometro() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_odo_vel::set_has_odometro() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_odo_vel::clear_has_odometro() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_odo_vel::clear_odometro() {
  odometro_ = 0;
  clear_has_odometro();
}
 ::google::protobuf::int32 t32_odo_vel::odometro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_odo_vel.odometro)
  return odometro_;
}
 void t32_odo_vel::set_odometro(::google::protobuf::int32 value) {
  set_has_odometro();
  odometro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_odo_vel.odometro)
}

// optional int32 velocidade = 2;
bool t32_odo_vel::has_velocidade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_odo_vel::set_has_velocidade() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_odo_vel::clear_has_velocidade() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_odo_vel::clear_velocidade() {
  velocidade_ = 0;
  clear_has_velocidade();
}
 ::google::protobuf::int32 t32_odo_vel::velocidade() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_odo_vel.velocidade)
  return velocidade_;
}
 void t32_odo_vel::set_velocidade(::google::protobuf::int32 value) {
  set_has_velocidade();
  velocidade_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_odo_vel.velocidade)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_ent_gpsi::kEnt01Ad1FieldNumber;
const int t32_ent_gpsi::kEnt02Ad2FieldNumber;
const int t32_ent_gpsi::kEnt03Ad3FieldNumber;
const int t32_ent_gpsi::kEnt04Ad4FieldNumber;
const int t32_ent_gpsi::kEnt05Gnd1FieldNumber;
const int t32_ent_gpsi::kEnt06Gnd2FieldNumber;
const int t32_ent_gpsi::kEnt07Gnd3FieldNumber;
const int t32_ent_gpsi::kEnt08Vcc1FieldNumber;
const int t32_ent_gpsi::kEnt09PanFieldNumber;
const int t32_ent_gpsi::kGpsReserv01FieldNumber;
const int t32_ent_gpsi::kGpsReserv02FieldNumber;
const int t32_ent_gpsi::kGpsReserv03FieldNumber;
const int t32_ent_gpsi::kGpsReserv04FieldNumber;
const int t32_ent_gpsi::kGpsReserv05FieldNumber;
const int t32_ent_gpsi::kGpsReserv06FieldNumber;
const int t32_ent_gpsi::kGpsReserv07FieldNumber;
const int t32_ent_gpsi::kDirFieldNumber;
const int t32_ent_gpsi::kSvnFieldNumber;
const int t32_ent_gpsi::kHdopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_ent_gpsi::t32_ent_gpsi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_ent_gpsi)
}

void t32_ent_gpsi::InitAsDefaultInstance() {
}

t32_ent_gpsi::t32_ent_gpsi(const t32_ent_gpsi& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_ent_gpsi)
}

void t32_ent_gpsi::SharedCtor() {
  _cached_size_ = 0;
  ent01ad1_ = 0;
  ent02ad2_ = 0;
  ent03ad3_ = 0;
  ent04ad4_ = 0;
  ent05gnd1_ = 0;
  ent06gnd2_ = 0;
  ent07gnd3_ = 0;
  ent08vcc1_ = 0;
  ent09pan_ = 0;
  gps_reserv01_ = 0;
  gps_reserv02_ = 0;
  gps_reserv03_ = 0;
  gps_reserv04_ = 0;
  gps_reserv05_ = 0;
  gps_reserv06_ = 0;
  gps_reserv07_ = 0;
  dir_ = 0;
  svn_ = 0;
  hdop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_ent_gpsi::~t32_ent_gpsi() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_ent_gpsi)
  SharedDtor();
}

void t32_ent_gpsi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_ent_gpsi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_ent_gpsi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_ent_gpsi_descriptor_;
}

const t32_ent_gpsi& t32_ent_gpsi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_ent_gpsi* t32_ent_gpsi::default_instance_ = NULL;

t32_ent_gpsi* t32_ent_gpsi::New(::google::protobuf::Arena* arena) const {
  t32_ent_gpsi* n = new t32_ent_gpsi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_ent_gpsi::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_ent_gpsi*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ent01ad1_, ent08vcc1_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(ent09pan_, gps_reserv07_);
  }
  ZR_(dir_, hdop_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_ent_gpsi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_ent_gpsi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent01ad1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent01ad1_)));
          set_has_ent01ad1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ent02ad2;
        break;
      }

      // optional int32 ent02ad2 = 2;
      case 2: {
        if (tag == 16) {
         parse_ent02ad2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent02ad2_)));
          set_has_ent02ad2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ent03ad3;
        break;
      }

      // optional int32 ent03ad3 = 3;
      case 3: {
        if (tag == 24) {
         parse_ent03ad3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent03ad3_)));
          set_has_ent03ad3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ent04ad4;
        break;
      }

      // optional int32 ent04ad4 = 4;
      case 4: {
        if (tag == 32) {
         parse_ent04ad4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent04ad4_)));
          set_has_ent04ad4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ent05gnd1;
        break;
      }

      // optional int32 ent05gnd1 = 5;
      case 5: {
        if (tag == 40) {
         parse_ent05gnd1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent05gnd1_)));
          set_has_ent05gnd1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ent06gnd2;
        break;
      }

      // optional int32 ent06gnd2 = 6;
      case 6: {
        if (tag == 48) {
         parse_ent06gnd2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent06gnd2_)));
          set_has_ent06gnd2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ent07gnd3;
        break;
      }

      // optional int32 ent07gnd3 = 7;
      case 7: {
        if (tag == 56) {
         parse_ent07gnd3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent07gnd3_)));
          set_has_ent07gnd3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ent08vcc1;
        break;
      }

      // optional int32 ent08vcc1 = 8;
      case 8: {
        if (tag == 64) {
         parse_ent08vcc1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent08vcc1_)));
          set_has_ent08vcc1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ent09pan;
        break;
      }

      // optional int32 ent09pan = 9;
      case 9: {
        if (tag == 72) {
         parse_ent09pan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent09pan_)));
          set_has_ent09pan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gps_reserv01;
        break;
      }

      // optional int32 gps_reserv01 = 10;
      case 10: {
        if (tag == 80) {
         parse_gps_reserv01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv01_)));
          set_has_gps_reserv01();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gps_reserv02;
        break;
      }

      // optional int32 gps_reserv02 = 11;
      case 11: {
        if (tag == 88) {
         parse_gps_reserv02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv02_)));
          set_has_gps_reserv02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gps_reserv03;
        break;
      }

      // optional int32 gps_reserv03 = 12;
      case 12: {
        if (tag == 96) {
         parse_gps_reserv03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv03_)));
          set_has_gps_reserv03();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gps_reserv04;
        break;
      }

      // optional int32 gps_reserv04 = 13;
      case 13: {
        if (tag == 104) {
         parse_gps_reserv04:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv04_)));
          set_has_gps_reserv04();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gps_reserv05;
        break;
      }

      // optional int32 gps_reserv05 = 14;
      case 14: {
        if (tag == 112) {
         parse_gps_reserv05:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv05_)));
          set_has_gps_reserv05();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gps_reserv06;
        break;
      }

      // optional int32 gps_reserv06 = 15;
      case 15: {
        if (tag == 120) {
         parse_gps_reserv06:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv06_)));
          set_has_gps_reserv06();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_gps_reserv07;
        break;
      }

      // optional int32 gps_reserv07 = 16;
      case 16: {
        if (tag == 128) {
         parse_gps_reserv07:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_reserv07_)));
          set_has_gps_reserv07();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dir;
        break;
      }

      // optional int32 dir = 17;
      case 17: {
        if (tag == 136) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_svn;
        break;
      }

      // optional int32 svn = 18;
      case 18: {
        if (tag == 144) {
         parse_svn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svn_)));
          set_has_svn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_hdop;
        break;
      }

      // optional int32 hdop = 19;
      case 19: {
        if (tag == 152) {
         parse_hdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hdop_)));
          set_has_hdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_ent_gpsi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_ent_gpsi)
  return false;
#undef DO_
}

void t32_ent_gpsi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_ent_gpsi)
  // optional int32 ent01ad1 = 1;
  if (has_ent01ad1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent01ad1(), output);
  }

  // optional int32 ent02ad2 = 2;
  if (has_ent02ad2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ent02ad2(), output);
  }

  // optional int32 ent03ad3 = 3;
  if (has_ent03ad3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ent03ad3(), output);
  }

  // optional int32 ent04ad4 = 4;
  if (has_ent04ad4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent04ad4(), output);
  }

  // optional int32 ent05gnd1 = 5;
  if (has_ent05gnd1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ent05gnd1(), output);
  }

  // optional int32 ent06gnd2 = 6;
  if (has_ent06gnd2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ent06gnd2(), output);
  }

  // optional int32 ent07gnd3 = 7;
  if (has_ent07gnd3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ent07gnd3(), output);
  }

  // optional int32 ent08vcc1 = 8;
  if (has_ent08vcc1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ent08vcc1(), output);
  }

  // optional int32 ent09pan = 9;
  if (has_ent09pan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ent09pan(), output);
  }

  // optional int32 gps_reserv01 = 10;
  if (has_gps_reserv01()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gps_reserv01(), output);
  }

  // optional int32 gps_reserv02 = 11;
  if (has_gps_reserv02()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gps_reserv02(), output);
  }

  // optional int32 gps_reserv03 = 12;
  if (has_gps_reserv03()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gps_reserv03(), output);
  }

  // optional int32 gps_reserv04 = 13;
  if (has_gps_reserv04()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gps_reserv04(), output);
  }

  // optional int32 gps_reserv05 = 14;
  if (has_gps_reserv05()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gps_reserv05(), output);
  }

  // optional int32 gps_reserv06 = 15;
  if (has_gps_reserv06()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gps_reserv06(), output);
  }

  // optional int32 gps_reserv07 = 16;
  if (has_gps_reserv07()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gps_reserv07(), output);
  }

  // optional int32 dir = 17;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->dir(), output);
  }

  // optional int32 svn = 18;
  if (has_svn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->svn(), output);
  }

  // optional int32 hdop = 19;
  if (has_hdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->hdop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_ent_gpsi)
}

::google::protobuf::uint8* t32_ent_gpsi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_ent_gpsi)
  // optional int32 ent01ad1 = 1;
  if (has_ent01ad1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent01ad1(), target);
  }

  // optional int32 ent02ad2 = 2;
  if (has_ent02ad2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ent02ad2(), target);
  }

  // optional int32 ent03ad3 = 3;
  if (has_ent03ad3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ent03ad3(), target);
  }

  // optional int32 ent04ad4 = 4;
  if (has_ent04ad4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent04ad4(), target);
  }

  // optional int32 ent05gnd1 = 5;
  if (has_ent05gnd1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ent05gnd1(), target);
  }

  // optional int32 ent06gnd2 = 6;
  if (has_ent06gnd2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ent06gnd2(), target);
  }

  // optional int32 ent07gnd3 = 7;
  if (has_ent07gnd3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ent07gnd3(), target);
  }

  // optional int32 ent08vcc1 = 8;
  if (has_ent08vcc1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ent08vcc1(), target);
  }

  // optional int32 ent09pan = 9;
  if (has_ent09pan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ent09pan(), target);
  }

  // optional int32 gps_reserv01 = 10;
  if (has_gps_reserv01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gps_reserv01(), target);
  }

  // optional int32 gps_reserv02 = 11;
  if (has_gps_reserv02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gps_reserv02(), target);
  }

  // optional int32 gps_reserv03 = 12;
  if (has_gps_reserv03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gps_reserv03(), target);
  }

  // optional int32 gps_reserv04 = 13;
  if (has_gps_reserv04()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gps_reserv04(), target);
  }

  // optional int32 gps_reserv05 = 14;
  if (has_gps_reserv05()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gps_reserv05(), target);
  }

  // optional int32 gps_reserv06 = 15;
  if (has_gps_reserv06()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gps_reserv06(), target);
  }

  // optional int32 gps_reserv07 = 16;
  if (has_gps_reserv07()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gps_reserv07(), target);
  }

  // optional int32 dir = 17;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->dir(), target);
  }

  // optional int32 svn = 18;
  if (has_svn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->svn(), target);
  }

  // optional int32 hdop = 19;
  if (has_hdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->hdop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_ent_gpsi)
  return target;
}

int t32_ent_gpsi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 ent01ad1 = 1;
    if (has_ent01ad1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent01ad1());
    }

    // optional int32 ent02ad2 = 2;
    if (has_ent02ad2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent02ad2());
    }

    // optional int32 ent03ad3 = 3;
    if (has_ent03ad3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent03ad3());
    }

    // optional int32 ent04ad4 = 4;
    if (has_ent04ad4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent04ad4());
    }

    // optional int32 ent05gnd1 = 5;
    if (has_ent05gnd1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent05gnd1());
    }

    // optional int32 ent06gnd2 = 6;
    if (has_ent06gnd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent06gnd2());
    }

    // optional int32 ent07gnd3 = 7;
    if (has_ent07gnd3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent07gnd3());
    }

    // optional int32 ent08vcc1 = 8;
    if (has_ent08vcc1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent08vcc1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 ent09pan = 9;
    if (has_ent09pan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent09pan());
    }

    // optional int32 gps_reserv01 = 10;
    if (has_gps_reserv01()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv01());
    }

    // optional int32 gps_reserv02 = 11;
    if (has_gps_reserv02()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv02());
    }

    // optional int32 gps_reserv03 = 12;
    if (has_gps_reserv03()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv03());
    }

    // optional int32 gps_reserv04 = 13;
    if (has_gps_reserv04()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv04());
    }

    // optional int32 gps_reserv05 = 14;
    if (has_gps_reserv05()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv05());
    }

    // optional int32 gps_reserv06 = 15;
    if (has_gps_reserv06()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv06());
    }

    // optional int32 gps_reserv07 = 16;
    if (has_gps_reserv07()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_reserv07());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 dir = 17;
    if (has_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dir());
    }

    // optional int32 svn = 18;
    if (has_svn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svn());
    }

    // optional int32 hdop = 19;
    if (has_hdop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hdop());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_ent_gpsi::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_ent_gpsi* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_ent_gpsi>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_ent_gpsi::MergeFrom(const t32_ent_gpsi& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ent01ad1()) {
      set_ent01ad1(from.ent01ad1());
    }
    if (from.has_ent02ad2()) {
      set_ent02ad2(from.ent02ad2());
    }
    if (from.has_ent03ad3()) {
      set_ent03ad3(from.ent03ad3());
    }
    if (from.has_ent04ad4()) {
      set_ent04ad4(from.ent04ad4());
    }
    if (from.has_ent05gnd1()) {
      set_ent05gnd1(from.ent05gnd1());
    }
    if (from.has_ent06gnd2()) {
      set_ent06gnd2(from.ent06gnd2());
    }
    if (from.has_ent07gnd3()) {
      set_ent07gnd3(from.ent07gnd3());
    }
    if (from.has_ent08vcc1()) {
      set_ent08vcc1(from.ent08vcc1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ent09pan()) {
      set_ent09pan(from.ent09pan());
    }
    if (from.has_gps_reserv01()) {
      set_gps_reserv01(from.gps_reserv01());
    }
    if (from.has_gps_reserv02()) {
      set_gps_reserv02(from.gps_reserv02());
    }
    if (from.has_gps_reserv03()) {
      set_gps_reserv03(from.gps_reserv03());
    }
    if (from.has_gps_reserv04()) {
      set_gps_reserv04(from.gps_reserv04());
    }
    if (from.has_gps_reserv05()) {
      set_gps_reserv05(from.gps_reserv05());
    }
    if (from.has_gps_reserv06()) {
      set_gps_reserv06(from.gps_reserv06());
    }
    if (from.has_gps_reserv07()) {
      set_gps_reserv07(from.gps_reserv07());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_svn()) {
      set_svn(from.svn());
    }
    if (from.has_hdop()) {
      set_hdop(from.hdop());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_ent_gpsi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_ent_gpsi::CopyFrom(const t32_ent_gpsi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_ent_gpsi::IsInitialized() const {

  return true;
}

void t32_ent_gpsi::Swap(t32_ent_gpsi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_ent_gpsi::InternalSwap(t32_ent_gpsi* other) {
  std::swap(ent01ad1_, other->ent01ad1_);
  std::swap(ent02ad2_, other->ent02ad2_);
  std::swap(ent03ad3_, other->ent03ad3_);
  std::swap(ent04ad4_, other->ent04ad4_);
  std::swap(ent05gnd1_, other->ent05gnd1_);
  std::swap(ent06gnd2_, other->ent06gnd2_);
  std::swap(ent07gnd3_, other->ent07gnd3_);
  std::swap(ent08vcc1_, other->ent08vcc1_);
  std::swap(ent09pan_, other->ent09pan_);
  std::swap(gps_reserv01_, other->gps_reserv01_);
  std::swap(gps_reserv02_, other->gps_reserv02_);
  std::swap(gps_reserv03_, other->gps_reserv03_);
  std::swap(gps_reserv04_, other->gps_reserv04_);
  std::swap(gps_reserv05_, other->gps_reserv05_);
  std::swap(gps_reserv06_, other->gps_reserv06_);
  std::swap(gps_reserv07_, other->gps_reserv07_);
  std::swap(dir_, other->dir_);
  std::swap(svn_, other->svn_);
  std::swap(hdop_, other->hdop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_ent_gpsi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_ent_gpsi_descriptor_;
  metadata.reflection = t32_ent_gpsi_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_ent_gpsi

// optional int32 ent01ad1 = 1;
bool t32_ent_gpsi::has_ent01ad1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_ent_gpsi::set_has_ent01ad1() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_ent_gpsi::clear_has_ent01ad1() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_ent_gpsi::clear_ent01ad1() {
  ent01ad1_ = 0;
  clear_has_ent01ad1();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent01ad1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent01ad1)
  return ent01ad1_;
}
 void t32_ent_gpsi::set_ent01ad1(::google::protobuf::int32 value) {
  set_has_ent01ad1();
  ent01ad1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent01ad1)
}

// optional int32 ent02ad2 = 2;
bool t32_ent_gpsi::has_ent02ad2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_ent_gpsi::set_has_ent02ad2() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_ent_gpsi::clear_has_ent02ad2() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_ent_gpsi::clear_ent02ad2() {
  ent02ad2_ = 0;
  clear_has_ent02ad2();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent02ad2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent02ad2)
  return ent02ad2_;
}
 void t32_ent_gpsi::set_ent02ad2(::google::protobuf::int32 value) {
  set_has_ent02ad2();
  ent02ad2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent02ad2)
}

// optional int32 ent03ad3 = 3;
bool t32_ent_gpsi::has_ent03ad3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t32_ent_gpsi::set_has_ent03ad3() {
  _has_bits_[0] |= 0x00000004u;
}
void t32_ent_gpsi::clear_has_ent03ad3() {
  _has_bits_[0] &= ~0x00000004u;
}
void t32_ent_gpsi::clear_ent03ad3() {
  ent03ad3_ = 0;
  clear_has_ent03ad3();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent03ad3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent03ad3)
  return ent03ad3_;
}
 void t32_ent_gpsi::set_ent03ad3(::google::protobuf::int32 value) {
  set_has_ent03ad3();
  ent03ad3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent03ad3)
}

// optional int32 ent04ad4 = 4;
bool t32_ent_gpsi::has_ent04ad4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t32_ent_gpsi::set_has_ent04ad4() {
  _has_bits_[0] |= 0x00000008u;
}
void t32_ent_gpsi::clear_has_ent04ad4() {
  _has_bits_[0] &= ~0x00000008u;
}
void t32_ent_gpsi::clear_ent04ad4() {
  ent04ad4_ = 0;
  clear_has_ent04ad4();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent04ad4() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent04ad4)
  return ent04ad4_;
}
 void t32_ent_gpsi::set_ent04ad4(::google::protobuf::int32 value) {
  set_has_ent04ad4();
  ent04ad4_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent04ad4)
}

// optional int32 ent05gnd1 = 5;
bool t32_ent_gpsi::has_ent05gnd1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t32_ent_gpsi::set_has_ent05gnd1() {
  _has_bits_[0] |= 0x00000010u;
}
void t32_ent_gpsi::clear_has_ent05gnd1() {
  _has_bits_[0] &= ~0x00000010u;
}
void t32_ent_gpsi::clear_ent05gnd1() {
  ent05gnd1_ = 0;
  clear_has_ent05gnd1();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent05gnd1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent05gnd1)
  return ent05gnd1_;
}
 void t32_ent_gpsi::set_ent05gnd1(::google::protobuf::int32 value) {
  set_has_ent05gnd1();
  ent05gnd1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent05gnd1)
}

// optional int32 ent06gnd2 = 6;
bool t32_ent_gpsi::has_ent06gnd2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void t32_ent_gpsi::set_has_ent06gnd2() {
  _has_bits_[0] |= 0x00000020u;
}
void t32_ent_gpsi::clear_has_ent06gnd2() {
  _has_bits_[0] &= ~0x00000020u;
}
void t32_ent_gpsi::clear_ent06gnd2() {
  ent06gnd2_ = 0;
  clear_has_ent06gnd2();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent06gnd2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent06gnd2)
  return ent06gnd2_;
}
 void t32_ent_gpsi::set_ent06gnd2(::google::protobuf::int32 value) {
  set_has_ent06gnd2();
  ent06gnd2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent06gnd2)
}

// optional int32 ent07gnd3 = 7;
bool t32_ent_gpsi::has_ent07gnd3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void t32_ent_gpsi::set_has_ent07gnd3() {
  _has_bits_[0] |= 0x00000040u;
}
void t32_ent_gpsi::clear_has_ent07gnd3() {
  _has_bits_[0] &= ~0x00000040u;
}
void t32_ent_gpsi::clear_ent07gnd3() {
  ent07gnd3_ = 0;
  clear_has_ent07gnd3();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent07gnd3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent07gnd3)
  return ent07gnd3_;
}
 void t32_ent_gpsi::set_ent07gnd3(::google::protobuf::int32 value) {
  set_has_ent07gnd3();
  ent07gnd3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent07gnd3)
}

// optional int32 ent08vcc1 = 8;
bool t32_ent_gpsi::has_ent08vcc1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void t32_ent_gpsi::set_has_ent08vcc1() {
  _has_bits_[0] |= 0x00000080u;
}
void t32_ent_gpsi::clear_has_ent08vcc1() {
  _has_bits_[0] &= ~0x00000080u;
}
void t32_ent_gpsi::clear_ent08vcc1() {
  ent08vcc1_ = 0;
  clear_has_ent08vcc1();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent08vcc1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent08vcc1)
  return ent08vcc1_;
}
 void t32_ent_gpsi::set_ent08vcc1(::google::protobuf::int32 value) {
  set_has_ent08vcc1();
  ent08vcc1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent08vcc1)
}

// optional int32 ent09pan = 9;
bool t32_ent_gpsi::has_ent09pan() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void t32_ent_gpsi::set_has_ent09pan() {
  _has_bits_[0] |= 0x00000100u;
}
void t32_ent_gpsi::clear_has_ent09pan() {
  _has_bits_[0] &= ~0x00000100u;
}
void t32_ent_gpsi::clear_ent09pan() {
  ent09pan_ = 0;
  clear_has_ent09pan();
}
 ::google::protobuf::int32 t32_ent_gpsi::ent09pan() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.ent09pan)
  return ent09pan_;
}
 void t32_ent_gpsi::set_ent09pan(::google::protobuf::int32 value) {
  set_has_ent09pan();
  ent09pan_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.ent09pan)
}

// optional int32 gps_reserv01 = 10;
bool t32_ent_gpsi::has_gps_reserv01() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv01() {
  _has_bits_[0] |= 0x00000200u;
}
void t32_ent_gpsi::clear_has_gps_reserv01() {
  _has_bits_[0] &= ~0x00000200u;
}
void t32_ent_gpsi::clear_gps_reserv01() {
  gps_reserv01_ = 0;
  clear_has_gps_reserv01();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv01() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv01)
  return gps_reserv01_;
}
 void t32_ent_gpsi::set_gps_reserv01(::google::protobuf::int32 value) {
  set_has_gps_reserv01();
  gps_reserv01_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv01)
}

// optional int32 gps_reserv02 = 11;
bool t32_ent_gpsi::has_gps_reserv02() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv02() {
  _has_bits_[0] |= 0x00000400u;
}
void t32_ent_gpsi::clear_has_gps_reserv02() {
  _has_bits_[0] &= ~0x00000400u;
}
void t32_ent_gpsi::clear_gps_reserv02() {
  gps_reserv02_ = 0;
  clear_has_gps_reserv02();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv02() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv02)
  return gps_reserv02_;
}
 void t32_ent_gpsi::set_gps_reserv02(::google::protobuf::int32 value) {
  set_has_gps_reserv02();
  gps_reserv02_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv02)
}

// optional int32 gps_reserv03 = 12;
bool t32_ent_gpsi::has_gps_reserv03() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv03() {
  _has_bits_[0] |= 0x00000800u;
}
void t32_ent_gpsi::clear_has_gps_reserv03() {
  _has_bits_[0] &= ~0x00000800u;
}
void t32_ent_gpsi::clear_gps_reserv03() {
  gps_reserv03_ = 0;
  clear_has_gps_reserv03();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv03() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv03)
  return gps_reserv03_;
}
 void t32_ent_gpsi::set_gps_reserv03(::google::protobuf::int32 value) {
  set_has_gps_reserv03();
  gps_reserv03_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv03)
}

// optional int32 gps_reserv04 = 13;
bool t32_ent_gpsi::has_gps_reserv04() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv04() {
  _has_bits_[0] |= 0x00001000u;
}
void t32_ent_gpsi::clear_has_gps_reserv04() {
  _has_bits_[0] &= ~0x00001000u;
}
void t32_ent_gpsi::clear_gps_reserv04() {
  gps_reserv04_ = 0;
  clear_has_gps_reserv04();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv04() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv04)
  return gps_reserv04_;
}
 void t32_ent_gpsi::set_gps_reserv04(::google::protobuf::int32 value) {
  set_has_gps_reserv04();
  gps_reserv04_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv04)
}

// optional int32 gps_reserv05 = 14;
bool t32_ent_gpsi::has_gps_reserv05() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv05() {
  _has_bits_[0] |= 0x00002000u;
}
void t32_ent_gpsi::clear_has_gps_reserv05() {
  _has_bits_[0] &= ~0x00002000u;
}
void t32_ent_gpsi::clear_gps_reserv05() {
  gps_reserv05_ = 0;
  clear_has_gps_reserv05();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv05() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv05)
  return gps_reserv05_;
}
 void t32_ent_gpsi::set_gps_reserv05(::google::protobuf::int32 value) {
  set_has_gps_reserv05();
  gps_reserv05_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv05)
}

// optional int32 gps_reserv06 = 15;
bool t32_ent_gpsi::has_gps_reserv06() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv06() {
  _has_bits_[0] |= 0x00004000u;
}
void t32_ent_gpsi::clear_has_gps_reserv06() {
  _has_bits_[0] &= ~0x00004000u;
}
void t32_ent_gpsi::clear_gps_reserv06() {
  gps_reserv06_ = 0;
  clear_has_gps_reserv06();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv06() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv06)
  return gps_reserv06_;
}
 void t32_ent_gpsi::set_gps_reserv06(::google::protobuf::int32 value) {
  set_has_gps_reserv06();
  gps_reserv06_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv06)
}

// optional int32 gps_reserv07 = 16;
bool t32_ent_gpsi::has_gps_reserv07() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void t32_ent_gpsi::set_has_gps_reserv07() {
  _has_bits_[0] |= 0x00008000u;
}
void t32_ent_gpsi::clear_has_gps_reserv07() {
  _has_bits_[0] &= ~0x00008000u;
}
void t32_ent_gpsi::clear_gps_reserv07() {
  gps_reserv07_ = 0;
  clear_has_gps_reserv07();
}
 ::google::protobuf::int32 t32_ent_gpsi::gps_reserv07() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.gps_reserv07)
  return gps_reserv07_;
}
 void t32_ent_gpsi::set_gps_reserv07(::google::protobuf::int32 value) {
  set_has_gps_reserv07();
  gps_reserv07_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.gps_reserv07)
}

// optional int32 dir = 17;
bool t32_ent_gpsi::has_dir() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void t32_ent_gpsi::set_has_dir() {
  _has_bits_[0] |= 0x00010000u;
}
void t32_ent_gpsi::clear_has_dir() {
  _has_bits_[0] &= ~0x00010000u;
}
void t32_ent_gpsi::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
 ::google::protobuf::int32 t32_ent_gpsi::dir() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.dir)
  return dir_;
}
 void t32_ent_gpsi::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.dir)
}

// optional int32 svn = 18;
bool t32_ent_gpsi::has_svn() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void t32_ent_gpsi::set_has_svn() {
  _has_bits_[0] |= 0x00020000u;
}
void t32_ent_gpsi::clear_has_svn() {
  _has_bits_[0] &= ~0x00020000u;
}
void t32_ent_gpsi::clear_svn() {
  svn_ = 0;
  clear_has_svn();
}
 ::google::protobuf::int32 t32_ent_gpsi::svn() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.svn)
  return svn_;
}
 void t32_ent_gpsi::set_svn(::google::protobuf::int32 value) {
  set_has_svn();
  svn_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.svn)
}

// optional int32 hdop = 19;
bool t32_ent_gpsi::has_hdop() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void t32_ent_gpsi::set_has_hdop() {
  _has_bits_[0] |= 0x00040000u;
}
void t32_ent_gpsi::clear_has_hdop() {
  _has_bits_[0] &= ~0x00040000u;
}
void t32_ent_gpsi::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
 ::google::protobuf::int32 t32_ent_gpsi::hdop() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_ent_gpsi.hdop)
  return hdop_;
}
 void t32_ent_gpsi::set_hdop(::google::protobuf::int32 value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_ent_gpsi.hdop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_inf_mot::kIdMotoristaFieldNumber;
const int t32_inf_mot::kEstBatIntFieldNumber;
const int t32_inf_mot::kEstBatExtFieldNumber;
const int t32_inf_mot::kEstAlimFieldNumber;
const int t32_inf_mot::kAd1RangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_inf_mot::t32_inf_mot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_inf_mot)
}

void t32_inf_mot::InitAsDefaultInstance() {
}

t32_inf_mot::t32_inf_mot(const t32_inf_mot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_inf_mot)
}

void t32_inf_mot::SharedCtor() {
  _cached_size_ = 0;
  id_motorista_ = 0;
  est_bat_int_ = 0;
  est_bat_ext_ = 0;
  est_alim_ = 0;
  ad1range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_inf_mot::~t32_inf_mot() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_inf_mot)
  SharedDtor();
}

void t32_inf_mot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_inf_mot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_inf_mot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_inf_mot_descriptor_;
}

const t32_inf_mot& t32_inf_mot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_inf_mot* t32_inf_mot::default_instance_ = NULL;

t32_inf_mot* t32_inf_mot::New(::google::protobuf::Arena* arena) const {
  t32_inf_mot* n = new t32_inf_mot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_inf_mot::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_inf_mot*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_motorista_, ad1range_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_inf_mot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_inf_mot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id_motorista = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_motorista_)));
          set_has_id_motorista();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_est_bat_int;
        break;
      }

      // optional int32 est_bat_int = 2;
      case 2: {
        if (tag == 16) {
         parse_est_bat_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_bat_int_)));
          set_has_est_bat_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_est_bat_ext;
        break;
      }

      // optional int32 est_bat_ext = 3;
      case 3: {
        if (tag == 24) {
         parse_est_bat_ext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_bat_ext_)));
          set_has_est_bat_ext();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_est_alim;
        break;
      }

      // optional int32 est_alim = 4;
      case 4: {
        if (tag == 32) {
         parse_est_alim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_alim_)));
          set_has_est_alim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ad1range;
        break;
      }

      // optional int32 ad1range = 5;
      case 5: {
        if (tag == 40) {
         parse_ad1range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad1range_)));
          set_has_ad1range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_inf_mot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_inf_mot)
  return false;
#undef DO_
}

void t32_inf_mot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_inf_mot)
  // optional int32 id_motorista = 1;
  if (has_id_motorista()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id_motorista(), output);
  }

  // optional int32 est_bat_int = 2;
  if (has_est_bat_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->est_bat_int(), output);
  }

  // optional int32 est_bat_ext = 3;
  if (has_est_bat_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->est_bat_ext(), output);
  }

  // optional int32 est_alim = 4;
  if (has_est_alim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->est_alim(), output);
  }

  // optional int32 ad1range = 5;
  if (has_ad1range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ad1range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_inf_mot)
}

::google::protobuf::uint8* t32_inf_mot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_inf_mot)
  // optional int32 id_motorista = 1;
  if (has_id_motorista()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id_motorista(), target);
  }

  // optional int32 est_bat_int = 2;
  if (has_est_bat_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->est_bat_int(), target);
  }

  // optional int32 est_bat_ext = 3;
  if (has_est_bat_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->est_bat_ext(), target);
  }

  // optional int32 est_alim = 4;
  if (has_est_alim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->est_alim(), target);
  }

  // optional int32 ad1range = 5;
  if (has_ad1range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ad1range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_inf_mot)
  return target;
}

int t32_inf_mot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 id_motorista = 1;
    if (has_id_motorista()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_motorista());
    }

    // optional int32 est_bat_int = 2;
    if (has_est_bat_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_bat_int());
    }

    // optional int32 est_bat_ext = 3;
    if (has_est_bat_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_bat_ext());
    }

    // optional int32 est_alim = 4;
    if (has_est_alim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_alim());
    }

    // optional int32 ad1range = 5;
    if (has_ad1range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad1range());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_inf_mot::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_inf_mot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_inf_mot>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_inf_mot::MergeFrom(const t32_inf_mot& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_motorista()) {
      set_id_motorista(from.id_motorista());
    }
    if (from.has_est_bat_int()) {
      set_est_bat_int(from.est_bat_int());
    }
    if (from.has_est_bat_ext()) {
      set_est_bat_ext(from.est_bat_ext());
    }
    if (from.has_est_alim()) {
      set_est_alim(from.est_alim());
    }
    if (from.has_ad1range()) {
      set_ad1range(from.ad1range());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_inf_mot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_inf_mot::CopyFrom(const t32_inf_mot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_inf_mot::IsInitialized() const {

  return true;
}

void t32_inf_mot::Swap(t32_inf_mot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_inf_mot::InternalSwap(t32_inf_mot* other) {
  std::swap(id_motorista_, other->id_motorista_);
  std::swap(est_bat_int_, other->est_bat_int_);
  std::swap(est_bat_ext_, other->est_bat_ext_);
  std::swap(est_alim_, other->est_alim_);
  std::swap(ad1range_, other->ad1range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_inf_mot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_inf_mot_descriptor_;
  metadata.reflection = t32_inf_mot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_inf_mot

// optional int32 id_motorista = 1;
bool t32_inf_mot::has_id_motorista() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_inf_mot::set_has_id_motorista() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_inf_mot::clear_has_id_motorista() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_inf_mot::clear_id_motorista() {
  id_motorista_ = 0;
  clear_has_id_motorista();
}
 ::google::protobuf::int32 t32_inf_mot::id_motorista() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_inf_mot.id_motorista)
  return id_motorista_;
}
 void t32_inf_mot::set_id_motorista(::google::protobuf::int32 value) {
  set_has_id_motorista();
  id_motorista_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_inf_mot.id_motorista)
}

// optional int32 est_bat_int = 2;
bool t32_inf_mot::has_est_bat_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_inf_mot::set_has_est_bat_int() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_inf_mot::clear_has_est_bat_int() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_inf_mot::clear_est_bat_int() {
  est_bat_int_ = 0;
  clear_has_est_bat_int();
}
 ::google::protobuf::int32 t32_inf_mot::est_bat_int() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_inf_mot.est_bat_int)
  return est_bat_int_;
}
 void t32_inf_mot::set_est_bat_int(::google::protobuf::int32 value) {
  set_has_est_bat_int();
  est_bat_int_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_inf_mot.est_bat_int)
}

// optional int32 est_bat_ext = 3;
bool t32_inf_mot::has_est_bat_ext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t32_inf_mot::set_has_est_bat_ext() {
  _has_bits_[0] |= 0x00000004u;
}
void t32_inf_mot::clear_has_est_bat_ext() {
  _has_bits_[0] &= ~0x00000004u;
}
void t32_inf_mot::clear_est_bat_ext() {
  est_bat_ext_ = 0;
  clear_has_est_bat_ext();
}
 ::google::protobuf::int32 t32_inf_mot::est_bat_ext() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_inf_mot.est_bat_ext)
  return est_bat_ext_;
}
 void t32_inf_mot::set_est_bat_ext(::google::protobuf::int32 value) {
  set_has_est_bat_ext();
  est_bat_ext_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_inf_mot.est_bat_ext)
}

// optional int32 est_alim = 4;
bool t32_inf_mot::has_est_alim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t32_inf_mot::set_has_est_alim() {
  _has_bits_[0] |= 0x00000008u;
}
void t32_inf_mot::clear_has_est_alim() {
  _has_bits_[0] &= ~0x00000008u;
}
void t32_inf_mot::clear_est_alim() {
  est_alim_ = 0;
  clear_has_est_alim();
}
 ::google::protobuf::int32 t32_inf_mot::est_alim() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_inf_mot.est_alim)
  return est_alim_;
}
 void t32_inf_mot::set_est_alim(::google::protobuf::int32 value) {
  set_has_est_alim();
  est_alim_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_inf_mot.est_alim)
}

// optional int32 ad1range = 5;
bool t32_inf_mot::has_ad1range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t32_inf_mot::set_has_ad1range() {
  _has_bits_[0] |= 0x00000010u;
}
void t32_inf_mot::clear_has_ad1range() {
  _has_bits_[0] &= ~0x00000010u;
}
void t32_inf_mot::clear_ad1range() {
  ad1range_ = 0;
  clear_has_ad1range();
}
 ::google::protobuf::int32 t32_inf_mot::ad1range() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_inf_mot.ad1range)
  return ad1range_;
}
 void t32_inf_mot::set_ad1range(::google::protobuf::int32 value) {
  set_has_ad1range();
  ad1range_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_inf_mot.ad1range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_horimetro::kHorimetroFieldNumber;
const int t32_horimetro::kPreTdFieldNumber;
const int t32_horimetro::kPreImgFieldNumber;
const int t32_horimetro::kPreEvFieldNumber;
const int t32_horimetro::kPreTelemFieldNumber;
const int t32_horimetro::kPreDeltaTmFieldNumber;
const int t32_horimetro::kPreEvTmFieldNumber;
const int t32_horimetro::kHorReserv03FieldNumber;
const int t32_horimetro::kHorReserv04FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_horimetro::t32_horimetro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_horimetro)
}

void t32_horimetro::InitAsDefaultInstance() {
}

t32_horimetro::t32_horimetro(const t32_horimetro& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_horimetro)
}

void t32_horimetro::SharedCtor() {
  _cached_size_ = 0;
  horimetro_ = 0;
  pre_td_ = 0;
  pre_img_ = 0;
  pre_ev_ = 0;
  pre_telem_ = 0;
  pre_delta_tm_ = 0;
  pre_ev_tm_ = 0;
  hor_reserv03_ = 0;
  hor_reserv04_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_horimetro::~t32_horimetro() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_horimetro)
  SharedDtor();
}

void t32_horimetro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_horimetro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_horimetro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_horimetro_descriptor_;
}

const t32_horimetro& t32_horimetro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_horimetro* t32_horimetro::default_instance_ = NULL;

t32_horimetro* t32_horimetro::New(::google::protobuf::Arena* arena) const {
  t32_horimetro* n = new t32_horimetro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_horimetro::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_horimetro*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(horimetro_, hor_reserv03_);
  }
  hor_reserv04_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_horimetro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_horimetro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 horimetro = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horimetro_)));
          set_has_horimetro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pre_td;
        break;
      }

      // optional int32 pre_td = 2;
      case 2: {
        if (tag == 16) {
         parse_pre_td:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_td_)));
          set_has_pre_td();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pre_img;
        break;
      }

      // optional int32 pre_img = 3;
      case 3: {
        if (tag == 24) {
         parse_pre_img:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_img_)));
          set_has_pre_img();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pre_ev;
        break;
      }

      // optional int32 pre_ev = 4;
      case 4: {
        if (tag == 32) {
         parse_pre_ev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_ev_)));
          set_has_pre_ev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pre_telem;
        break;
      }

      // optional int32 pre_telem = 5;
      case 5: {
        if (tag == 40) {
         parse_pre_telem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_telem_)));
          set_has_pre_telem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pre_delta_tm;
        break;
      }

      // optional int32 pre_delta_tm = 6;
      case 6: {
        if (tag == 48) {
         parse_pre_delta_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_delta_tm_)));
          set_has_pre_delta_tm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pre_ev_tm;
        break;
      }

      // optional int32 pre_ev_tm = 7;
      case 7: {
        if (tag == 56) {
         parse_pre_ev_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_ev_tm_)));
          set_has_pre_ev_tm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hor_reserv03;
        break;
      }

      // optional int32 hor_reserv03 = 8;
      case 8: {
        if (tag == 64) {
         parse_hor_reserv03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hor_reserv03_)));
          set_has_hor_reserv03();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hor_reserv04;
        break;
      }

      // optional int32 hor_reserv04 = 9;
      case 9: {
        if (tag == 72) {
         parse_hor_reserv04:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hor_reserv04_)));
          set_has_hor_reserv04();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_horimetro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_horimetro)
  return false;
#undef DO_
}

void t32_horimetro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_horimetro)
  // optional int32 horimetro = 1;
  if (has_horimetro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->horimetro(), output);
  }

  // optional int32 pre_td = 2;
  if (has_pre_td()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pre_td(), output);
  }

  // optional int32 pre_img = 3;
  if (has_pre_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pre_img(), output);
  }

  // optional int32 pre_ev = 4;
  if (has_pre_ev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pre_ev(), output);
  }

  // optional int32 pre_telem = 5;
  if (has_pre_telem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pre_telem(), output);
  }

  // optional int32 pre_delta_tm = 6;
  if (has_pre_delta_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pre_delta_tm(), output);
  }

  // optional int32 pre_ev_tm = 7;
  if (has_pre_ev_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pre_ev_tm(), output);
  }

  // optional int32 hor_reserv03 = 8;
  if (has_hor_reserv03()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hor_reserv03(), output);
  }

  // optional int32 hor_reserv04 = 9;
  if (has_hor_reserv04()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hor_reserv04(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_horimetro)
}

::google::protobuf::uint8* t32_horimetro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_horimetro)
  // optional int32 horimetro = 1;
  if (has_horimetro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->horimetro(), target);
  }

  // optional int32 pre_td = 2;
  if (has_pre_td()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pre_td(), target);
  }

  // optional int32 pre_img = 3;
  if (has_pre_img()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pre_img(), target);
  }

  // optional int32 pre_ev = 4;
  if (has_pre_ev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pre_ev(), target);
  }

  // optional int32 pre_telem = 5;
  if (has_pre_telem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pre_telem(), target);
  }

  // optional int32 pre_delta_tm = 6;
  if (has_pre_delta_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pre_delta_tm(), target);
  }

  // optional int32 pre_ev_tm = 7;
  if (has_pre_ev_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pre_ev_tm(), target);
  }

  // optional int32 hor_reserv03 = 8;
  if (has_hor_reserv03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hor_reserv03(), target);
  }

  // optional int32 hor_reserv04 = 9;
  if (has_hor_reserv04()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hor_reserv04(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_horimetro)
  return target;
}

int t32_horimetro::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 horimetro = 1;
    if (has_horimetro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horimetro());
    }

    // optional int32 pre_td = 2;
    if (has_pre_td()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_td());
    }

    // optional int32 pre_img = 3;
    if (has_pre_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_img());
    }

    // optional int32 pre_ev = 4;
    if (has_pre_ev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_ev());
    }

    // optional int32 pre_telem = 5;
    if (has_pre_telem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_telem());
    }

    // optional int32 pre_delta_tm = 6;
    if (has_pre_delta_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_delta_tm());
    }

    // optional int32 pre_ev_tm = 7;
    if (has_pre_ev_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_ev_tm());
    }

    // optional int32 hor_reserv03 = 8;
    if (has_hor_reserv03()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hor_reserv03());
    }

  }
  // optional int32 hor_reserv04 = 9;
  if (has_hor_reserv04()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hor_reserv04());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_horimetro::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_horimetro* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_horimetro>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_horimetro::MergeFrom(const t32_horimetro& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horimetro()) {
      set_horimetro(from.horimetro());
    }
    if (from.has_pre_td()) {
      set_pre_td(from.pre_td());
    }
    if (from.has_pre_img()) {
      set_pre_img(from.pre_img());
    }
    if (from.has_pre_ev()) {
      set_pre_ev(from.pre_ev());
    }
    if (from.has_pre_telem()) {
      set_pre_telem(from.pre_telem());
    }
    if (from.has_pre_delta_tm()) {
      set_pre_delta_tm(from.pre_delta_tm());
    }
    if (from.has_pre_ev_tm()) {
      set_pre_ev_tm(from.pre_ev_tm());
    }
    if (from.has_hor_reserv03()) {
      set_hor_reserv03(from.hor_reserv03());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hor_reserv04()) {
      set_hor_reserv04(from.hor_reserv04());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_horimetro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_horimetro::CopyFrom(const t32_horimetro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_horimetro::IsInitialized() const {

  return true;
}

void t32_horimetro::Swap(t32_horimetro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_horimetro::InternalSwap(t32_horimetro* other) {
  std::swap(horimetro_, other->horimetro_);
  std::swap(pre_td_, other->pre_td_);
  std::swap(pre_img_, other->pre_img_);
  std::swap(pre_ev_, other->pre_ev_);
  std::swap(pre_telem_, other->pre_telem_);
  std::swap(pre_delta_tm_, other->pre_delta_tm_);
  std::swap(pre_ev_tm_, other->pre_ev_tm_);
  std::swap(hor_reserv03_, other->hor_reserv03_);
  std::swap(hor_reserv04_, other->hor_reserv04_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_horimetro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_horimetro_descriptor_;
  metadata.reflection = t32_horimetro_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_horimetro

// optional int32 horimetro = 1;
bool t32_horimetro::has_horimetro() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_horimetro::set_has_horimetro() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_horimetro::clear_has_horimetro() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_horimetro::clear_horimetro() {
  horimetro_ = 0;
  clear_has_horimetro();
}
 ::google::protobuf::int32 t32_horimetro::horimetro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.horimetro)
  return horimetro_;
}
 void t32_horimetro::set_horimetro(::google::protobuf::int32 value) {
  set_has_horimetro();
  horimetro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.horimetro)
}

// optional int32 pre_td = 2;
bool t32_horimetro::has_pre_td() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_horimetro::set_has_pre_td() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_horimetro::clear_has_pre_td() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_horimetro::clear_pre_td() {
  pre_td_ = 0;
  clear_has_pre_td();
}
 ::google::protobuf::int32 t32_horimetro::pre_td() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.pre_td)
  return pre_td_;
}
 void t32_horimetro::set_pre_td(::google::protobuf::int32 value) {
  set_has_pre_td();
  pre_td_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.pre_td)
}

// optional int32 pre_img = 3;
bool t32_horimetro::has_pre_img() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t32_horimetro::set_has_pre_img() {
  _has_bits_[0] |= 0x00000004u;
}
void t32_horimetro::clear_has_pre_img() {
  _has_bits_[0] &= ~0x00000004u;
}
void t32_horimetro::clear_pre_img() {
  pre_img_ = 0;
  clear_has_pre_img();
}
 ::google::protobuf::int32 t32_horimetro::pre_img() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.pre_img)
  return pre_img_;
}
 void t32_horimetro::set_pre_img(::google::protobuf::int32 value) {
  set_has_pre_img();
  pre_img_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.pre_img)
}

// optional int32 pre_ev = 4;
bool t32_horimetro::has_pre_ev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t32_horimetro::set_has_pre_ev() {
  _has_bits_[0] |= 0x00000008u;
}
void t32_horimetro::clear_has_pre_ev() {
  _has_bits_[0] &= ~0x00000008u;
}
void t32_horimetro::clear_pre_ev() {
  pre_ev_ = 0;
  clear_has_pre_ev();
}
 ::google::protobuf::int32 t32_horimetro::pre_ev() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.pre_ev)
  return pre_ev_;
}
 void t32_horimetro::set_pre_ev(::google::protobuf::int32 value) {
  set_has_pre_ev();
  pre_ev_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.pre_ev)
}

// optional int32 pre_telem = 5;
bool t32_horimetro::has_pre_telem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t32_horimetro::set_has_pre_telem() {
  _has_bits_[0] |= 0x00000010u;
}
void t32_horimetro::clear_has_pre_telem() {
  _has_bits_[0] &= ~0x00000010u;
}
void t32_horimetro::clear_pre_telem() {
  pre_telem_ = 0;
  clear_has_pre_telem();
}
 ::google::protobuf::int32 t32_horimetro::pre_telem() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.pre_telem)
  return pre_telem_;
}
 void t32_horimetro::set_pre_telem(::google::protobuf::int32 value) {
  set_has_pre_telem();
  pre_telem_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.pre_telem)
}

// optional int32 pre_delta_tm = 6;
bool t32_horimetro::has_pre_delta_tm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void t32_horimetro::set_has_pre_delta_tm() {
  _has_bits_[0] |= 0x00000020u;
}
void t32_horimetro::clear_has_pre_delta_tm() {
  _has_bits_[0] &= ~0x00000020u;
}
void t32_horimetro::clear_pre_delta_tm() {
  pre_delta_tm_ = 0;
  clear_has_pre_delta_tm();
}
 ::google::protobuf::int32 t32_horimetro::pre_delta_tm() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.pre_delta_tm)
  return pre_delta_tm_;
}
 void t32_horimetro::set_pre_delta_tm(::google::protobuf::int32 value) {
  set_has_pre_delta_tm();
  pre_delta_tm_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.pre_delta_tm)
}

// optional int32 pre_ev_tm = 7;
bool t32_horimetro::has_pre_ev_tm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void t32_horimetro::set_has_pre_ev_tm() {
  _has_bits_[0] |= 0x00000040u;
}
void t32_horimetro::clear_has_pre_ev_tm() {
  _has_bits_[0] &= ~0x00000040u;
}
void t32_horimetro::clear_pre_ev_tm() {
  pre_ev_tm_ = 0;
  clear_has_pre_ev_tm();
}
 ::google::protobuf::int32 t32_horimetro::pre_ev_tm() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.pre_ev_tm)
  return pre_ev_tm_;
}
 void t32_horimetro::set_pre_ev_tm(::google::protobuf::int32 value) {
  set_has_pre_ev_tm();
  pre_ev_tm_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.pre_ev_tm)
}

// optional int32 hor_reserv03 = 8;
bool t32_horimetro::has_hor_reserv03() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void t32_horimetro::set_has_hor_reserv03() {
  _has_bits_[0] |= 0x00000080u;
}
void t32_horimetro::clear_has_hor_reserv03() {
  _has_bits_[0] &= ~0x00000080u;
}
void t32_horimetro::clear_hor_reserv03() {
  hor_reserv03_ = 0;
  clear_has_hor_reserv03();
}
 ::google::protobuf::int32 t32_horimetro::hor_reserv03() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.hor_reserv03)
  return hor_reserv03_;
}
 void t32_horimetro::set_hor_reserv03(::google::protobuf::int32 value) {
  set_has_hor_reserv03();
  hor_reserv03_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.hor_reserv03)
}

// optional int32 hor_reserv04 = 9;
bool t32_horimetro::has_hor_reserv04() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void t32_horimetro::set_has_hor_reserv04() {
  _has_bits_[0] |= 0x00000100u;
}
void t32_horimetro::clear_has_hor_reserv04() {
  _has_bits_[0] &= ~0x00000100u;
}
void t32_horimetro::clear_hor_reserv04() {
  hor_reserv04_ = 0;
  clear_has_hor_reserv04();
}
 ::google::protobuf::int32 t32_horimetro::hor_reserv04() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_horimetro.hor_reserv04)
  return hor_reserv04_;
}
 void t32_horimetro::set_hor_reserv04(::google::protobuf::int32 value) {
  set_has_hor_reserv04();
  hor_reserv04_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_horimetro.hor_reserv04)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t_telemetria::kVersaoFieldNumber;
const int t_telemetria::kTempMotorFieldNumber;
const int t_telemetria::kNivelCombustivelFieldNumber;
const int t_telemetria::kNumSensoresFieldNumber;
const int t_telemetria::kTsMotorGiroFieldNumber;
const int t_telemetria::kTsFxAzulFieldNumber;
const int t_telemetria::kTsFxAmareFieldNumber;
const int t_telemetria::kTsFxVerdeFieldNumber;
const int t_telemetria::kTsFxVermeFieldNumber;
const int t_telemetria::kTsMovimentoFieldNumber;
const int t_telemetria::kTsParadoFieldNumber;
const int t_telemetria::kOdometroVelocidadeFieldNumber;
const int t_telemetria::kFlagsTelemetriaFieldNumber;
const int t_telemetria::kRpmFieldNumber;
const int t_telemetria::kTensaoAlternadorPosChaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t_telemetria::t_telemetria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t_telemetria)
}

void t_telemetria::InitAsDefaultInstance() {
  odometro_velocidade_ = const_cast< ::pacote_posicao::t32_odo_vel*>(&::pacote_posicao::t32_odo_vel::default_instance());
  flags_telemetria_ = const_cast< ::pacote_posicao::t32_flg_tm*>(&::pacote_posicao::t32_flg_tm::default_instance());
}

t_telemetria::t_telemetria(const t_telemetria& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t_telemetria)
}

void t_telemetria::SharedCtor() {
  _cached_size_ = 0;
  versao_ = 0;
  temp_motor_ = 0;
  nivel_combustivel_ = 0;
  num_sensores_ = 0;
  ts_motor_giro_ = 0;
  ts_fx_azul_ = 0;
  ts_fx_amare_ = 0;
  ts_fx_verde_ = 0;
  ts_fx_verme_ = 0;
  ts_movimento_ = 0;
  ts_parado_ = 0;
  odometro_velocidade_ = NULL;
  flags_telemetria_ = NULL;
  rpm_ = 0;
  tensao_alternador_pos_chave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_telemetria::~t_telemetria() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t_telemetria)
  SharedDtor();
}

void t_telemetria::SharedDtor() {
  if (this != default_instance_) {
    delete odometro_velocidade_;
    delete flags_telemetria_;
  }
}

void t_telemetria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_telemetria::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_telemetria_descriptor_;
}

const t_telemetria& t_telemetria::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t_telemetria* t_telemetria::default_instance_ = NULL;

t_telemetria* t_telemetria::New(::google::protobuf::Arena* arena) const {
  t_telemetria* n = new t_telemetria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t_telemetria::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t_telemetria*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(versao_, ts_fx_verde_);
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(ts_fx_verme_, ts_movimento_);
    ZR_(ts_parado_, rpm_);
    if (has_odometro_velocidade()) {
      if (odometro_velocidade_ != NULL) odometro_velocidade_->::pacote_posicao::t32_odo_vel::Clear();
    }
    if (has_flags_telemetria()) {
      if (flags_telemetria_ != NULL) flags_telemetria_->::pacote_posicao::t32_flg_tm::Clear();
    }
    tensao_alternador_pos_chave_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t_telemetria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t_telemetria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 versao = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versao_)));
          set_has_versao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_temp_motor;
        break;
      }

      // optional int32 temp_motor = 2;
      case 2: {
        if (tag == 16) {
         parse_temp_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_motor_)));
          set_has_temp_motor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nivel_combustivel;
        break;
      }

      // optional int32 nivel_combustivel = 3;
      case 3: {
        if (tag == 24) {
         parse_nivel_combustivel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nivel_combustivel_)));
          set_has_nivel_combustivel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_sensores;
        break;
      }

      // optional int32 num_sensores = 4;
      case 4: {
        if (tag == 32) {
         parse_num_sensores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sensores_)));
          set_has_num_sensores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts_motor_giro;
        break;
      }

      // optional int32 ts_motor_giro = 5;
      case 5: {
        if (tag == 40) {
         parse_ts_motor_giro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_motor_giro_)));
          set_has_ts_motor_giro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ts_fx_azul;
        break;
      }

      // optional int32 ts_fx_azul = 6;
      case 6: {
        if (tag == 48) {
         parse_ts_fx_azul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_fx_azul_)));
          set_has_ts_fx_azul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ts_fx_amare;
        break;
      }

      // optional int32 ts_fx_amare = 7;
      case 7: {
        if (tag == 56) {
         parse_ts_fx_amare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_fx_amare_)));
          set_has_ts_fx_amare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ts_fx_verde;
        break;
      }

      // optional int32 ts_fx_verde = 8;
      case 8: {
        if (tag == 64) {
         parse_ts_fx_verde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_fx_verde_)));
          set_has_ts_fx_verde();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ts_fx_verme;
        break;
      }

      // optional int32 ts_fx_verme = 9;
      case 9: {
        if (tag == 72) {
         parse_ts_fx_verme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_fx_verme_)));
          set_has_ts_fx_verme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ts_movimento;
        break;
      }

      // optional int32 ts_movimento = 10;
      case 10: {
        if (tag == 80) {
         parse_ts_movimento:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_movimento_)));
          set_has_ts_movimento();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ts_parado;
        break;
      }

      // optional int32 ts_parado = 11;
      case 11: {
        if (tag == 88) {
         parse_ts_parado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_parado_)));
          set_has_ts_parado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_odometro_velocidade;
        break;
      }

      // optional .pacote_posicao.t32_odo_vel odometro_velocidade = 12;
      case 12: {
        if (tag == 98) {
         parse_odometro_velocidade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometro_velocidade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_flags_telemetria;
        break;
      }

      // optional .pacote_posicao.t32_flg_tm flags_telemetria = 13;
      case 13: {
        if (tag == 106) {
         parse_flags_telemetria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flags_telemetria()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rpm;
        break;
      }

      // optional int32 rpm = 14;
      case 14: {
        if (tag == 112) {
         parse_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpm_)));
          set_has_rpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_tensao_alternador_pos_chave;
        break;
      }

      // optional int32 tensao_alternador_pos_chave = 15;
      case 15: {
        if (tag == 120) {
         parse_tensao_alternador_pos_chave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tensao_alternador_pos_chave_)));
          set_has_tensao_alternador_pos_chave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t_telemetria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t_telemetria)
  return false;
#undef DO_
}

void t_telemetria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t_telemetria)
  // optional int32 versao = 1;
  if (has_versao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->versao(), output);
  }

  // optional int32 temp_motor = 2;
  if (has_temp_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->temp_motor(), output);
  }

  // optional int32 nivel_combustivel = 3;
  if (has_nivel_combustivel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nivel_combustivel(), output);
  }

  // optional int32 num_sensores = 4;
  if (has_num_sensores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_sensores(), output);
  }

  // optional int32 ts_motor_giro = 5;
  if (has_ts_motor_giro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ts_motor_giro(), output);
  }

  // optional int32 ts_fx_azul = 6;
  if (has_ts_fx_azul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ts_fx_azul(), output);
  }

  // optional int32 ts_fx_amare = 7;
  if (has_ts_fx_amare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ts_fx_amare(), output);
  }

  // optional int32 ts_fx_verde = 8;
  if (has_ts_fx_verde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ts_fx_verde(), output);
  }

  // optional int32 ts_fx_verme = 9;
  if (has_ts_fx_verme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ts_fx_verme(), output);
  }

  // optional int32 ts_movimento = 10;
  if (has_ts_movimento()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ts_movimento(), output);
  }

  // optional int32 ts_parado = 11;
  if (has_ts_parado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ts_parado(), output);
  }

  // optional .pacote_posicao.t32_odo_vel odometro_velocidade = 12;
  if (has_odometro_velocidade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->odometro_velocidade_, output);
  }

  // optional .pacote_posicao.t32_flg_tm flags_telemetria = 13;
  if (has_flags_telemetria()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->flags_telemetria_, output);
  }

  // optional int32 rpm = 14;
  if (has_rpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rpm(), output);
  }

  // optional int32 tensao_alternador_pos_chave = 15;
  if (has_tensao_alternador_pos_chave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tensao_alternador_pos_chave(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t_telemetria)
}

::google::protobuf::uint8* t_telemetria::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t_telemetria)
  // optional int32 versao = 1;
  if (has_versao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->versao(), target);
  }

  // optional int32 temp_motor = 2;
  if (has_temp_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->temp_motor(), target);
  }

  // optional int32 nivel_combustivel = 3;
  if (has_nivel_combustivel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nivel_combustivel(), target);
  }

  // optional int32 num_sensores = 4;
  if (has_num_sensores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_sensores(), target);
  }

  // optional int32 ts_motor_giro = 5;
  if (has_ts_motor_giro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ts_motor_giro(), target);
  }

  // optional int32 ts_fx_azul = 6;
  if (has_ts_fx_azul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ts_fx_azul(), target);
  }

  // optional int32 ts_fx_amare = 7;
  if (has_ts_fx_amare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ts_fx_amare(), target);
  }

  // optional int32 ts_fx_verde = 8;
  if (has_ts_fx_verde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ts_fx_verde(), target);
  }

  // optional int32 ts_fx_verme = 9;
  if (has_ts_fx_verme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ts_fx_verme(), target);
  }

  // optional int32 ts_movimento = 10;
  if (has_ts_movimento()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ts_movimento(), target);
  }

  // optional int32 ts_parado = 11;
  if (has_ts_parado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ts_parado(), target);
  }

  // optional .pacote_posicao.t32_odo_vel odometro_velocidade = 12;
  if (has_odometro_velocidade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->odometro_velocidade_, target);
  }

  // optional .pacote_posicao.t32_flg_tm flags_telemetria = 13;
  if (has_flags_telemetria()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->flags_telemetria_, target);
  }

  // optional int32 rpm = 14;
  if (has_rpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rpm(), target);
  }

  // optional int32 tensao_alternador_pos_chave = 15;
  if (has_tensao_alternador_pos_chave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tensao_alternador_pos_chave(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t_telemetria)
  return target;
}

int t_telemetria::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 versao = 1;
    if (has_versao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versao());
    }

    // optional int32 temp_motor = 2;
    if (has_temp_motor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temp_motor());
    }

    // optional int32 nivel_combustivel = 3;
    if (has_nivel_combustivel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nivel_combustivel());
    }

    // optional int32 num_sensores = 4;
    if (has_num_sensores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sensores());
    }

    // optional int32 ts_motor_giro = 5;
    if (has_ts_motor_giro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_motor_giro());
    }

    // optional int32 ts_fx_azul = 6;
    if (has_ts_fx_azul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_fx_azul());
    }

    // optional int32 ts_fx_amare = 7;
    if (has_ts_fx_amare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_fx_amare());
    }

    // optional int32 ts_fx_verde = 8;
    if (has_ts_fx_verde()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_fx_verde());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int32 ts_fx_verme = 9;
    if (has_ts_fx_verme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_fx_verme());
    }

    // optional int32 ts_movimento = 10;
    if (has_ts_movimento()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_movimento());
    }

    // optional int32 ts_parado = 11;
    if (has_ts_parado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts_parado());
    }

    // optional .pacote_posicao.t32_odo_vel odometro_velocidade = 12;
    if (has_odometro_velocidade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->odometro_velocidade_);
    }

    // optional .pacote_posicao.t32_flg_tm flags_telemetria = 13;
    if (has_flags_telemetria()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flags_telemetria_);
    }

    // optional int32 rpm = 14;
    if (has_rpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpm());
    }

    // optional int32 tensao_alternador_pos_chave = 15;
    if (has_tensao_alternador_pos_chave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tensao_alternador_pos_chave());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_telemetria::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t_telemetria* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t_telemetria>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_telemetria::MergeFrom(const t_telemetria& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_versao()) {
      set_versao(from.versao());
    }
    if (from.has_temp_motor()) {
      set_temp_motor(from.temp_motor());
    }
    if (from.has_nivel_combustivel()) {
      set_nivel_combustivel(from.nivel_combustivel());
    }
    if (from.has_num_sensores()) {
      set_num_sensores(from.num_sensores());
    }
    if (from.has_ts_motor_giro()) {
      set_ts_motor_giro(from.ts_motor_giro());
    }
    if (from.has_ts_fx_azul()) {
      set_ts_fx_azul(from.ts_fx_azul());
    }
    if (from.has_ts_fx_amare()) {
      set_ts_fx_amare(from.ts_fx_amare());
    }
    if (from.has_ts_fx_verde()) {
      set_ts_fx_verde(from.ts_fx_verde());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ts_fx_verme()) {
      set_ts_fx_verme(from.ts_fx_verme());
    }
    if (from.has_ts_movimento()) {
      set_ts_movimento(from.ts_movimento());
    }
    if (from.has_ts_parado()) {
      set_ts_parado(from.ts_parado());
    }
    if (from.has_odometro_velocidade()) {
      mutable_odometro_velocidade()->::pacote_posicao::t32_odo_vel::MergeFrom(from.odometro_velocidade());
    }
    if (from.has_flags_telemetria()) {
      mutable_flags_telemetria()->::pacote_posicao::t32_flg_tm::MergeFrom(from.flags_telemetria());
    }
    if (from.has_rpm()) {
      set_rpm(from.rpm());
    }
    if (from.has_tensao_alternador_pos_chave()) {
      set_tensao_alternador_pos_chave(from.tensao_alternador_pos_chave());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t_telemetria::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_telemetria::CopyFrom(const t_telemetria& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_telemetria::IsInitialized() const {

  return true;
}

void t_telemetria::Swap(t_telemetria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t_telemetria::InternalSwap(t_telemetria* other) {
  std::swap(versao_, other->versao_);
  std::swap(temp_motor_, other->temp_motor_);
  std::swap(nivel_combustivel_, other->nivel_combustivel_);
  std::swap(num_sensores_, other->num_sensores_);
  std::swap(ts_motor_giro_, other->ts_motor_giro_);
  std::swap(ts_fx_azul_, other->ts_fx_azul_);
  std::swap(ts_fx_amare_, other->ts_fx_amare_);
  std::swap(ts_fx_verde_, other->ts_fx_verde_);
  std::swap(ts_fx_verme_, other->ts_fx_verme_);
  std::swap(ts_movimento_, other->ts_movimento_);
  std::swap(ts_parado_, other->ts_parado_);
  std::swap(odometro_velocidade_, other->odometro_velocidade_);
  std::swap(flags_telemetria_, other->flags_telemetria_);
  std::swap(rpm_, other->rpm_);
  std::swap(tensao_alternador_pos_chave_, other->tensao_alternador_pos_chave_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t_telemetria::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_telemetria_descriptor_;
  metadata.reflection = t_telemetria_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t_telemetria

// optional int32 versao = 1;
bool t_telemetria::has_versao() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t_telemetria::set_has_versao() {
  _has_bits_[0] |= 0x00000001u;
}
void t_telemetria::clear_has_versao() {
  _has_bits_[0] &= ~0x00000001u;
}
void t_telemetria::clear_versao() {
  versao_ = 0;
  clear_has_versao();
}
 ::google::protobuf::int32 t_telemetria::versao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.versao)
  return versao_;
}
 void t_telemetria::set_versao(::google::protobuf::int32 value) {
  set_has_versao();
  versao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.versao)
}

// optional int32 temp_motor = 2;
bool t_telemetria::has_temp_motor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t_telemetria::set_has_temp_motor() {
  _has_bits_[0] |= 0x00000002u;
}
void t_telemetria::clear_has_temp_motor() {
  _has_bits_[0] &= ~0x00000002u;
}
void t_telemetria::clear_temp_motor() {
  temp_motor_ = 0;
  clear_has_temp_motor();
}
 ::google::protobuf::int32 t_telemetria::temp_motor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.temp_motor)
  return temp_motor_;
}
 void t_telemetria::set_temp_motor(::google::protobuf::int32 value) {
  set_has_temp_motor();
  temp_motor_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.temp_motor)
}

// optional int32 nivel_combustivel = 3;
bool t_telemetria::has_nivel_combustivel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t_telemetria::set_has_nivel_combustivel() {
  _has_bits_[0] |= 0x00000004u;
}
void t_telemetria::clear_has_nivel_combustivel() {
  _has_bits_[0] &= ~0x00000004u;
}
void t_telemetria::clear_nivel_combustivel() {
  nivel_combustivel_ = 0;
  clear_has_nivel_combustivel();
}
 ::google::protobuf::int32 t_telemetria::nivel_combustivel() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.nivel_combustivel)
  return nivel_combustivel_;
}
 void t_telemetria::set_nivel_combustivel(::google::protobuf::int32 value) {
  set_has_nivel_combustivel();
  nivel_combustivel_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.nivel_combustivel)
}

// optional int32 num_sensores = 4;
bool t_telemetria::has_num_sensores() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t_telemetria::set_has_num_sensores() {
  _has_bits_[0] |= 0x00000008u;
}
void t_telemetria::clear_has_num_sensores() {
  _has_bits_[0] &= ~0x00000008u;
}
void t_telemetria::clear_num_sensores() {
  num_sensores_ = 0;
  clear_has_num_sensores();
}
 ::google::protobuf::int32 t_telemetria::num_sensores() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.num_sensores)
  return num_sensores_;
}
 void t_telemetria::set_num_sensores(::google::protobuf::int32 value) {
  set_has_num_sensores();
  num_sensores_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.num_sensores)
}

// optional int32 ts_motor_giro = 5;
bool t_telemetria::has_ts_motor_giro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t_telemetria::set_has_ts_motor_giro() {
  _has_bits_[0] |= 0x00000010u;
}
void t_telemetria::clear_has_ts_motor_giro() {
  _has_bits_[0] &= ~0x00000010u;
}
void t_telemetria::clear_ts_motor_giro() {
  ts_motor_giro_ = 0;
  clear_has_ts_motor_giro();
}
 ::google::protobuf::int32 t_telemetria::ts_motor_giro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_motor_giro)
  return ts_motor_giro_;
}
 void t_telemetria::set_ts_motor_giro(::google::protobuf::int32 value) {
  set_has_ts_motor_giro();
  ts_motor_giro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_motor_giro)
}

// optional int32 ts_fx_azul = 6;
bool t_telemetria::has_ts_fx_azul() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void t_telemetria::set_has_ts_fx_azul() {
  _has_bits_[0] |= 0x00000020u;
}
void t_telemetria::clear_has_ts_fx_azul() {
  _has_bits_[0] &= ~0x00000020u;
}
void t_telemetria::clear_ts_fx_azul() {
  ts_fx_azul_ = 0;
  clear_has_ts_fx_azul();
}
 ::google::protobuf::int32 t_telemetria::ts_fx_azul() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_fx_azul)
  return ts_fx_azul_;
}
 void t_telemetria::set_ts_fx_azul(::google::protobuf::int32 value) {
  set_has_ts_fx_azul();
  ts_fx_azul_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_fx_azul)
}

// optional int32 ts_fx_amare = 7;
bool t_telemetria::has_ts_fx_amare() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void t_telemetria::set_has_ts_fx_amare() {
  _has_bits_[0] |= 0x00000040u;
}
void t_telemetria::clear_has_ts_fx_amare() {
  _has_bits_[0] &= ~0x00000040u;
}
void t_telemetria::clear_ts_fx_amare() {
  ts_fx_amare_ = 0;
  clear_has_ts_fx_amare();
}
 ::google::protobuf::int32 t_telemetria::ts_fx_amare() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_fx_amare)
  return ts_fx_amare_;
}
 void t_telemetria::set_ts_fx_amare(::google::protobuf::int32 value) {
  set_has_ts_fx_amare();
  ts_fx_amare_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_fx_amare)
}

// optional int32 ts_fx_verde = 8;
bool t_telemetria::has_ts_fx_verde() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void t_telemetria::set_has_ts_fx_verde() {
  _has_bits_[0] |= 0x00000080u;
}
void t_telemetria::clear_has_ts_fx_verde() {
  _has_bits_[0] &= ~0x00000080u;
}
void t_telemetria::clear_ts_fx_verde() {
  ts_fx_verde_ = 0;
  clear_has_ts_fx_verde();
}
 ::google::protobuf::int32 t_telemetria::ts_fx_verde() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_fx_verde)
  return ts_fx_verde_;
}
 void t_telemetria::set_ts_fx_verde(::google::protobuf::int32 value) {
  set_has_ts_fx_verde();
  ts_fx_verde_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_fx_verde)
}

// optional int32 ts_fx_verme = 9;
bool t_telemetria::has_ts_fx_verme() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void t_telemetria::set_has_ts_fx_verme() {
  _has_bits_[0] |= 0x00000100u;
}
void t_telemetria::clear_has_ts_fx_verme() {
  _has_bits_[0] &= ~0x00000100u;
}
void t_telemetria::clear_ts_fx_verme() {
  ts_fx_verme_ = 0;
  clear_has_ts_fx_verme();
}
 ::google::protobuf::int32 t_telemetria::ts_fx_verme() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_fx_verme)
  return ts_fx_verme_;
}
 void t_telemetria::set_ts_fx_verme(::google::protobuf::int32 value) {
  set_has_ts_fx_verme();
  ts_fx_verme_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_fx_verme)
}

// optional int32 ts_movimento = 10;
bool t_telemetria::has_ts_movimento() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void t_telemetria::set_has_ts_movimento() {
  _has_bits_[0] |= 0x00000200u;
}
void t_telemetria::clear_has_ts_movimento() {
  _has_bits_[0] &= ~0x00000200u;
}
void t_telemetria::clear_ts_movimento() {
  ts_movimento_ = 0;
  clear_has_ts_movimento();
}
 ::google::protobuf::int32 t_telemetria::ts_movimento() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_movimento)
  return ts_movimento_;
}
 void t_telemetria::set_ts_movimento(::google::protobuf::int32 value) {
  set_has_ts_movimento();
  ts_movimento_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_movimento)
}

// optional int32 ts_parado = 11;
bool t_telemetria::has_ts_parado() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void t_telemetria::set_has_ts_parado() {
  _has_bits_[0] |= 0x00000400u;
}
void t_telemetria::clear_has_ts_parado() {
  _has_bits_[0] &= ~0x00000400u;
}
void t_telemetria::clear_ts_parado() {
  ts_parado_ = 0;
  clear_has_ts_parado();
}
 ::google::protobuf::int32 t_telemetria::ts_parado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.ts_parado)
  return ts_parado_;
}
 void t_telemetria::set_ts_parado(::google::protobuf::int32 value) {
  set_has_ts_parado();
  ts_parado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.ts_parado)
}

// optional .pacote_posicao.t32_odo_vel odometro_velocidade = 12;
bool t_telemetria::has_odometro_velocidade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void t_telemetria::set_has_odometro_velocidade() {
  _has_bits_[0] |= 0x00000800u;
}
void t_telemetria::clear_has_odometro_velocidade() {
  _has_bits_[0] &= ~0x00000800u;
}
void t_telemetria::clear_odometro_velocidade() {
  if (odometro_velocidade_ != NULL) odometro_velocidade_->::pacote_posicao::t32_odo_vel::Clear();
  clear_has_odometro_velocidade();
}
const ::pacote_posicao::t32_odo_vel& t_telemetria::odometro_velocidade() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.odometro_velocidade)
  return odometro_velocidade_ != NULL ? *odometro_velocidade_ : *default_instance_->odometro_velocidade_;
}
::pacote_posicao::t32_odo_vel* t_telemetria::mutable_odometro_velocidade() {
  set_has_odometro_velocidade();
  if (odometro_velocidade_ == NULL) {
    odometro_velocidade_ = new ::pacote_posicao::t32_odo_vel;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.t_telemetria.odometro_velocidade)
  return odometro_velocidade_;
}
::pacote_posicao::t32_odo_vel* t_telemetria::release_odometro_velocidade() {
  clear_has_odometro_velocidade();
  ::pacote_posicao::t32_odo_vel* temp = odometro_velocidade_;
  odometro_velocidade_ = NULL;
  return temp;
}
void t_telemetria::set_allocated_odometro_velocidade(::pacote_posicao::t32_odo_vel* odometro_velocidade) {
  delete odometro_velocidade_;
  odometro_velocidade_ = odometro_velocidade;
  if (odometro_velocidade) {
    set_has_odometro_velocidade();
  } else {
    clear_has_odometro_velocidade();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.t_telemetria.odometro_velocidade)
}

// optional .pacote_posicao.t32_flg_tm flags_telemetria = 13;
bool t_telemetria::has_flags_telemetria() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void t_telemetria::set_has_flags_telemetria() {
  _has_bits_[0] |= 0x00001000u;
}
void t_telemetria::clear_has_flags_telemetria() {
  _has_bits_[0] &= ~0x00001000u;
}
void t_telemetria::clear_flags_telemetria() {
  if (flags_telemetria_ != NULL) flags_telemetria_->::pacote_posicao::t32_flg_tm::Clear();
  clear_has_flags_telemetria();
}
const ::pacote_posicao::t32_flg_tm& t_telemetria::flags_telemetria() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.flags_telemetria)
  return flags_telemetria_ != NULL ? *flags_telemetria_ : *default_instance_->flags_telemetria_;
}
::pacote_posicao::t32_flg_tm* t_telemetria::mutable_flags_telemetria() {
  set_has_flags_telemetria();
  if (flags_telemetria_ == NULL) {
    flags_telemetria_ = new ::pacote_posicao::t32_flg_tm;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.t_telemetria.flags_telemetria)
  return flags_telemetria_;
}
::pacote_posicao::t32_flg_tm* t_telemetria::release_flags_telemetria() {
  clear_has_flags_telemetria();
  ::pacote_posicao::t32_flg_tm* temp = flags_telemetria_;
  flags_telemetria_ = NULL;
  return temp;
}
void t_telemetria::set_allocated_flags_telemetria(::pacote_posicao::t32_flg_tm* flags_telemetria) {
  delete flags_telemetria_;
  flags_telemetria_ = flags_telemetria;
  if (flags_telemetria) {
    set_has_flags_telemetria();
  } else {
    clear_has_flags_telemetria();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.t_telemetria.flags_telemetria)
}

// optional int32 rpm = 14;
bool t_telemetria::has_rpm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void t_telemetria::set_has_rpm() {
  _has_bits_[0] |= 0x00002000u;
}
void t_telemetria::clear_has_rpm() {
  _has_bits_[0] &= ~0x00002000u;
}
void t_telemetria::clear_rpm() {
  rpm_ = 0;
  clear_has_rpm();
}
 ::google::protobuf::int32 t_telemetria::rpm() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.rpm)
  return rpm_;
}
 void t_telemetria::set_rpm(::google::protobuf::int32 value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.rpm)
}

// optional int32 tensao_alternador_pos_chave = 15;
bool t_telemetria::has_tensao_alternador_pos_chave() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void t_telemetria::set_has_tensao_alternador_pos_chave() {
  _has_bits_[0] |= 0x00004000u;
}
void t_telemetria::clear_has_tensao_alternador_pos_chave() {
  _has_bits_[0] &= ~0x00004000u;
}
void t_telemetria::clear_tensao_alternador_pos_chave() {
  tensao_alternador_pos_chave_ = 0;
  clear_has_tensao_alternador_pos_chave();
}
 ::google::protobuf::int32 t_telemetria::tensao_alternador_pos_chave() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria.tensao_alternador_pos_chave)
  return tensao_alternador_pos_chave_;
}
 void t_telemetria::set_tensao_alternador_pos_chave(::google::protobuf::int32 value) {
  set_has_tensao_alternador_pos_chave();
  tensao_alternador_pos_chave_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria.tensao_alternador_pos_chave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t32_flg_tm::kFalhaPressaoOleoFieldNumber;
const int t32_flg_tm::kExcPeEmbreagemFieldNumber;
const int t32_flg_tm::kLimpadorLigadoFieldNumber;
const int t32_flg_tm::kEstCaixaMarchaFieldNumber;
const int t32_flg_tm::kEstFreioMotorFieldNumber;
const int t32_flg_tm::kEstSaidaFieldNumber;
const int t32_flg_tm::kFlagBanguelaFieldNumber;
const int t32_flg_tm::kIgnSemGiroMotorFieldNumber;
const int t32_flg_tm::kExcMarchaLentaFieldNumber;
const int t32_flg_tm::kExcVelocidadeFieldNumber;
const int t32_flg_tm::kExcRotacaoFieldNumber;
const int t32_flg_tm::kFalhaTmpLiqArrefFieldNumber;
const int t32_flg_tm::kTensaoAlternadorFieldNumber;
const int t32_flg_tm::kMotorFuncionandoFieldNumber;
const int t32_flg_tm::kEstFreioFieldNumber;
const int t32_flg_tm::kEstEmbreagemFieldNumber;
const int t32_flg_tm::kEstPressaoOleoFieldNumber;
const int t32_flg_tm::kEstLimpadorFieldNumber;
const int t32_flg_tm::kPaddingFieldNumber;
const int t32_flg_tm::kIdDeltaCfgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t32_flg_tm::t32_flg_tm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t32_flg_tm)
}

void t32_flg_tm::InitAsDefaultInstance() {
}

t32_flg_tm::t32_flg_tm(const t32_flg_tm& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t32_flg_tm)
}

void t32_flg_tm::SharedCtor() {
  _cached_size_ = 0;
  falha_pressao_oleo_ = 0;
  exc_pe_embreagem_ = 0;
  limpador_ligado_ = 0;
  est_caixa_marcha_ = 0;
  est_freio_motor_ = 0;
  est_saida_ = 0;
  flag_banguela_ = 0;
  ign_sem_giro_motor_ = 0;
  exc_marcha_lenta_ = 0;
  exc_velocidade_ = 0;
  exc_rotacao_ = 0;
  falha_tmp_liq_arref_ = 0;
  tensao_alternador_ = 0;
  motor_funcionando_ = 0;
  est_freio_ = 0;
  est_embreagem_ = 0;
  est_pressao_oleo_ = 0;
  est_limpador_ = 0;
  padding_ = 0;
  id_delta_cfg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t32_flg_tm::~t32_flg_tm() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t32_flg_tm)
  SharedDtor();
}

void t32_flg_tm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t32_flg_tm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t32_flg_tm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t32_flg_tm_descriptor_;
}

const t32_flg_tm& t32_flg_tm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pacote_5fposicao_2eproto();
  return *default_instance_;
}

t32_flg_tm* t32_flg_tm::default_instance_ = NULL;

t32_flg_tm* t32_flg_tm::New(::google::protobuf::Arena* arena) const {
  t32_flg_tm* n = new t32_flg_tm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t32_flg_tm::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t32_flg_tm*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(falha_pressao_oleo_, ign_sem_giro_motor_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(exc_marcha_lenta_, est_embreagem_);
  }
  ZR_(est_pressao_oleo_, id_delta_cfg_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t32_flg_tm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t32_flg_tm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 falha_pressao_oleo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &falha_pressao_oleo_)));
          set_has_falha_pressao_oleo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exc_pe_embreagem;
        break;
      }

      // optional int32 exc_pe_embreagem = 2;
      case 2: {
        if (tag == 16) {
         parse_exc_pe_embreagem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exc_pe_embreagem_)));
          set_has_exc_pe_embreagem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limpador_ligado;
        break;
      }

      // optional int32 limpador_ligado = 3;
      case 3: {
        if (tag == 24) {
         parse_limpador_ligado:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limpador_ligado_)));
          set_has_limpador_ligado();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_est_caixa_marcha;
        break;
      }

      // optional int32 est_caixa_marcha = 4;
      case 4: {
        if (tag == 32) {
         parse_est_caixa_marcha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_caixa_marcha_)));
          set_has_est_caixa_marcha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_est_freio_motor;
        break;
      }

      // optional int32 est_freio_motor = 5;
      case 5: {
        if (tag == 40) {
         parse_est_freio_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_freio_motor_)));
          set_has_est_freio_motor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_est_saida;
        break;
      }

      // optional int32 est_saida = 6;
      case 6: {
        if (tag == 48) {
         parse_est_saida:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_saida_)));
          set_has_est_saida();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flag_banguela;
        break;
      }

      // optional int32 flag_banguela = 7;
      case 7: {
        if (tag == 56) {
         parse_flag_banguela:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_banguela_)));
          set_has_flag_banguela();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ign_sem_giro_motor;
        break;
      }

      // optional int32 ign_sem_giro_motor = 8;
      case 8: {
        if (tag == 64) {
         parse_ign_sem_giro_motor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ign_sem_giro_motor_)));
          set_has_ign_sem_giro_motor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exc_marcha_lenta;
        break;
      }

      // optional int32 exc_marcha_lenta = 9;
      case 9: {
        if (tag == 72) {
         parse_exc_marcha_lenta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exc_marcha_lenta_)));
          set_has_exc_marcha_lenta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_exc_velocidade;
        break;
      }

      // optional int32 exc_velocidade = 10;
      case 10: {
        if (tag == 80) {
         parse_exc_velocidade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exc_velocidade_)));
          set_has_exc_velocidade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_exc_rotacao;
        break;
      }

      // optional int32 exc_rotacao = 11;
      case 11: {
        if (tag == 88) {
         parse_exc_rotacao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exc_rotacao_)));
          set_has_exc_rotacao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_falha_tmp_liq_arref;
        break;
      }

      // optional int32 falha_tmp_liq_arref = 12;
      case 12: {
        if (tag == 96) {
         parse_falha_tmp_liq_arref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &falha_tmp_liq_arref_)));
          set_has_falha_tmp_liq_arref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_tensao_alternador;
        break;
      }

      // optional int32 tensao_alternador = 13;
      case 13: {
        if (tag == 104) {
         parse_tensao_alternador:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tensao_alternador_)));
          set_has_tensao_alternador();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_motor_funcionando;
        break;
      }

      // optional int32 motor_funcionando = 14;
      case 14: {
        if (tag == 112) {
         parse_motor_funcionando:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motor_funcionando_)));
          set_has_motor_funcionando();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_est_freio;
        break;
      }

      // optional int32 est_freio = 15;
      case 15: {
        if (tag == 120) {
         parse_est_freio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_freio_)));
          set_has_est_freio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_est_embreagem;
        break;
      }

      // optional int32 est_embreagem = 16;
      case 16: {
        if (tag == 128) {
         parse_est_embreagem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_embreagem_)));
          set_has_est_embreagem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_est_pressao_oleo;
        break;
      }

      // optional int32 est_pressao_oleo = 17;
      case 17: {
        if (tag == 136) {
         parse_est_pressao_oleo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_pressao_oleo_)));
          set_has_est_pressao_oleo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_est_limpador;
        break;
      }

      // optional int32 est_limpador = 18;
      case 18: {
        if (tag == 144) {
         parse_est_limpador:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &est_limpador_)));
          set_has_est_limpador();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_padding;
        break;
      }

      // optional int32 padding = 19;
      case 19: {
        if (tag == 152) {
         parse_padding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_)));
          set_has_padding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_id_delta_cfg;
        break;
      }

      // optional int32 id_delta_cfg = 20;
      case 20: {
        if (tag == 160) {
         parse_id_delta_cfg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_delta_cfg_)));
          set_has_id_delta_cfg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t32_flg_tm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t32_flg_tm)
  return false;
#undef DO_
}

void t32_flg_tm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t32_flg_tm)
  // optional int32 falha_pressao_oleo = 1;
  if (has_falha_pressao_oleo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->falha_pressao_oleo(), output);
  }

  // optional int32 exc_pe_embreagem = 2;
  if (has_exc_pe_embreagem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exc_pe_embreagem(), output);
  }

  // optional int32 limpador_ligado = 3;
  if (has_limpador_ligado()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limpador_ligado(), output);
  }

  // optional int32 est_caixa_marcha = 4;
  if (has_est_caixa_marcha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->est_caixa_marcha(), output);
  }

  // optional int32 est_freio_motor = 5;
  if (has_est_freio_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->est_freio_motor(), output);
  }

  // optional int32 est_saida = 6;
  if (has_est_saida()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->est_saida(), output);
  }

  // optional int32 flag_banguela = 7;
  if (has_flag_banguela()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flag_banguela(), output);
  }

  // optional int32 ign_sem_giro_motor = 8;
  if (has_ign_sem_giro_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ign_sem_giro_motor(), output);
  }

  // optional int32 exc_marcha_lenta = 9;
  if (has_exc_marcha_lenta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exc_marcha_lenta(), output);
  }

  // optional int32 exc_velocidade = 10;
  if (has_exc_velocidade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exc_velocidade(), output);
  }

  // optional int32 exc_rotacao = 11;
  if (has_exc_rotacao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->exc_rotacao(), output);
  }

  // optional int32 falha_tmp_liq_arref = 12;
  if (has_falha_tmp_liq_arref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->falha_tmp_liq_arref(), output);
  }

  // optional int32 tensao_alternador = 13;
  if (has_tensao_alternador()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tensao_alternador(), output);
  }

  // optional int32 motor_funcionando = 14;
  if (has_motor_funcionando()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->motor_funcionando(), output);
  }

  // optional int32 est_freio = 15;
  if (has_est_freio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->est_freio(), output);
  }

  // optional int32 est_embreagem = 16;
  if (has_est_embreagem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->est_embreagem(), output);
  }

  // optional int32 est_pressao_oleo = 17;
  if (has_est_pressao_oleo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->est_pressao_oleo(), output);
  }

  // optional int32 est_limpador = 18;
  if (has_est_limpador()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->est_limpador(), output);
  }

  // optional int32 padding = 19;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->padding(), output);
  }

  // optional int32 id_delta_cfg = 20;
  if (has_id_delta_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->id_delta_cfg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t32_flg_tm)
}

::google::protobuf::uint8* t32_flg_tm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t32_flg_tm)
  // optional int32 falha_pressao_oleo = 1;
  if (has_falha_pressao_oleo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->falha_pressao_oleo(), target);
  }

  // optional int32 exc_pe_embreagem = 2;
  if (has_exc_pe_embreagem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exc_pe_embreagem(), target);
  }

  // optional int32 limpador_ligado = 3;
  if (has_limpador_ligado()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limpador_ligado(), target);
  }

  // optional int32 est_caixa_marcha = 4;
  if (has_est_caixa_marcha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->est_caixa_marcha(), target);
  }

  // optional int32 est_freio_motor = 5;
  if (has_est_freio_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->est_freio_motor(), target);
  }

  // optional int32 est_saida = 6;
  if (has_est_saida()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->est_saida(), target);
  }

  // optional int32 flag_banguela = 7;
  if (has_flag_banguela()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flag_banguela(), target);
  }

  // optional int32 ign_sem_giro_motor = 8;
  if (has_ign_sem_giro_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ign_sem_giro_motor(), target);
  }

  // optional int32 exc_marcha_lenta = 9;
  if (has_exc_marcha_lenta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exc_marcha_lenta(), target);
  }

  // optional int32 exc_velocidade = 10;
  if (has_exc_velocidade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exc_velocidade(), target);
  }

  // optional int32 exc_rotacao = 11;
  if (has_exc_rotacao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->exc_rotacao(), target);
  }

  // optional int32 falha_tmp_liq_arref = 12;
  if (has_falha_tmp_liq_arref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->falha_tmp_liq_arref(), target);
  }

  // optional int32 tensao_alternador = 13;
  if (has_tensao_alternador()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tensao_alternador(), target);
  }

  // optional int32 motor_funcionando = 14;
  if (has_motor_funcionando()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->motor_funcionando(), target);
  }

  // optional int32 est_freio = 15;
  if (has_est_freio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->est_freio(), target);
  }

  // optional int32 est_embreagem = 16;
  if (has_est_embreagem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->est_embreagem(), target);
  }

  // optional int32 est_pressao_oleo = 17;
  if (has_est_pressao_oleo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->est_pressao_oleo(), target);
  }

  // optional int32 est_limpador = 18;
  if (has_est_limpador()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->est_limpador(), target);
  }

  // optional int32 padding = 19;
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->padding(), target);
  }

  // optional int32 id_delta_cfg = 20;
  if (has_id_delta_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->id_delta_cfg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t32_flg_tm)
  return target;
}

int t32_flg_tm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 falha_pressao_oleo = 1;
    if (has_falha_pressao_oleo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->falha_pressao_oleo());
    }

    // optional int32 exc_pe_embreagem = 2;
    if (has_exc_pe_embreagem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exc_pe_embreagem());
    }

    // optional int32 limpador_ligado = 3;
    if (has_limpador_ligado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limpador_ligado());
    }

    // optional int32 est_caixa_marcha = 4;
    if (has_est_caixa_marcha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_caixa_marcha());
    }

    // optional int32 est_freio_motor = 5;
    if (has_est_freio_motor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_freio_motor());
    }

    // optional int32 est_saida = 6;
    if (has_est_saida()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_saida());
    }

    // optional int32 flag_banguela = 7;
    if (has_flag_banguela()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_banguela());
    }

    // optional int32 ign_sem_giro_motor = 8;
    if (has_ign_sem_giro_motor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ign_sem_giro_motor());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 exc_marcha_lenta = 9;
    if (has_exc_marcha_lenta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exc_marcha_lenta());
    }

    // optional int32 exc_velocidade = 10;
    if (has_exc_velocidade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exc_velocidade());
    }

    // optional int32 exc_rotacao = 11;
    if (has_exc_rotacao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exc_rotacao());
    }

    // optional int32 falha_tmp_liq_arref = 12;
    if (has_falha_tmp_liq_arref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->falha_tmp_liq_arref());
    }

    // optional int32 tensao_alternador = 13;
    if (has_tensao_alternador()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tensao_alternador());
    }

    // optional int32 motor_funcionando = 14;
    if (has_motor_funcionando()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motor_funcionando());
    }

    // optional int32 est_freio = 15;
    if (has_est_freio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_freio());
    }

    // optional int32 est_embreagem = 16;
    if (has_est_embreagem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_embreagem());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int32 est_pressao_oleo = 17;
    if (has_est_pressao_oleo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_pressao_oleo());
    }

    // optional int32 est_limpador = 18;
    if (has_est_limpador()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->est_limpador());
    }

    // optional int32 padding = 19;
    if (has_padding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->padding());
    }

    // optional int32 id_delta_cfg = 20;
    if (has_id_delta_cfg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_delta_cfg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t32_flg_tm::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t32_flg_tm* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t32_flg_tm>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t32_flg_tm::MergeFrom(const t32_flg_tm& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_falha_pressao_oleo()) {
      set_falha_pressao_oleo(from.falha_pressao_oleo());
    }
    if (from.has_exc_pe_embreagem()) {
      set_exc_pe_embreagem(from.exc_pe_embreagem());
    }
    if (from.has_limpador_ligado()) {
      set_limpador_ligado(from.limpador_ligado());
    }
    if (from.has_est_caixa_marcha()) {
      set_est_caixa_marcha(from.est_caixa_marcha());
    }
    if (from.has_est_freio_motor()) {
      set_est_freio_motor(from.est_freio_motor());
    }
    if (from.has_est_saida()) {
      set_est_saida(from.est_saida());
    }
    if (from.has_flag_banguela()) {
      set_flag_banguela(from.flag_banguela());
    }
    if (from.has_ign_sem_giro_motor()) {
      set_ign_sem_giro_motor(from.ign_sem_giro_motor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exc_marcha_lenta()) {
      set_exc_marcha_lenta(from.exc_marcha_lenta());
    }
    if (from.has_exc_velocidade()) {
      set_exc_velocidade(from.exc_velocidade());
    }
    if (from.has_exc_rotacao()) {
      set_exc_rotacao(from.exc_rotacao());
    }
    if (from.has_falha_tmp_liq_arref()) {
      set_falha_tmp_liq_arref(from.falha_tmp_liq_arref());
    }
    if (from.has_tensao_alternador()) {
      set_tensao_alternador(from.tensao_alternador());
    }
    if (from.has_motor_funcionando()) {
      set_motor_funcionando(from.motor_funcionando());
    }
    if (from.has_est_freio()) {
      set_est_freio(from.est_freio());
    }
    if (from.has_est_embreagem()) {
      set_est_embreagem(from.est_embreagem());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_est_pressao_oleo()) {
      set_est_pressao_oleo(from.est_pressao_oleo());
    }
    if (from.has_est_limpador()) {
      set_est_limpador(from.est_limpador());
    }
    if (from.has_padding()) {
      set_padding(from.padding());
    }
    if (from.has_id_delta_cfg()) {
      set_id_delta_cfg(from.id_delta_cfg());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t32_flg_tm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t32_flg_tm::CopyFrom(const t32_flg_tm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t32_flg_tm::IsInitialized() const {

  return true;
}

void t32_flg_tm::Swap(t32_flg_tm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t32_flg_tm::InternalSwap(t32_flg_tm* other) {
  std::swap(falha_pressao_oleo_, other->falha_pressao_oleo_);
  std::swap(exc_pe_embreagem_, other->exc_pe_embreagem_);
  std::swap(limpador_ligado_, other->limpador_ligado_);
  std::swap(est_caixa_marcha_, other->est_caixa_marcha_);
  std::swap(est_freio_motor_, other->est_freio_motor_);
  std::swap(est_saida_, other->est_saida_);
  std::swap(flag_banguela_, other->flag_banguela_);
  std::swap(ign_sem_giro_motor_, other->ign_sem_giro_motor_);
  std::swap(exc_marcha_lenta_, other->exc_marcha_lenta_);
  std::swap(exc_velocidade_, other->exc_velocidade_);
  std::swap(exc_rotacao_, other->exc_rotacao_);
  std::swap(falha_tmp_liq_arref_, other->falha_tmp_liq_arref_);
  std::swap(tensao_alternador_, other->tensao_alternador_);
  std::swap(motor_funcionando_, other->motor_funcionando_);
  std::swap(est_freio_, other->est_freio_);
  std::swap(est_embreagem_, other->est_embreagem_);
  std::swap(est_pressao_oleo_, other->est_pressao_oleo_);
  std::swap(est_limpador_, other->est_limpador_);
  std::swap(padding_, other->padding_);
  std::swap(id_delta_cfg_, other->id_delta_cfg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t32_flg_tm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t32_flg_tm_descriptor_;
  metadata.reflection = t32_flg_tm_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t32_flg_tm

// optional int32 falha_pressao_oleo = 1;
bool t32_flg_tm::has_falha_pressao_oleo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t32_flg_tm::set_has_falha_pressao_oleo() {
  _has_bits_[0] |= 0x00000001u;
}
void t32_flg_tm::clear_has_falha_pressao_oleo() {
  _has_bits_[0] &= ~0x00000001u;
}
void t32_flg_tm::clear_falha_pressao_oleo() {
  falha_pressao_oleo_ = 0;
  clear_has_falha_pressao_oleo();
}
 ::google::protobuf::int32 t32_flg_tm::falha_pressao_oleo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.falha_pressao_oleo)
  return falha_pressao_oleo_;
}
 void t32_flg_tm::set_falha_pressao_oleo(::google::protobuf::int32 value) {
  set_has_falha_pressao_oleo();
  falha_pressao_oleo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.falha_pressao_oleo)
}

// optional int32 exc_pe_embreagem = 2;
bool t32_flg_tm::has_exc_pe_embreagem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t32_flg_tm::set_has_exc_pe_embreagem() {
  _has_bits_[0] |= 0x00000002u;
}
void t32_flg_tm::clear_has_exc_pe_embreagem() {
  _has_bits_[0] &= ~0x00000002u;
}
void t32_flg_tm::clear_exc_pe_embreagem() {
  exc_pe_embreagem_ = 0;
  clear_has_exc_pe_embreagem();
}
 ::google::protobuf::int32 t32_flg_tm::exc_pe_embreagem() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.exc_pe_embreagem)
  return exc_pe_embreagem_;
}
 void t32_flg_tm::set_exc_pe_embreagem(::google::protobuf::int32 value) {
  set_has_exc_pe_embreagem();
  exc_pe_embreagem_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.exc_pe_embreagem)
}

// optional int32 limpador_ligado = 3;
bool t32_flg_tm::has_limpador_ligado() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t32_flg_tm::set_has_limpador_ligado() {
  _has_bits_[0] |= 0x00000004u;
}
void t32_flg_tm::clear_has_limpador_ligado() {
  _has_bits_[0] &= ~0x00000004u;
}
void t32_flg_tm::clear_limpador_ligado() {
  limpador_ligado_ = 0;
  clear_has_limpador_ligado();
}
 ::google::protobuf::int32 t32_flg_tm::limpador_ligado() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.limpador_ligado)
  return limpador_ligado_;
}
 void t32_flg_tm::set_limpador_ligado(::google::protobuf::int32 value) {
  set_has_limpador_ligado();
  limpador_ligado_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.limpador_ligado)
}

// optional int32 est_caixa_marcha = 4;
bool t32_flg_tm::has_est_caixa_marcha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t32_flg_tm::set_has_est_caixa_marcha() {
  _has_bits_[0] |= 0x00000008u;
}
void t32_flg_tm::clear_has_est_caixa_marcha() {
  _has_bits_[0] &= ~0x00000008u;
}
void t32_flg_tm::clear_est_caixa_marcha() {
  est_caixa_marcha_ = 0;
  clear_has_est_caixa_marcha();
}
 ::google::protobuf::int32 t32_flg_tm::est_caixa_marcha() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_caixa_marcha)
  return est_caixa_marcha_;
}
 void t32_flg_tm::set_est_caixa_marcha(::google::protobuf::int32 value) {
  set_has_est_caixa_marcha();
  est_caixa_marcha_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_caixa_marcha)
}

// optional int32 est_freio_motor = 5;
bool t32_flg_tm::has_est_freio_motor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t32_flg_tm::set_has_est_freio_motor() {
  _has_bits_[0] |= 0x00000010u;
}
void t32_flg_tm::clear_has_est_freio_motor() {
  _has_bits_[0] &= ~0x00000010u;
}
void t32_flg_tm::clear_est_freio_motor() {
  est_freio_motor_ = 0;
  clear_has_est_freio_motor();
}
 ::google::protobuf::int32 t32_flg_tm::est_freio_motor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_freio_motor)
  return est_freio_motor_;
}
 void t32_flg_tm::set_est_freio_motor(::google::protobuf::int32 value) {
  set_has_est_freio_motor();
  est_freio_motor_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_freio_motor)
}

// optional int32 est_saida = 6;
bool t32_flg_tm::has_est_saida() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void t32_flg_tm::set_has_est_saida() {
  _has_bits_[0] |= 0x00000020u;
}
void t32_flg_tm::clear_has_est_saida() {
  _has_bits_[0] &= ~0x00000020u;
}
void t32_flg_tm::clear_est_saida() {
  est_saida_ = 0;
  clear_has_est_saida();
}
 ::google::protobuf::int32 t32_flg_tm::est_saida() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_saida)
  return est_saida_;
}
 void t32_flg_tm::set_est_saida(::google::protobuf::int32 value) {
  set_has_est_saida();
  est_saida_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_saida)
}

// optional int32 flag_banguela = 7;
bool t32_flg_tm::has_flag_banguela() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void t32_flg_tm::set_has_flag_banguela() {
  _has_bits_[0] |= 0x00000040u;
}
void t32_flg_tm::clear_has_flag_banguela() {
  _has_bits_[0] &= ~0x00000040u;
}
void t32_flg_tm::clear_flag_banguela() {
  flag_banguela_ = 0;
  clear_has_flag_banguela();
}
 ::google::protobuf::int32 t32_flg_tm::flag_banguela() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.flag_banguela)
  return flag_banguela_;
}
 void t32_flg_tm::set_flag_banguela(::google::protobuf::int32 value) {
  set_has_flag_banguela();
  flag_banguela_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.flag_banguela)
}

// optional int32 ign_sem_giro_motor = 8;
bool t32_flg_tm::has_ign_sem_giro_motor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void t32_flg_tm::set_has_ign_sem_giro_motor() {
  _has_bits_[0] |= 0x00000080u;
}
void t32_flg_tm::clear_has_ign_sem_giro_motor() {
  _has_bits_[0] &= ~0x00000080u;
}
void t32_flg_tm::clear_ign_sem_giro_motor() {
  ign_sem_giro_motor_ = 0;
  clear_has_ign_sem_giro_motor();
}
 ::google::protobuf::int32 t32_flg_tm::ign_sem_giro_motor() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.ign_sem_giro_motor)
  return ign_sem_giro_motor_;
}
 void t32_flg_tm::set_ign_sem_giro_motor(::google::protobuf::int32 value) {
  set_has_ign_sem_giro_motor();
  ign_sem_giro_motor_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.ign_sem_giro_motor)
}

// optional int32 exc_marcha_lenta = 9;
bool t32_flg_tm::has_exc_marcha_lenta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void t32_flg_tm::set_has_exc_marcha_lenta() {
  _has_bits_[0] |= 0x00000100u;
}
void t32_flg_tm::clear_has_exc_marcha_lenta() {
  _has_bits_[0] &= ~0x00000100u;
}
void t32_flg_tm::clear_exc_marcha_lenta() {
  exc_marcha_lenta_ = 0;
  clear_has_exc_marcha_lenta();
}
 ::google::protobuf::int32 t32_flg_tm::exc_marcha_lenta() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.exc_marcha_lenta)
  return exc_marcha_lenta_;
}
 void t32_flg_tm::set_exc_marcha_lenta(::google::protobuf::int32 value) {
  set_has_exc_marcha_lenta();
  exc_marcha_lenta_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.exc_marcha_lenta)
}

// optional int32 exc_velocidade = 10;
bool t32_flg_tm::has_exc_velocidade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void t32_flg_tm::set_has_exc_velocidade() {
  _has_bits_[0] |= 0x00000200u;
}
void t32_flg_tm::clear_has_exc_velocidade() {
  _has_bits_[0] &= ~0x00000200u;
}
void t32_flg_tm::clear_exc_velocidade() {
  exc_velocidade_ = 0;
  clear_has_exc_velocidade();
}
 ::google::protobuf::int32 t32_flg_tm::exc_velocidade() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.exc_velocidade)
  return exc_velocidade_;
}
 void t32_flg_tm::set_exc_velocidade(::google::protobuf::int32 value) {
  set_has_exc_velocidade();
  exc_velocidade_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.exc_velocidade)
}

// optional int32 exc_rotacao = 11;
bool t32_flg_tm::has_exc_rotacao() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void t32_flg_tm::set_has_exc_rotacao() {
  _has_bits_[0] |= 0x00000400u;
}
void t32_flg_tm::clear_has_exc_rotacao() {
  _has_bits_[0] &= ~0x00000400u;
}
void t32_flg_tm::clear_exc_rotacao() {
  exc_rotacao_ = 0;
  clear_has_exc_rotacao();
}
 ::google::protobuf::int32 t32_flg_tm::exc_rotacao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.exc_rotacao)
  return exc_rotacao_;
}
 void t32_flg_tm::set_exc_rotacao(::google::protobuf::int32 value) {
  set_has_exc_rotacao();
  exc_rotacao_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.exc_rotacao)
}

// optional int32 falha_tmp_liq_arref = 12;
bool t32_flg_tm::has_falha_tmp_liq_arref() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void t32_flg_tm::set_has_falha_tmp_liq_arref() {
  _has_bits_[0] |= 0x00000800u;
}
void t32_flg_tm::clear_has_falha_tmp_liq_arref() {
  _has_bits_[0] &= ~0x00000800u;
}
void t32_flg_tm::clear_falha_tmp_liq_arref() {
  falha_tmp_liq_arref_ = 0;
  clear_has_falha_tmp_liq_arref();
}
 ::google::protobuf::int32 t32_flg_tm::falha_tmp_liq_arref() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.falha_tmp_liq_arref)
  return falha_tmp_liq_arref_;
}
 void t32_flg_tm::set_falha_tmp_liq_arref(::google::protobuf::int32 value) {
  set_has_falha_tmp_liq_arref();
  falha_tmp_liq_arref_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.falha_tmp_liq_arref)
}

// optional int32 tensao_alternador = 13;
bool t32_flg_tm::has_tensao_alternador() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void t32_flg_tm::set_has_tensao_alternador() {
  _has_bits_[0] |= 0x00001000u;
}
void t32_flg_tm::clear_has_tensao_alternador() {
  _has_bits_[0] &= ~0x00001000u;
}
void t32_flg_tm::clear_tensao_alternador() {
  tensao_alternador_ = 0;
  clear_has_tensao_alternador();
}
 ::google::protobuf::int32 t32_flg_tm::tensao_alternador() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.tensao_alternador)
  return tensao_alternador_;
}
 void t32_flg_tm::set_tensao_alternador(::google::protobuf::int32 value) {
  set_has_tensao_alternador();
  tensao_alternador_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.tensao_alternador)
}

// optional int32 motor_funcionando = 14;
bool t32_flg_tm::has_motor_funcionando() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void t32_flg_tm::set_has_motor_funcionando() {
  _has_bits_[0] |= 0x00002000u;
}
void t32_flg_tm::clear_has_motor_funcionando() {
  _has_bits_[0] &= ~0x00002000u;
}
void t32_flg_tm::clear_motor_funcionando() {
  motor_funcionando_ = 0;
  clear_has_motor_funcionando();
}
 ::google::protobuf::int32 t32_flg_tm::motor_funcionando() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.motor_funcionando)
  return motor_funcionando_;
}
 void t32_flg_tm::set_motor_funcionando(::google::protobuf::int32 value) {
  set_has_motor_funcionando();
  motor_funcionando_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.motor_funcionando)
}

// optional int32 est_freio = 15;
bool t32_flg_tm::has_est_freio() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void t32_flg_tm::set_has_est_freio() {
  _has_bits_[0] |= 0x00004000u;
}
void t32_flg_tm::clear_has_est_freio() {
  _has_bits_[0] &= ~0x00004000u;
}
void t32_flg_tm::clear_est_freio() {
  est_freio_ = 0;
  clear_has_est_freio();
}
 ::google::protobuf::int32 t32_flg_tm::est_freio() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_freio)
  return est_freio_;
}
 void t32_flg_tm::set_est_freio(::google::protobuf::int32 value) {
  set_has_est_freio();
  est_freio_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_freio)
}

// optional int32 est_embreagem = 16;
bool t32_flg_tm::has_est_embreagem() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void t32_flg_tm::set_has_est_embreagem() {
  _has_bits_[0] |= 0x00008000u;
}
void t32_flg_tm::clear_has_est_embreagem() {
  _has_bits_[0] &= ~0x00008000u;
}
void t32_flg_tm::clear_est_embreagem() {
  est_embreagem_ = 0;
  clear_has_est_embreagem();
}
 ::google::protobuf::int32 t32_flg_tm::est_embreagem() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_embreagem)
  return est_embreagem_;
}
 void t32_flg_tm::set_est_embreagem(::google::protobuf::int32 value) {
  set_has_est_embreagem();
  est_embreagem_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_embreagem)
}

// optional int32 est_pressao_oleo = 17;
bool t32_flg_tm::has_est_pressao_oleo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void t32_flg_tm::set_has_est_pressao_oleo() {
  _has_bits_[0] |= 0x00010000u;
}
void t32_flg_tm::clear_has_est_pressao_oleo() {
  _has_bits_[0] &= ~0x00010000u;
}
void t32_flg_tm::clear_est_pressao_oleo() {
  est_pressao_oleo_ = 0;
  clear_has_est_pressao_oleo();
}
 ::google::protobuf::int32 t32_flg_tm::est_pressao_oleo() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_pressao_oleo)
  return est_pressao_oleo_;
}
 void t32_flg_tm::set_est_pressao_oleo(::google::protobuf::int32 value) {
  set_has_est_pressao_oleo();
  est_pressao_oleo_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_pressao_oleo)
}

// optional int32 est_limpador = 18;
bool t32_flg_tm::has_est_limpador() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void t32_flg_tm::set_has_est_limpador() {
  _has_bits_[0] |= 0x00020000u;
}
void t32_flg_tm::clear_has_est_limpador() {
  _has_bits_[0] &= ~0x00020000u;
}
void t32_flg_tm::clear_est_limpador() {
  est_limpador_ = 0;
  clear_has_est_limpador();
}
 ::google::protobuf::int32 t32_flg_tm::est_limpador() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.est_limpador)
  return est_limpador_;
}
 void t32_flg_tm::set_est_limpador(::google::protobuf::int32 value) {
  set_has_est_limpador();
  est_limpador_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.est_limpador)
}

// optional int32 padding = 19;
bool t32_flg_tm::has_padding() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void t32_flg_tm::set_has_padding() {
  _has_bits_[0] |= 0x00040000u;
}
void t32_flg_tm::clear_has_padding() {
  _has_bits_[0] &= ~0x00040000u;
}
void t32_flg_tm::clear_padding() {
  padding_ = 0;
  clear_has_padding();
}
 ::google::protobuf::int32 t32_flg_tm::padding() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.padding)
  return padding_;
}
 void t32_flg_tm::set_padding(::google::protobuf::int32 value) {
  set_has_padding();
  padding_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.padding)
}

// optional int32 id_delta_cfg = 20;
bool t32_flg_tm::has_id_delta_cfg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void t32_flg_tm::set_has_id_delta_cfg() {
  _has_bits_[0] |= 0x00080000u;
}
void t32_flg_tm::clear_has_id_delta_cfg() {
  _has_bits_[0] &= ~0x00080000u;
}
void t32_flg_tm::clear_id_delta_cfg() {
  id_delta_cfg_ = 0;
  clear_has_id_delta_cfg();
}
 ::google::protobuf::int32 t32_flg_tm::id_delta_cfg() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t32_flg_tm.id_delta_cfg)
  return id_delta_cfg_;
}
 void t32_flg_tm::set_id_delta_cfg(::google::protobuf::int32 value) {
  set_has_id_delta_cfg();
  id_delta_cfg_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t32_flg_tm.id_delta_cfg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pacote_posicao

// @@protoc_insertion_point(global_scope)
