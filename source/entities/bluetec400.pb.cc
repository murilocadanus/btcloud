// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bluetec400.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entities/bluetec400.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pacote_posicao {

namespace {

const ::google::protobuf::Descriptor* bluetec400_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bluetec400_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_telemetria_bluetec400_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_telemetria_bluetec400_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bluetec400_2eproto() {
  protobuf_AddDesc_bluetec400_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bluetec400.proto");
  GOOGLE_CHECK(file != NULL);
  bluetec400_descriptor_ = file->message_type(0);
  static const int bluetec400_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bluetec400, pe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bluetec400, tb_),
  };
  bluetec400_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      bluetec400_descriptor_,
      bluetec400::default_instance_,
      bluetec400_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bluetec400, _has_bits_[0]),
      -1,
      -1,
      sizeof(bluetec400),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bluetec400, _internal_metadata_),
      -1);
  t_telemetria_bluetec400_descriptor_ = file->message_type(1);
  static const int t_telemetria_bluetec400_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, trecho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, datahora_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, velocidade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, rpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, odometro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, horimetro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, ed8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, acelx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, acely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, an1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, an2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, an3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, an4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, operacao_),
  };
  t_telemetria_bluetec400_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      t_telemetria_bluetec400_descriptor_,
      t_telemetria_bluetec400::default_instance_,
      t_telemetria_bluetec400_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, _has_bits_[0]),
      -1,
      -1,
      sizeof(t_telemetria_bluetec400),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_telemetria_bluetec400, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bluetec400_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      bluetec400_descriptor_, &bluetec400::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      t_telemetria_bluetec400_descriptor_, &t_telemetria_bluetec400::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bluetec400_2eproto() {
  delete bluetec400::default_instance_;
  delete bluetec400_reflection_;
  delete t_telemetria_bluetec400::default_instance_;
  delete t_telemetria_bluetec400_reflection_;
}

void protobuf_AddDesc_bluetec400_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pacote_posicao::protobuf_AddDesc_pacote_5fposicao_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020bluetec400.proto\022\016pacote_posicao\032\024paco"
    "te_posicao.proto\"q\n\nbluetec400\022.\n\002pe\030\001 \002"
    "(\0132\".pacote_posicao.pacote_enriquecido\0223"
    "\n\002tb\030\002 \003(\0132\'.pacote_posicao.t_telemetria"
    "_bluetec400\"\315\002\n\027t_telemetria_bluetec400\022"
    "\016\n\006trecho\030\001 \001(\005\022\020\n\010datahora\030\002 \001(\005\022\022\n\nvel"
    "ocidade\030\003 \001(\001\022\013\n\003rpm\030\004 \001(\005\022\020\n\010odometro\030\005"
    " \001(\001\022\021\n\thorimetro\030\006 \001(\001\022\013\n\003ed1\030\007 \001(\010\022\013\n\003"
    "ed2\030\010 \001(\010\022\013\n\003ed3\030\t \001(\010\022\013\n\003ed4\030\n \001(\010\022\013\n\003e"
    "d5\030\013 \001(\010\022\013\n\003ed6\030\014 \001(\010\022\013\n\003ed7\030\r \001(\010\022\013\n\003ed"
    "8\030\016 \001(\010\022\r\n\005acelx\030\017 \001(\001\022\r\n\005acely\030\020 \001(\001\022\013\n"
    "\003an1\030\021 \001(\005\022\013\n\003an2\030\022 \001(\005\022\013\n\003an3\030\023 \001(\005\022\013\n\003"
    "an4\030\024 \001(\005\022\020\n\010operacao\030\025 \001(\014", 507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bluetec400.proto", &protobuf_RegisterTypes);
  bluetec400::default_instance_ = new bluetec400();
  t_telemetria_bluetec400::default_instance_ = new t_telemetria_bluetec400();
  bluetec400::default_instance_->InitAsDefaultInstance();
  t_telemetria_bluetec400::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bluetec400_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bluetec400_2eproto {
  StaticDescriptorInitializer_bluetec400_2eproto() {
    protobuf_AddDesc_bluetec400_2eproto();
  }
} static_descriptor_initializer_bluetec400_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bluetec400::kPeFieldNumber;
const int bluetec400::kTbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bluetec400::bluetec400()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.bluetec400)
}

void bluetec400::InitAsDefaultInstance() {
  pe_ = const_cast< ::pacote_posicao::pacote_enriquecido*>(&::pacote_posicao::pacote_enriquecido::default_instance());
}

bluetec400::bluetec400(const bluetec400& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.bluetec400)
}

void bluetec400::SharedCtor() {
  _cached_size_ = 0;
  pe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bluetec400::~bluetec400() {
  // @@protoc_insertion_point(destructor:pacote_posicao.bluetec400)
  SharedDtor();
}

void bluetec400::SharedDtor() {
  if (this != default_instance_) {
    delete pe_;
  }
}

void bluetec400::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bluetec400::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bluetec400_descriptor_;
}

const bluetec400& bluetec400::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bluetec400_2eproto();
  return *default_instance_;
}

bluetec400* bluetec400::default_instance_ = NULL;

bluetec400* bluetec400::New(::google::protobuf::Arena* arena) const {
  bluetec400* n = new bluetec400;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bluetec400::Clear() {
  if (has_pe()) {
    if (pe_ != NULL) pe_->::pacote_posicao::pacote_enriquecido::Clear();
  }
  tb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool bluetec400::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.bluetec400)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pacote_posicao.pacote_enriquecido pe = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tb;
        break;
      }

      // repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
      case 2: {
        if (tag == 18) {
         parse_tb:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tb;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.bluetec400)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.bluetec400)
  return false;
#undef DO_
}

void bluetec400::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.bluetec400)
  // required .pacote_posicao.pacote_enriquecido pe = 1;
  if (has_pe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pe_, output);
  }

  // repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
  for (unsigned int i = 0, n = this->tb_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tb(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.bluetec400)
}

::google::protobuf::uint8* bluetec400::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.bluetec400)
  // required .pacote_posicao.pacote_enriquecido pe = 1;
  if (has_pe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->pe_, target);
  }

  // repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
  for (unsigned int i = 0, n = this->tb_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tb(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.bluetec400)
  return target;
}

int bluetec400::ByteSize() const {
  int total_size = 0;

  // required .pacote_posicao.pacote_enriquecido pe = 1;
  if (has_pe()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pe_);
  }
  // repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
  total_size += 1 * this->tb_size();
  for (int i = 0; i < this->tb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tb(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bluetec400::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const bluetec400* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const bluetec400>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bluetec400::MergeFrom(const bluetec400& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tb_.MergeFrom(from.tb_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pe()) {
      mutable_pe()->::pacote_posicao::pacote_enriquecido::MergeFrom(from.pe());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void bluetec400::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bluetec400::CopyFrom(const bluetec400& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bluetec400::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pe()) {
    if (!this->pe_->IsInitialized()) return false;
  }
  return true;
}

void bluetec400::Swap(bluetec400* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bluetec400::InternalSwap(bluetec400* other) {
  std::swap(pe_, other->pe_);
  tb_.UnsafeArenaSwap(&other->tb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bluetec400::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bluetec400_descriptor_;
  metadata.reflection = bluetec400_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bluetec400

// required .pacote_posicao.pacote_enriquecido pe = 1;
bool bluetec400::has_pe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void bluetec400::set_has_pe() {
  _has_bits_[0] |= 0x00000001u;
}
void bluetec400::clear_has_pe() {
  _has_bits_[0] &= ~0x00000001u;
}
void bluetec400::clear_pe() {
  if (pe_ != NULL) pe_->::pacote_posicao::pacote_enriquecido::Clear();
  clear_has_pe();
}
const ::pacote_posicao::pacote_enriquecido& bluetec400::pe() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.bluetec400.pe)
  return pe_ != NULL ? *pe_ : *default_instance_->pe_;
}
::pacote_posicao::pacote_enriquecido* bluetec400::mutable_pe() {
  set_has_pe();
  if (pe_ == NULL) {
    pe_ = new ::pacote_posicao::pacote_enriquecido;
  }
  // @@protoc_insertion_point(field_mutable:pacote_posicao.bluetec400.pe)
  return pe_;
}
::pacote_posicao::pacote_enriquecido* bluetec400::release_pe() {
  clear_has_pe();
  ::pacote_posicao::pacote_enriquecido* temp = pe_;
  pe_ = NULL;
  return temp;
}
void bluetec400::set_allocated_pe(::pacote_posicao::pacote_enriquecido* pe) {
  delete pe_;
  pe_ = pe;
  if (pe) {
    set_has_pe();
  } else {
    clear_has_pe();
  }
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.bluetec400.pe)
}

// repeated .pacote_posicao.t_telemetria_bluetec400 tb = 2;
int bluetec400::tb_size() const {
  return tb_.size();
}
void bluetec400::clear_tb() {
  tb_.Clear();
}
const ::pacote_posicao::t_telemetria_bluetec400& bluetec400::tb(int index) const {
  // @@protoc_insertion_point(field_get:pacote_posicao.bluetec400.tb)
  return tb_.Get(index);
}
::pacote_posicao::t_telemetria_bluetec400* bluetec400::mutable_tb(int index) {
  // @@protoc_insertion_point(field_mutable:pacote_posicao.bluetec400.tb)
  return tb_.Mutable(index);
}
::pacote_posicao::t_telemetria_bluetec400* bluetec400::add_tb() {
  // @@protoc_insertion_point(field_add:pacote_posicao.bluetec400.tb)
  return tb_.Add();
}
::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 >*
bluetec400::mutable_tb() {
  // @@protoc_insertion_point(field_mutable_list:pacote_posicao.bluetec400.tb)
  return &tb_;
}
const ::google::protobuf::RepeatedPtrField< ::pacote_posicao::t_telemetria_bluetec400 >&
bluetec400::tb() const {
  // @@protoc_insertion_point(field_list:pacote_posicao.bluetec400.tb)
  return tb_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int t_telemetria_bluetec400::kTrechoFieldNumber;
const int t_telemetria_bluetec400::kDatahoraFieldNumber;
const int t_telemetria_bluetec400::kVelocidadeFieldNumber;
const int t_telemetria_bluetec400::kRpmFieldNumber;
const int t_telemetria_bluetec400::kOdometroFieldNumber;
const int t_telemetria_bluetec400::kHorimetroFieldNumber;
const int t_telemetria_bluetec400::kEd1FieldNumber;
const int t_telemetria_bluetec400::kEd2FieldNumber;
const int t_telemetria_bluetec400::kEd3FieldNumber;
const int t_telemetria_bluetec400::kEd4FieldNumber;
const int t_telemetria_bluetec400::kEd5FieldNumber;
const int t_telemetria_bluetec400::kEd6FieldNumber;
const int t_telemetria_bluetec400::kEd7FieldNumber;
const int t_telemetria_bluetec400::kEd8FieldNumber;
const int t_telemetria_bluetec400::kAcelxFieldNumber;
const int t_telemetria_bluetec400::kAcelyFieldNumber;
const int t_telemetria_bluetec400::kAn1FieldNumber;
const int t_telemetria_bluetec400::kAn2FieldNumber;
const int t_telemetria_bluetec400::kAn3FieldNumber;
const int t_telemetria_bluetec400::kAn4FieldNumber;
const int t_telemetria_bluetec400::kOperacaoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

t_telemetria_bluetec400::t_telemetria_bluetec400()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pacote_posicao.t_telemetria_bluetec400)
}

void t_telemetria_bluetec400::InitAsDefaultInstance() {
}

t_telemetria_bluetec400::t_telemetria_bluetec400(const t_telemetria_bluetec400& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pacote_posicao.t_telemetria_bluetec400)
}

void t_telemetria_bluetec400::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trecho_ = 0;
  datahora_ = 0;
  velocidade_ = 0;
  rpm_ = 0;
  odometro_ = 0;
  horimetro_ = 0;
  ed1_ = false;
  ed2_ = false;
  ed3_ = false;
  ed4_ = false;
  ed5_ = false;
  ed6_ = false;
  ed7_ = false;
  ed8_ = false;
  acelx_ = 0;
  acely_ = 0;
  an1_ = 0;
  an2_ = 0;
  an3_ = 0;
  an4_ = 0;
  operacao_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_telemetria_bluetec400::~t_telemetria_bluetec400() {
  // @@protoc_insertion_point(destructor:pacote_posicao.t_telemetria_bluetec400)
  SharedDtor();
}

void t_telemetria_bluetec400::SharedDtor() {
  operacao_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void t_telemetria_bluetec400::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_telemetria_bluetec400::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_telemetria_bluetec400_descriptor_;
}

const t_telemetria_bluetec400& t_telemetria_bluetec400::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bluetec400_2eproto();
  return *default_instance_;
}

t_telemetria_bluetec400* t_telemetria_bluetec400::default_instance_ = NULL;

t_telemetria_bluetec400* t_telemetria_bluetec400::New(::google::protobuf::Arena* arena) const {
  t_telemetria_bluetec400* n = new t_telemetria_bluetec400;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void t_telemetria_bluetec400::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<t_telemetria_bluetec400*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(trecho_, ed2_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(ed3_, ed8_);
    ZR_(acelx_, acely_);
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(an2_, an3_);
    an1_ = 0;
    an4_ = 0;
    if (has_operacao()) {
      operacao_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool t_telemetria_bluetec400::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pacote_posicao.t_telemetria_bluetec400)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trecho = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trecho_)));
          set_has_trecho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_datahora;
        break;
      }

      // optional int32 datahora = 2;
      case 2: {
        if (tag == 16) {
         parse_datahora:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datahora_)));
          set_has_datahora();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_velocidade;
        break;
      }

      // optional double velocidade = 3;
      case 3: {
        if (tag == 25) {
         parse_velocidade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocidade_)));
          set_has_velocidade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rpm;
        break;
      }

      // optional int32 rpm = 4;
      case 4: {
        if (tag == 32) {
         parse_rpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpm_)));
          set_has_rpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_odometro;
        break;
      }

      // optional double odometro = 5;
      case 5: {
        if (tag == 41) {
         parse_odometro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometro_)));
          set_has_odometro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_horimetro;
        break;
      }

      // optional double horimetro = 6;
      case 6: {
        if (tag == 49) {
         parse_horimetro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horimetro_)));
          set_has_horimetro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ed1;
        break;
      }

      // optional bool ed1 = 7;
      case 7: {
        if (tag == 56) {
         parse_ed1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed1_)));
          set_has_ed1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ed2;
        break;
      }

      // optional bool ed2 = 8;
      case 8: {
        if (tag == 64) {
         parse_ed2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed2_)));
          set_has_ed2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ed3;
        break;
      }

      // optional bool ed3 = 9;
      case 9: {
        if (tag == 72) {
         parse_ed3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed3_)));
          set_has_ed3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ed4;
        break;
      }

      // optional bool ed4 = 10;
      case 10: {
        if (tag == 80) {
         parse_ed4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed4_)));
          set_has_ed4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ed5;
        break;
      }

      // optional bool ed5 = 11;
      case 11: {
        if (tag == 88) {
         parse_ed5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed5_)));
          set_has_ed5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ed6;
        break;
      }

      // optional bool ed6 = 12;
      case 12: {
        if (tag == 96) {
         parse_ed6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed6_)));
          set_has_ed6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ed7;
        break;
      }

      // optional bool ed7 = 13;
      case 13: {
        if (tag == 104) {
         parse_ed7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed7_)));
          set_has_ed7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ed8;
        break;
      }

      // optional bool ed8 = 14;
      case 14: {
        if (tag == 112) {
         parse_ed8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ed8_)));
          set_has_ed8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_acelx;
        break;
      }

      // optional double acelx = 15;
      case 15: {
        if (tag == 121) {
         parse_acelx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acelx_)));
          set_has_acelx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_acely;
        break;
      }

      // optional double acely = 16;
      case 16: {
        if (tag == 129) {
         parse_acely:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acely_)));
          set_has_acely();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_an1;
        break;
      }

      // optional int32 an1 = 17;
      case 17: {
        if (tag == 136) {
         parse_an1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &an1_)));
          set_has_an1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_an2;
        break;
      }

      // optional int32 an2 = 18;
      case 18: {
        if (tag == 144) {
         parse_an2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &an2_)));
          set_has_an2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_an3;
        break;
      }

      // optional int32 an3 = 19;
      case 19: {
        if (tag == 152) {
         parse_an3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &an3_)));
          set_has_an3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_an4;
        break;
      }

      // optional int32 an4 = 20;
      case 20: {
        if (tag == 160) {
         parse_an4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &an4_)));
          set_has_an4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_operacao;
        break;
      }

      // optional bytes operacao = 21;
      case 21: {
        if (tag == 170) {
         parse_operacao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operacao()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pacote_posicao.t_telemetria_bluetec400)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pacote_posicao.t_telemetria_bluetec400)
  return false;
#undef DO_
}

void t_telemetria_bluetec400::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pacote_posicao.t_telemetria_bluetec400)
  // optional int32 trecho = 1;
  if (has_trecho()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trecho(), output);
  }

  // optional int32 datahora = 2;
  if (has_datahora()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datahora(), output);
  }

  // optional double velocidade = 3;
  if (has_velocidade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->velocidade(), output);
  }

  // optional int32 rpm = 4;
  if (has_rpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rpm(), output);
  }

  // optional double odometro = 5;
  if (has_odometro()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->odometro(), output);
  }

  // optional double horimetro = 6;
  if (has_horimetro()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->horimetro(), output);
  }

  // optional bool ed1 = 7;
  if (has_ed1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ed1(), output);
  }

  // optional bool ed2 = 8;
  if (has_ed2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ed2(), output);
  }

  // optional bool ed3 = 9;
  if (has_ed3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ed3(), output);
  }

  // optional bool ed4 = 10;
  if (has_ed4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ed4(), output);
  }

  // optional bool ed5 = 11;
  if (has_ed5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ed5(), output);
  }

  // optional bool ed6 = 12;
  if (has_ed6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ed6(), output);
  }

  // optional bool ed7 = 13;
  if (has_ed7()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->ed7(), output);
  }

  // optional bool ed8 = 14;
  if (has_ed8()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ed8(), output);
  }

  // optional double acelx = 15;
  if (has_acelx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->acelx(), output);
  }

  // optional double acely = 16;
  if (has_acely()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->acely(), output);
  }

  // optional int32 an1 = 17;
  if (has_an1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->an1(), output);
  }

  // optional int32 an2 = 18;
  if (has_an2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->an2(), output);
  }

  // optional int32 an3 = 19;
  if (has_an3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->an3(), output);
  }

  // optional int32 an4 = 20;
  if (has_an4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->an4(), output);
  }

  // optional bytes operacao = 21;
  if (has_operacao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->operacao(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pacote_posicao.t_telemetria_bluetec400)
}

::google::protobuf::uint8* t_telemetria_bluetec400::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pacote_posicao.t_telemetria_bluetec400)
  // optional int32 trecho = 1;
  if (has_trecho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trecho(), target);
  }

  // optional int32 datahora = 2;
  if (has_datahora()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datahora(), target);
  }

  // optional double velocidade = 3;
  if (has_velocidade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->velocidade(), target);
  }

  // optional int32 rpm = 4;
  if (has_rpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rpm(), target);
  }

  // optional double odometro = 5;
  if (has_odometro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->odometro(), target);
  }

  // optional double horimetro = 6;
  if (has_horimetro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->horimetro(), target);
  }

  // optional bool ed1 = 7;
  if (has_ed1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ed1(), target);
  }

  // optional bool ed2 = 8;
  if (has_ed2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ed2(), target);
  }

  // optional bool ed3 = 9;
  if (has_ed3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ed3(), target);
  }

  // optional bool ed4 = 10;
  if (has_ed4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ed4(), target);
  }

  // optional bool ed5 = 11;
  if (has_ed5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ed5(), target);
  }

  // optional bool ed6 = 12;
  if (has_ed6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ed6(), target);
  }

  // optional bool ed7 = 13;
  if (has_ed7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->ed7(), target);
  }

  // optional bool ed8 = 14;
  if (has_ed8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ed8(), target);
  }

  // optional double acelx = 15;
  if (has_acelx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->acelx(), target);
  }

  // optional double acely = 16;
  if (has_acely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->acely(), target);
  }

  // optional int32 an1 = 17;
  if (has_an1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->an1(), target);
  }

  // optional int32 an2 = 18;
  if (has_an2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->an2(), target);
  }

  // optional int32 an3 = 19;
  if (has_an3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->an3(), target);
  }

  // optional int32 an4 = 20;
  if (has_an4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->an4(), target);
  }

  // optional bytes operacao = 21;
  if (has_operacao()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->operacao(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pacote_posicao.t_telemetria_bluetec400)
  return target;
}

int t_telemetria_bluetec400::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 trecho = 1;
    if (has_trecho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trecho());
    }

    // optional int32 datahora = 2;
    if (has_datahora()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datahora());
    }

    // optional double velocidade = 3;
    if (has_velocidade()) {
      total_size += 1 + 8;
    }

    // optional int32 rpm = 4;
    if (has_rpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpm());
    }

    // optional double odometro = 5;
    if (has_odometro()) {
      total_size += 1 + 8;
    }

    // optional double horimetro = 6;
    if (has_horimetro()) {
      total_size += 1 + 8;
    }

    // optional bool ed1 = 7;
    if (has_ed1()) {
      total_size += 1 + 1;
    }

    // optional bool ed2 = 8;
    if (has_ed2()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool ed3 = 9;
    if (has_ed3()) {
      total_size += 1 + 1;
    }

    // optional bool ed4 = 10;
    if (has_ed4()) {
      total_size += 1 + 1;
    }

    // optional bool ed5 = 11;
    if (has_ed5()) {
      total_size += 1 + 1;
    }

    // optional bool ed6 = 12;
    if (has_ed6()) {
      total_size += 1 + 1;
    }

    // optional bool ed7 = 13;
    if (has_ed7()) {
      total_size += 1 + 1;
    }

    // optional bool ed8 = 14;
    if (has_ed8()) {
      total_size += 1 + 1;
    }

    // optional double acelx = 15;
    if (has_acelx()) {
      total_size += 1 + 8;
    }

    // optional double acely = 16;
    if (has_acely()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int32 an1 = 17;
    if (has_an1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->an1());
    }

    // optional int32 an2 = 18;
    if (has_an2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->an2());
    }

    // optional int32 an3 = 19;
    if (has_an3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->an3());
    }

    // optional int32 an4 = 20;
    if (has_an4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->an4());
    }

    // optional bytes operacao = 21;
    if (has_operacao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->operacao());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_telemetria_bluetec400::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const t_telemetria_bluetec400* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const t_telemetria_bluetec400>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_telemetria_bluetec400::MergeFrom(const t_telemetria_bluetec400& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trecho()) {
      set_trecho(from.trecho());
    }
    if (from.has_datahora()) {
      set_datahora(from.datahora());
    }
    if (from.has_velocidade()) {
      set_velocidade(from.velocidade());
    }
    if (from.has_rpm()) {
      set_rpm(from.rpm());
    }
    if (from.has_odometro()) {
      set_odometro(from.odometro());
    }
    if (from.has_horimetro()) {
      set_horimetro(from.horimetro());
    }
    if (from.has_ed1()) {
      set_ed1(from.ed1());
    }
    if (from.has_ed2()) {
      set_ed2(from.ed2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ed3()) {
      set_ed3(from.ed3());
    }
    if (from.has_ed4()) {
      set_ed4(from.ed4());
    }
    if (from.has_ed5()) {
      set_ed5(from.ed5());
    }
    if (from.has_ed6()) {
      set_ed6(from.ed6());
    }
    if (from.has_ed7()) {
      set_ed7(from.ed7());
    }
    if (from.has_ed8()) {
      set_ed8(from.ed8());
    }
    if (from.has_acelx()) {
      set_acelx(from.acelx());
    }
    if (from.has_acely()) {
      set_acely(from.acely());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_an1()) {
      set_an1(from.an1());
    }
    if (from.has_an2()) {
      set_an2(from.an2());
    }
    if (from.has_an3()) {
      set_an3(from.an3());
    }
    if (from.has_an4()) {
      set_an4(from.an4());
    }
    if (from.has_operacao()) {
      set_has_operacao();
      operacao_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.operacao_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void t_telemetria_bluetec400::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_telemetria_bluetec400::CopyFrom(const t_telemetria_bluetec400& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_telemetria_bluetec400::IsInitialized() const {

  return true;
}

void t_telemetria_bluetec400::Swap(t_telemetria_bluetec400* other) {
  if (other == this) return;
  InternalSwap(other);
}
void t_telemetria_bluetec400::InternalSwap(t_telemetria_bluetec400* other) {
  std::swap(trecho_, other->trecho_);
  std::swap(datahora_, other->datahora_);
  std::swap(velocidade_, other->velocidade_);
  std::swap(rpm_, other->rpm_);
  std::swap(odometro_, other->odometro_);
  std::swap(horimetro_, other->horimetro_);
  std::swap(ed1_, other->ed1_);
  std::swap(ed2_, other->ed2_);
  std::swap(ed3_, other->ed3_);
  std::swap(ed4_, other->ed4_);
  std::swap(ed5_, other->ed5_);
  std::swap(ed6_, other->ed6_);
  std::swap(ed7_, other->ed7_);
  std::swap(ed8_, other->ed8_);
  std::swap(acelx_, other->acelx_);
  std::swap(acely_, other->acely_);
  std::swap(an1_, other->an1_);
  std::swap(an2_, other->an2_);
  std::swap(an3_, other->an3_);
  std::swap(an4_, other->an4_);
  operacao_.Swap(&other->operacao_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata t_telemetria_bluetec400::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_telemetria_bluetec400_descriptor_;
  metadata.reflection = t_telemetria_bluetec400_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// t_telemetria_bluetec400

// optional int32 trecho = 1;
bool t_telemetria_bluetec400::has_trecho() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void t_telemetria_bluetec400::set_has_trecho() {
  _has_bits_[0] |= 0x00000001u;
}
void t_telemetria_bluetec400::clear_has_trecho() {
  _has_bits_[0] &= ~0x00000001u;
}
void t_telemetria_bluetec400::clear_trecho() {
  trecho_ = 0;
  clear_has_trecho();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::trecho() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.trecho)
  return trecho_;
}
 void t_telemetria_bluetec400::set_trecho(::google::protobuf::int32 value) {
  set_has_trecho();
  trecho_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.trecho)
}

// optional int32 datahora = 2;
bool t_telemetria_bluetec400::has_datahora() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void t_telemetria_bluetec400::set_has_datahora() {
  _has_bits_[0] |= 0x00000002u;
}
void t_telemetria_bluetec400::clear_has_datahora() {
  _has_bits_[0] &= ~0x00000002u;
}
void t_telemetria_bluetec400::clear_datahora() {
  datahora_ = 0;
  clear_has_datahora();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::datahora() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.datahora)
  return datahora_;
}
 void t_telemetria_bluetec400::set_datahora(::google::protobuf::int32 value) {
  set_has_datahora();
  datahora_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.datahora)
}

// optional double velocidade = 3;
bool t_telemetria_bluetec400::has_velocidade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void t_telemetria_bluetec400::set_has_velocidade() {
  _has_bits_[0] |= 0x00000004u;
}
void t_telemetria_bluetec400::clear_has_velocidade() {
  _has_bits_[0] &= ~0x00000004u;
}
void t_telemetria_bluetec400::clear_velocidade() {
  velocidade_ = 0;
  clear_has_velocidade();
}
 double t_telemetria_bluetec400::velocidade() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.velocidade)
  return velocidade_;
}
 void t_telemetria_bluetec400::set_velocidade(double value) {
  set_has_velocidade();
  velocidade_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.velocidade)
}

// optional int32 rpm = 4;
bool t_telemetria_bluetec400::has_rpm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void t_telemetria_bluetec400::set_has_rpm() {
  _has_bits_[0] |= 0x00000008u;
}
void t_telemetria_bluetec400::clear_has_rpm() {
  _has_bits_[0] &= ~0x00000008u;
}
void t_telemetria_bluetec400::clear_rpm() {
  rpm_ = 0;
  clear_has_rpm();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::rpm() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.rpm)
  return rpm_;
}
 void t_telemetria_bluetec400::set_rpm(::google::protobuf::int32 value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.rpm)
}

// optional double odometro = 5;
bool t_telemetria_bluetec400::has_odometro() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void t_telemetria_bluetec400::set_has_odometro() {
  _has_bits_[0] |= 0x00000010u;
}
void t_telemetria_bluetec400::clear_has_odometro() {
  _has_bits_[0] &= ~0x00000010u;
}
void t_telemetria_bluetec400::clear_odometro() {
  odometro_ = 0;
  clear_has_odometro();
}
 double t_telemetria_bluetec400::odometro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.odometro)
  return odometro_;
}
 void t_telemetria_bluetec400::set_odometro(double value) {
  set_has_odometro();
  odometro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.odometro)
}

// optional double horimetro = 6;
bool t_telemetria_bluetec400::has_horimetro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void t_telemetria_bluetec400::set_has_horimetro() {
  _has_bits_[0] |= 0x00000020u;
}
void t_telemetria_bluetec400::clear_has_horimetro() {
  _has_bits_[0] &= ~0x00000020u;
}
void t_telemetria_bluetec400::clear_horimetro() {
  horimetro_ = 0;
  clear_has_horimetro();
}
 double t_telemetria_bluetec400::horimetro() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.horimetro)
  return horimetro_;
}
 void t_telemetria_bluetec400::set_horimetro(double value) {
  set_has_horimetro();
  horimetro_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.horimetro)
}

// optional bool ed1 = 7;
bool t_telemetria_bluetec400::has_ed1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void t_telemetria_bluetec400::set_has_ed1() {
  _has_bits_[0] |= 0x00000040u;
}
void t_telemetria_bluetec400::clear_has_ed1() {
  _has_bits_[0] &= ~0x00000040u;
}
void t_telemetria_bluetec400::clear_ed1() {
  ed1_ = false;
  clear_has_ed1();
}
 bool t_telemetria_bluetec400::ed1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed1)
  return ed1_;
}
 void t_telemetria_bluetec400::set_ed1(bool value) {
  set_has_ed1();
  ed1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed1)
}

// optional bool ed2 = 8;
bool t_telemetria_bluetec400::has_ed2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void t_telemetria_bluetec400::set_has_ed2() {
  _has_bits_[0] |= 0x00000080u;
}
void t_telemetria_bluetec400::clear_has_ed2() {
  _has_bits_[0] &= ~0x00000080u;
}
void t_telemetria_bluetec400::clear_ed2() {
  ed2_ = false;
  clear_has_ed2();
}
 bool t_telemetria_bluetec400::ed2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed2)
  return ed2_;
}
 void t_telemetria_bluetec400::set_ed2(bool value) {
  set_has_ed2();
  ed2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed2)
}

// optional bool ed3 = 9;
bool t_telemetria_bluetec400::has_ed3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void t_telemetria_bluetec400::set_has_ed3() {
  _has_bits_[0] |= 0x00000100u;
}
void t_telemetria_bluetec400::clear_has_ed3() {
  _has_bits_[0] &= ~0x00000100u;
}
void t_telemetria_bluetec400::clear_ed3() {
  ed3_ = false;
  clear_has_ed3();
}
 bool t_telemetria_bluetec400::ed3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed3)
  return ed3_;
}
 void t_telemetria_bluetec400::set_ed3(bool value) {
  set_has_ed3();
  ed3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed3)
}

// optional bool ed4 = 10;
bool t_telemetria_bluetec400::has_ed4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void t_telemetria_bluetec400::set_has_ed4() {
  _has_bits_[0] |= 0x00000200u;
}
void t_telemetria_bluetec400::clear_has_ed4() {
  _has_bits_[0] &= ~0x00000200u;
}
void t_telemetria_bluetec400::clear_ed4() {
  ed4_ = false;
  clear_has_ed4();
}
 bool t_telemetria_bluetec400::ed4() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed4)
  return ed4_;
}
 void t_telemetria_bluetec400::set_ed4(bool value) {
  set_has_ed4();
  ed4_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed4)
}

// optional bool ed5 = 11;
bool t_telemetria_bluetec400::has_ed5() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void t_telemetria_bluetec400::set_has_ed5() {
  _has_bits_[0] |= 0x00000400u;
}
void t_telemetria_bluetec400::clear_has_ed5() {
  _has_bits_[0] &= ~0x00000400u;
}
void t_telemetria_bluetec400::clear_ed5() {
  ed5_ = false;
  clear_has_ed5();
}
 bool t_telemetria_bluetec400::ed5() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed5)
  return ed5_;
}
 void t_telemetria_bluetec400::set_ed5(bool value) {
  set_has_ed5();
  ed5_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed5)
}

// optional bool ed6 = 12;
bool t_telemetria_bluetec400::has_ed6() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void t_telemetria_bluetec400::set_has_ed6() {
  _has_bits_[0] |= 0x00000800u;
}
void t_telemetria_bluetec400::clear_has_ed6() {
  _has_bits_[0] &= ~0x00000800u;
}
void t_telemetria_bluetec400::clear_ed6() {
  ed6_ = false;
  clear_has_ed6();
}
 bool t_telemetria_bluetec400::ed6() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed6)
  return ed6_;
}
 void t_telemetria_bluetec400::set_ed6(bool value) {
  set_has_ed6();
  ed6_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed6)
}

// optional bool ed7 = 13;
bool t_telemetria_bluetec400::has_ed7() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void t_telemetria_bluetec400::set_has_ed7() {
  _has_bits_[0] |= 0x00001000u;
}
void t_telemetria_bluetec400::clear_has_ed7() {
  _has_bits_[0] &= ~0x00001000u;
}
void t_telemetria_bluetec400::clear_ed7() {
  ed7_ = false;
  clear_has_ed7();
}
 bool t_telemetria_bluetec400::ed7() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed7)
  return ed7_;
}
 void t_telemetria_bluetec400::set_ed7(bool value) {
  set_has_ed7();
  ed7_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed7)
}

// optional bool ed8 = 14;
bool t_telemetria_bluetec400::has_ed8() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void t_telemetria_bluetec400::set_has_ed8() {
  _has_bits_[0] |= 0x00002000u;
}
void t_telemetria_bluetec400::clear_has_ed8() {
  _has_bits_[0] &= ~0x00002000u;
}
void t_telemetria_bluetec400::clear_ed8() {
  ed8_ = false;
  clear_has_ed8();
}
 bool t_telemetria_bluetec400::ed8() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.ed8)
  return ed8_;
}
 void t_telemetria_bluetec400::set_ed8(bool value) {
  set_has_ed8();
  ed8_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.ed8)
}

// optional double acelx = 15;
bool t_telemetria_bluetec400::has_acelx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void t_telemetria_bluetec400::set_has_acelx() {
  _has_bits_[0] |= 0x00004000u;
}
void t_telemetria_bluetec400::clear_has_acelx() {
  _has_bits_[0] &= ~0x00004000u;
}
void t_telemetria_bluetec400::clear_acelx() {
  acelx_ = 0;
  clear_has_acelx();
}
 double t_telemetria_bluetec400::acelx() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.acelx)
  return acelx_;
}
 void t_telemetria_bluetec400::set_acelx(double value) {
  set_has_acelx();
  acelx_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.acelx)
}

// optional double acely = 16;
bool t_telemetria_bluetec400::has_acely() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void t_telemetria_bluetec400::set_has_acely() {
  _has_bits_[0] |= 0x00008000u;
}
void t_telemetria_bluetec400::clear_has_acely() {
  _has_bits_[0] &= ~0x00008000u;
}
void t_telemetria_bluetec400::clear_acely() {
  acely_ = 0;
  clear_has_acely();
}
 double t_telemetria_bluetec400::acely() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.acely)
  return acely_;
}
 void t_telemetria_bluetec400::set_acely(double value) {
  set_has_acely();
  acely_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.acely)
}

// optional int32 an1 = 17;
bool t_telemetria_bluetec400::has_an1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void t_telemetria_bluetec400::set_has_an1() {
  _has_bits_[0] |= 0x00010000u;
}
void t_telemetria_bluetec400::clear_has_an1() {
  _has_bits_[0] &= ~0x00010000u;
}
void t_telemetria_bluetec400::clear_an1() {
  an1_ = 0;
  clear_has_an1();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::an1() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an1)
  return an1_;
}
 void t_telemetria_bluetec400::set_an1(::google::protobuf::int32 value) {
  set_has_an1();
  an1_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an1)
}

// optional int32 an2 = 18;
bool t_telemetria_bluetec400::has_an2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void t_telemetria_bluetec400::set_has_an2() {
  _has_bits_[0] |= 0x00020000u;
}
void t_telemetria_bluetec400::clear_has_an2() {
  _has_bits_[0] &= ~0x00020000u;
}
void t_telemetria_bluetec400::clear_an2() {
  an2_ = 0;
  clear_has_an2();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::an2() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an2)
  return an2_;
}
 void t_telemetria_bluetec400::set_an2(::google::protobuf::int32 value) {
  set_has_an2();
  an2_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an2)
}

// optional int32 an3 = 19;
bool t_telemetria_bluetec400::has_an3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void t_telemetria_bluetec400::set_has_an3() {
  _has_bits_[0] |= 0x00040000u;
}
void t_telemetria_bluetec400::clear_has_an3() {
  _has_bits_[0] &= ~0x00040000u;
}
void t_telemetria_bluetec400::clear_an3() {
  an3_ = 0;
  clear_has_an3();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::an3() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an3)
  return an3_;
}
 void t_telemetria_bluetec400::set_an3(::google::protobuf::int32 value) {
  set_has_an3();
  an3_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an3)
}

// optional int32 an4 = 20;
bool t_telemetria_bluetec400::has_an4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void t_telemetria_bluetec400::set_has_an4() {
  _has_bits_[0] |= 0x00080000u;
}
void t_telemetria_bluetec400::clear_has_an4() {
  _has_bits_[0] &= ~0x00080000u;
}
void t_telemetria_bluetec400::clear_an4() {
  an4_ = 0;
  clear_has_an4();
}
 ::google::protobuf::int32 t_telemetria_bluetec400::an4() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.an4)
  return an4_;
}
 void t_telemetria_bluetec400::set_an4(::google::protobuf::int32 value) {
  set_has_an4();
  an4_ = value;
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.an4)
}

// optional bytes operacao = 21;
bool t_telemetria_bluetec400::has_operacao() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void t_telemetria_bluetec400::set_has_operacao() {
  _has_bits_[0] |= 0x00100000u;
}
void t_telemetria_bluetec400::clear_has_operacao() {
  _has_bits_[0] &= ~0x00100000u;
}
void t_telemetria_bluetec400::clear_operacao() {
  operacao_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_operacao();
}
 const ::std::string& t_telemetria_bluetec400::operacao() const {
  // @@protoc_insertion_point(field_get:pacote_posicao.t_telemetria_bluetec400.operacao)
  return operacao_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void t_telemetria_bluetec400::set_operacao(const ::std::string& value) {
  set_has_operacao();
  operacao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pacote_posicao.t_telemetria_bluetec400.operacao)
}
 void t_telemetria_bluetec400::set_operacao(const char* value) {
  set_has_operacao();
  operacao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pacote_posicao.t_telemetria_bluetec400.operacao)
}
 void t_telemetria_bluetec400::set_operacao(const void* value, size_t size) {
  set_has_operacao();
  operacao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pacote_posicao.t_telemetria_bluetec400.operacao)
}
 ::std::string* t_telemetria_bluetec400::mutable_operacao() {
  set_has_operacao();
  // @@protoc_insertion_point(field_mutable:pacote_posicao.t_telemetria_bluetec400.operacao)
  return operacao_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* t_telemetria_bluetec400::release_operacao() {
  clear_has_operacao();
  return operacao_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void t_telemetria_bluetec400::set_allocated_operacao(::std::string* operacao) {
  if (operacao != NULL) {
    set_has_operacao();
  } else {
    clear_has_operacao();
  }
  operacao_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operacao);
  // @@protoc_insertion_point(field_set_allocated:pacote_posicao.t_telemetria_bluetec400.operacao)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pacote_posicao

// @@protoc_insertion_point(global_scope)
